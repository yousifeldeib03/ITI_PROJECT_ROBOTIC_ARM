
PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  00005714  000057a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000fe  008000fe  00005846  2**0
                  ALLOC
  3 .stab         00004170  00000000  00000000  00005848  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ee0  00000000  00000000  000099b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ab87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000cbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000dccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ec50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 21 	call	0x4202	; 0x4202 <main>
      8a:	0c 94 88 2b 	jmp	0x5710	; 0x5710 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 2b 	jmp	0x56a2	; 0x56a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad eb       	ldi	r26, 0xBD	; 189
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 2b 	jmp	0x56da	; 0x56da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 2b 	jmp	0x56a2	; 0x56a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d eb       	ldi	r24, 0xBD	; 189
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 2b 	jmp	0x56da	; 0x56da <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 59 2b 	jmp	0x56b2	; 0x56b2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d eb       	ldi	r22, 0xBD	; 189
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 75 2b 	jmp	0x56ea	; 0x56ea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5d 2b 	jmp	0x56ba	; 0x56ba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 79 2b 	jmp	0x56f2	; 0x56f2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 61 2b 	jmp	0x56c2	; 0x56c2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidSetPortDirection>:
#include <util/delay.h>
#include "DIO_interface.h"
#include "DIO_register.h"


void DIO_voidSetPortDirection(u8 u8PortId, u8 u8PortDir){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_voidSetPortDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_voidSetPortDirection+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	6a 83       	std	Y+2, r22	; 0x02
		switch(u8PortId)
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3c 83       	std	Y+4, r19	; 0x04
     cb6:	2b 83       	std	Y+3, r18	; 0x03
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	d1 f0       	breq	.+52     	; 0xcf6 <DIO_voidSetPortDirection+0x58>
     cc2:	2b 81       	ldd	r18, Y+3	; 0x03
     cc4:	3c 81       	ldd	r19, Y+4	; 0x04
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <DIO_voidSetPortDirection+0x38>
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	9c 81       	ldd	r25, Y+4	; 0x04
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <DIO_voidSetPortDirection+0x4e>
     cd4:	1e c0       	rjmp	.+60     	; 0xd12 <DIO_voidSetPortDirection+0x74>
     cd6:	2b 81       	ldd	r18, Y+3	; 0x03
     cd8:	3c 81       	ldd	r19, Y+4	; 0x04
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	81 f0       	breq	.+32     	; 0xd00 <DIO_voidSetPortDirection+0x62>
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <DIO_voidSetPortDirection+0x6c>
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <DIO_voidSetPortDirection+0x74>
		{
		case DIO_u8_PORTA:DDRA=u8PortDir; break;
     cec:	ea e3       	ldi	r30, 0x3A	; 58
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	80 83       	st	Z, r24
     cf4:	0e c0       	rjmp	.+28     	; 0xd12 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTB:DDRB=u8PortDir; break;
     cf6:	e7 e3       	ldi	r30, 0x37	; 55
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	80 83       	st	Z, r24
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTC:DDRC=u8PortDir; break;
     d00:	e4 e3       	ldi	r30, 0x34	; 52
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	80 83       	st	Z, r24
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <DIO_voidSetPortDirection+0x74>
		case DIO_u8_PORTD:DDRD=u8PortDir; break;
     d0a:	e1 e3       	ldi	r30, 0x31	; 49
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	80 83       	st	Z, r24
		}


}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 u8PortId, u8 u8PortVal)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <DIO_voidSetPortValue+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <DIO_voidSetPortValue+0x8>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortId)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	3c 83       	std	Y+4, r19	; 0x04
     d38:	2b 83       	std	Y+3, r18	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	d1 f0       	breq	.+52     	; 0xd78 <DIO_voidSetPortValue+0x58>
     d44:	2b 81       	ldd	r18, Y+3	; 0x03
     d46:	3c 81       	ldd	r19, Y+4	; 0x04
     d48:	22 30       	cpi	r18, 0x02	; 2
     d4a:	31 05       	cpc	r19, r1
     d4c:	2c f4       	brge	.+10     	; 0xd58 <DIO_voidSetPortValue+0x38>
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	61 f0       	breq	.+24     	; 0xd6e <DIO_voidSetPortValue+0x4e>
     d56:	1e c0       	rjmp	.+60     	; 0xd94 <DIO_voidSetPortValue+0x74>
     d58:	2b 81       	ldd	r18, Y+3	; 0x03
     d5a:	3c 81       	ldd	r19, Y+4	; 0x04
     d5c:	22 30       	cpi	r18, 0x02	; 2
     d5e:	31 05       	cpc	r19, r1
     d60:	81 f0       	breq	.+32     	; 0xd82 <DIO_voidSetPortValue+0x62>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	91 05       	cpc	r25, r1
     d6a:	81 f0       	breq	.+32     	; 0xd8c <DIO_voidSetPortValue+0x6c>
     d6c:	13 c0       	rjmp	.+38     	; 0xd94 <DIO_voidSetPortValue+0x74>
	{
	case DIO_u8_PORTA:PORTA=u8PortVal; break;
     d6e:	eb e3       	ldi	r30, 0x3B	; 59
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	80 83       	st	Z, r24
     d76:	0e c0       	rjmp	.+28     	; 0xd94 <DIO_voidSetPortValue+0x74>
	case DIO_u8_PORTB:PORTB=u8PortVal; break;
     d78:	e8 e3       	ldi	r30, 0x38	; 56
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	80 83       	st	Z, r24
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <DIO_voidSetPortValue+0x74>
	case DIO_u8_PORTC:PORTC=u8PortVal; break;
     d82:	e5 e3       	ldi	r30, 0x35	; 53
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	80 83       	st	Z, r24
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <DIO_voidSetPortValue+0x74>
	case DIO_u8_PORTD:PORTD=u8PortVal; break;
     d8c:	e2 e3       	ldi	r30, 0x32	; 50
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	80 83       	st	Z, r24
	}

}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy){
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	27 97       	sbiw	r28, 0x07	; 7
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	6a 83       	std	Y+2, r22	; 0x02
     dba:	4b 83       	std	Y+3, r20	; 0x03
	if(u8PinDirCopy){
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <DIO_voidSetPinDirection+0x22>
     dc2:	6f c0       	rjmp	.+222    	; 0xea2 <DIO_voidSetPinDirection+0x100>
		switch(u8PortIdCopy){
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3f 83       	std	Y+7, r19	; 0x07
     dcc:	2e 83       	std	Y+6, r18	; 0x06
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
     dd0:	9f 81       	ldd	r25, Y+7	; 0x07
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	49 f1       	breq	.+82     	; 0xe2a <DIO_voidSetPinDirection+0x88>
     dd8:	2e 81       	ldd	r18, Y+6	; 0x06
     dda:	3f 81       	ldd	r19, Y+7	; 0x07
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	2c f4       	brge	.+10     	; 0xdec <DIO_voidSetPinDirection+0x4a>
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	9f 81       	ldd	r25, Y+7	; 0x07
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	61 f0       	breq	.+24     	; 0xe02 <DIO_voidSetPinDirection+0x60>
     dea:	ce c0       	rjmp	.+412    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
     dec:	2e 81       	ldd	r18, Y+6	; 0x06
     dee:	3f 81       	ldd	r19, Y+7	; 0x07
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	71 f1       	breq	.+92     	; 0xe52 <DIO_voidSetPinDirection+0xb0>
     df6:	8e 81       	ldd	r24, Y+6	; 0x06
     df8:	9f 81       	ldd	r25, Y+7	; 0x07
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	91 05       	cpc	r25, r1
     dfe:	e9 f1       	breq	.+122    	; 0xe7a <DIO_voidSetPinDirection+0xd8>
     e00:	c3 c0       	rjmp	.+390    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTA:SET_BIT(DDRA,u8PinIdCopy); break;
     e02:	aa e3       	ldi	r26, 0x3A	; 58
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	ea e3       	ldi	r30, 0x3A	; 58
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_voidSetPinDirection+0x7e>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_voidSetPinDirection+0x7a>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	af c0       	rjmp	.+350    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTB:SET_BIT(DDRB,u8PinIdCopy); break;
     e2a:	a7 e3       	ldi	r26, 0x37	; 55
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e7 e3       	ldi	r30, 0x37	; 55
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_voidSetPinDirection+0xa6>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_voidSetPinDirection+0xa2>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	9b c0       	rjmp	.+310    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTC:SET_BIT(DDRC,u8PinIdCopy); break;
     e52:	a4 e3       	ldi	r26, 0x34	; 52
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e4 e3       	ldi	r30, 0x34	; 52
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_voidSetPinDirection+0xce>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_voidSetPinDirection+0xca>
     e74:	84 2b       	or	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	87 c0       	rjmp	.+270    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTD:SET_BIT(DDRD,u8PinIdCopy); break;
     e7a:	a1 e3       	ldi	r26, 0x31	; 49
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e1 e3       	ldi	r30, 0x31	; 49
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_voidSetPinDirection+0xf6>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_voidSetPinDirection+0xf2>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
     ea0:	73 c0       	rjmp	.+230    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		}
	}
	else{
		switch(u8PortIdCopy){
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	3d 83       	std	Y+5, r19	; 0x05
     eaa:	2c 83       	std	Y+4, r18	; 0x04
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	9d 81       	ldd	r25, Y+5	; 0x05
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	59 f1       	breq	.+86     	; 0xf0c <DIO_voidSetPinDirection+0x16a>
     eb6:	2c 81       	ldd	r18, Y+4	; 0x04
     eb8:	3d 81       	ldd	r19, Y+5	; 0x05
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <DIO_voidSetPinDirection+0x128>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f0       	breq	.+26     	; 0xee2 <DIO_voidSetPinDirection+0x140>
     ec8:	5f c0       	rjmp	.+190    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
     eca:	2c 81       	ldd	r18, Y+4	; 0x04
     ecc:	3d 81       	ldd	r19, Y+5	; 0x05
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	89 f1       	breq	.+98     	; 0xf36 <DIO_voidSetPinDirection+0x194>
     ed4:	8c 81       	ldd	r24, Y+4	; 0x04
     ed6:	9d 81       	ldd	r25, Y+5	; 0x05
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <DIO_voidSetPinDirection+0x13e>
     ede:	40 c0       	rjmp	.+128    	; 0xf60 <DIO_voidSetPinDirection+0x1be>
     ee0:	53 c0       	rjmp	.+166    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTA:CLR_BIT(DDRA,u8PinIdCopy); break;
     ee2:	aa e3       	ldi	r26, 0x3A	; 58
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_voidSetPinDirection+0x15e>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_voidSetPinDirection+0x15a>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	3e c0       	rjmp	.+124    	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTB:CLR_BIT(DDRB,u8PinIdCopy); break;
     f0c:	a7 e3       	ldi	r26, 0x37	; 55
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e3       	ldi	r30, 0x37	; 55
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_voidSetPinDirection+0x188>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_voidSetPinDirection+0x184>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	29 c0       	rjmp	.+82     	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTC:CLR_BIT(DDRC,u8PinIdCopy); break;
     f36:	a4 e3       	ldi	r26, 0x34	; 52
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e4 e3       	ldi	r30, 0x34	; 52
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_voidSetPinDirection+0x1b2>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_voidSetPinDirection+0x1ae>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <DIO_voidSetPinDirection+0x1e6>
		case DIO_u8_PORTD:CLR_BIT(DDRD,u8PinIdCopy); break;
     f60:	a1 e3       	ldi	r26, 0x31	; 49
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e1 e3       	ldi	r30, 0x31	; 49
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_voidSetPinDirection+0x1dc>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_voidSetPinDirection+0x1d8>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24

		}
	}

}
     f88:	27 96       	adiw	r28, 0x07	; 7
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <DIO_u8GetPinValue>:





u8  DIO_u8GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy){
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <DIO_u8GetPinValue+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_u8GetPinValue+0x8>
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value=0;
     fac:	19 82       	std	Y+1, r1	; 0x01

	switch(u8PortIdCopy)
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3d 83       	std	Y+5, r19	; 0x05
     fb6:	2c 83       	std	Y+4, r18	; 0x04
     fb8:	4c 81       	ldd	r20, Y+4	; 0x04
     fba:	5d 81       	ldd	r21, Y+5	; 0x05
     fbc:	41 30       	cpi	r20, 0x01	; 1
     fbe:	51 05       	cpc	r21, r1
     fc0:	41 f1       	breq	.+80     	; 0x1012 <DIO_u8GetPinValue+0x78>
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	91 05       	cpc	r25, r1
     fca:	34 f4       	brge	.+12     	; 0xfd8 <DIO_u8GetPinValue+0x3e>
     fcc:	2c 81       	ldd	r18, Y+4	; 0x04
     fce:	3d 81       	ldd	r19, Y+5	; 0x05
     fd0:	21 15       	cp	r18, r1
     fd2:	31 05       	cpc	r19, r1
     fd4:	61 f0       	breq	.+24     	; 0xfee <DIO_u8GetPinValue+0x54>
     fd6:	52 c0       	rjmp	.+164    	; 0x107c <DIO_u8GetPinValue+0xe2>
     fd8:	4c 81       	ldd	r20, Y+4	; 0x04
     fda:	5d 81       	ldd	r21, Y+5	; 0x05
     fdc:	42 30       	cpi	r20, 0x02	; 2
     fde:	51 05       	cpc	r21, r1
     fe0:	51 f1       	breq	.+84     	; 0x1036 <DIO_u8GetPinValue+0x9c>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	91 05       	cpc	r25, r1
     fea:	b9 f1       	breq	.+110    	; 0x105a <DIO_u8GetPinValue+0xc0>
     fec:	47 c0       	rjmp	.+142    	; 0x107c <DIO_u8GetPinValue+0xe2>
	{
	case DIO_u8_PORTA:pin_value = GET_BIT(PINA,u8PinIdCopy);
     fee:	e9 e3       	ldi	r30, 0x39	; 57
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a9 01       	movw	r20, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8GetPinValue+0x6c>
    1002:	55 95       	asr	r21
    1004:	47 95       	ror	r20
    1006:	8a 95       	dec	r24
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8GetPinValue+0x68>
    100a:	ca 01       	movw	r24, r20
    100c:	81 70       	andi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	35 c0       	rjmp	.+106    	; 0x107c <DIO_u8GetPinValue+0xe2>

	break;

	case DIO_u8_PORTB:pin_value = GET_BIT(PINB,u8PinIdCopy);
    1012:	e6 e3       	ldi	r30, 0x36	; 54
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_u8GetPinValue+0x90>
    1026:	55 95       	asr	r21
    1028:	47 95       	ror	r20
    102a:	8a 95       	dec	r24
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_u8GetPinValue+0x8c>
    102e:	ca 01       	movw	r24, r20
    1030:	81 70       	andi	r24, 0x01	; 1
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	23 c0       	rjmp	.+70     	; 0x107c <DIO_u8GetPinValue+0xe2>

	break;

	case DIO_u8_PORTC:pin_value = GET_BIT(PINC,u8PinIdCopy);
    1036:	e3 e3       	ldi	r30, 0x33	; 51
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_u8GetPinValue+0xb4>
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_u8GetPinValue+0xb0>
    1052:	ca 01       	movw	r24, r20
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	11 c0       	rjmp	.+34     	; 0x107c <DIO_u8GetPinValue+0xe2>

	break;

	case DIO_u8_PORTD:pin_value = GET_BIT(PIND,u8PinIdCopy);
    105a:	e0 e3       	ldi	r30, 0x30	; 48
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a9 01       	movw	r20, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_u8GetPinValue+0xd8>
    106e:	55 95       	asr	r21
    1070:	47 95       	ror	r20
    1072:	8a 95       	dec	r24
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_u8GetPinValue+0xd4>
    1076:	ca 01       	movw	r24, r20
    1078:	81 70       	andi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01

	break;
	default: break;
	}
	return pin_value;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	27 97       	sbiw	r28, 0x07	; 7
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	6a 83       	std	Y+2, r22	; 0x02
    10a6:	4b 83       	std	Y+3, r20	; 0x03
	if(u8PinValCopy == DIO_u8_HIGH)
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <DIO_voidSetPinValue+0x22>
    10ae:	6f c0       	rjmp	.+222    	; 0x118e <DIO_voidSetPinValue+0x100>
		{

			switch(u8PortIdCopy){
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3f 83       	std	Y+7, r19	; 0x07
    10b8:	2e 83       	std	Y+6, r18	; 0x06
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	49 f1       	breq	.+82     	; 0x1116 <DIO_voidSetPinValue+0x88>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	2c f4       	brge	.+10     	; 0x10d8 <DIO_voidSetPinValue+0x4a>
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	61 f0       	breq	.+24     	; 0x10ee <DIO_voidSetPinValue+0x60>
    10d6:	ce c0       	rjmp	.+412    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	71 f1       	breq	.+92     	; 0x113e <DIO_voidSetPinValue+0xb0>
    10e2:	8e 81       	ldd	r24, Y+6	; 0x06
    10e4:	9f 81       	ldd	r25, Y+7	; 0x07
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	e9 f1       	breq	.+122    	; 0x1166 <DIO_voidSetPinValue+0xd8>
    10ec:	c3 c0       	rjmp	.+390    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTA : SET_BIT(PORTA , u8PinIdCopy); break;
    10ee:	ab e3       	ldi	r26, 0x3B	; 59
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e3       	ldi	r30, 0x3B	; 59
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_voidSetPinValue+0x7e>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_voidSetPinValue+0x7a>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	af c0       	rjmp	.+350    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTB : SET_BIT(PORTB , u8PinIdCopy); break;
    1116:	a8 e3       	ldi	r26, 0x38	; 56
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e8 e3       	ldi	r30, 0x38	; 56
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_voidSetPinValue+0xa6>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_voidSetPinValue+0xa2>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	9b c0       	rjmp	.+310    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTC : SET_BIT(PORTC , u8PinIdCopy); break;
    113e:	a5 e3       	ldi	r26, 0x35	; 53
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	48 2f       	mov	r20, r24
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 2e       	mov	r0, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_voidSetPinValue+0xce>
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	0a 94       	dec	r0
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_voidSetPinValue+0xca>
    1160:	84 2b       	or	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	87 c0       	rjmp	.+270    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTD : SET_BIT(PORTD , u8PinIdCopy); break;
    1166:	a2 e3       	ldi	r26, 0x32	; 50
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e2 e3       	ldi	r30, 0x32	; 50
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 2e       	mov	r0, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_voidSetPinValue+0xf6>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_voidSetPinValue+0xf2>
    1188:	84 2b       	or	r24, r20
    118a:	8c 93       	st	X, r24
    118c:	73 c0       	rjmp	.+230    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
			}
		}else{
			switch(u8PortIdCopy){
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	3d 83       	std	Y+5, r19	; 0x05
    1196:	2c 83       	std	Y+4, r18	; 0x04
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	91 05       	cpc	r25, r1
    11a0:	59 f1       	breq	.+86     	; 0x11f8 <DIO_voidSetPinValue+0x16a>
    11a2:	2c 81       	ldd	r18, Y+4	; 0x04
    11a4:	3d 81       	ldd	r19, Y+5	; 0x05
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <DIO_voidSetPinValue+0x128>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f0       	breq	.+26     	; 0x11ce <DIO_voidSetPinValue+0x140>
    11b4:	5f c0       	rjmp	.+190    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	89 f1       	breq	.+98     	; 0x1222 <DIO_voidSetPinValue+0x194>
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	83 30       	cpi	r24, 0x03	; 3
    11c6:	91 05       	cpc	r25, r1
    11c8:	09 f4       	brne	.+2      	; 0x11cc <DIO_voidSetPinValue+0x13e>
    11ca:	40 c0       	rjmp	.+128    	; 0x124c <DIO_voidSetPinValue+0x1be>
    11cc:	53 c0       	rjmp	.+166    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTA : CLR_BIT(PORTA , u8PinIdCopy); break;
    11ce:	ab e3       	ldi	r26, 0x3B	; 59
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	eb e3       	ldi	r30, 0x3B	; 59
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_voidSetPinValue+0x15e>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_voidSetPinValue+0x15a>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	3e c0       	rjmp	.+124    	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTB : CLR_BIT(PORTB , u8PinIdCopy); break;
    11f8:	a8 e3       	ldi	r26, 0x38	; 56
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_voidSetPinValue+0x188>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_voidSetPinValue+0x184>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	29 c0       	rjmp	.+82     	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTC : CLR_BIT(PORTC , u8PinIdCopy); break;
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidSetPinValue+0x1b2>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidSetPinValue+0x1ae>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <DIO_voidSetPinValue+0x1e6>
				case DIO_u8_PORTD : CLR_BIT(PORTD , u8PinIdCopy); break;
    124c:	a2 e3       	ldi	r26, 0x32	; 50
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e2 e3       	ldi	r30, 0x32	; 50
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_voidSetPinValue+0x1dc>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_voidSetPinValue+0x1d8>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
			}

		}
}
    1274:	27 96       	adiw	r28, 0x07	; 7
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <DIO_voidTogglePinValue+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <DIO_voidTogglePinValue+0x8>
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	6a 83       	std	Y+2, r22	; 0x02
    switch(u8PortIdCopy)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3c 83       	std	Y+4, r19	; 0x04
    129e:	2b 83       	std	Y+3, r18	; 0x03
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	91 05       	cpc	r25, r1
    12a8:	49 f1       	breq	.+82     	; 0x12fc <DIO_voidTogglePinValue+0x76>
    12aa:	2b 81       	ldd	r18, Y+3	; 0x03
    12ac:	3c 81       	ldd	r19, Y+4	; 0x04
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	2c f4       	brge	.+10     	; 0x12be <DIO_voidTogglePinValue+0x38>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <DIO_voidTogglePinValue+0x4e>
    12bc:	5a c0       	rjmp	.+180    	; 0x1372 <DIO_voidTogglePinValue+0xec>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	3c 81       	ldd	r19, Y+4	; 0x04
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	71 f1       	breq	.+92     	; 0x1324 <DIO_voidTogglePinValue+0x9e>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	83 30       	cpi	r24, 0x03	; 3
    12ce:	91 05       	cpc	r25, r1
    12d0:	e9 f1       	breq	.+122    	; 0x134c <DIO_voidTogglePinValue+0xc6>
    12d2:	4f c0       	rjmp	.+158    	; 0x1372 <DIO_voidTogglePinValue+0xec>
    {
        case DIO_u8_PORTA: TOG_BIT(PORTA , u8PinIdCopy); break;
    12d4:	ab e3       	ldi	r26, 0x3B	; 59
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	eb e3       	ldi	r30, 0x3B	; 59
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_voidTogglePinValue+0x6c>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_voidTogglePinValue+0x68>
    12f6:	84 27       	eor	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	3b c0       	rjmp	.+118    	; 0x1372 <DIO_voidTogglePinValue+0xec>
        case DIO_u8_PORTB: TOG_BIT(PORTB , u8PinIdCopy); break;
    12fc:	a8 e3       	ldi	r26, 0x38	; 56
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_voidTogglePinValue+0x94>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_voidTogglePinValue+0x90>
    131e:	84 27       	eor	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	27 c0       	rjmp	.+78     	; 0x1372 <DIO_voidTogglePinValue+0xec>
        case DIO_u8_PORTC: TOG_BIT(PORTC , u8PinIdCopy); break;
    1324:	a5 e3       	ldi	r26, 0x35	; 53
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_voidTogglePinValue+0xbc>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_voidTogglePinValue+0xb8>
    1346:	84 27       	eor	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	13 c0       	rjmp	.+38     	; 0x1372 <DIO_voidTogglePinValue+0xec>
        case DIO_u8_PORTD: TOG_BIT(PORTD , u8PinIdCopy); break;
    134c:	a2 e3       	ldi	r26, 0x32	; 50
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e2 e3       	ldi	r30, 0x32	; 50
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_voidTogglePinValue+0xe4>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_voidTogglePinValue+0xe0>
    136e:	84 27       	eor	r24, r20
    1370:	8c 93       	st	X, r24
    }
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <Global_Interrupt_Enable>:
#include "GIE_Register.h"
#include "GIE_interface.h"



void Global_Interrupt_Enable(void){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,7);
    1388:	af e5       	ldi	r26, 0x5F	; 95
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ef e5       	ldi	r30, 0x5F	; 95
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 68       	ori	r24, 0x80	; 128
    1394:	8c 93       	st	X, r24
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <Global_Interrupt_Disable>:

void Global_Interrupt_Disable(void){
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62

	SREG &=~(1<<7);
    13a4:	af e5       	ldi	r26, 0x5F	; 95
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ef e5       	ldi	r30, 0x5F	; 95
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 77       	andi	r24, 0x7F	; 127
    13b0:	8c 93       	st	X, r24
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <Keypad_Init>:
u8 cols[4] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};

// Key mapping
u8 keymap[4][4] = KPD_Array;

void Keypad_Init(void){
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    for(u8 i=0;i<4;i++){
    13c2:	19 82       	std	Y+1, r1	; 0x01
    13c4:	33 c0       	rjmp	.+102    	; 0x142c <Keypad_Init+0x74>
        // Rows as inputs with pull-up
        DIO_voidSetPinDirection(Keypad_PORT, rows[i], DIO_u8_INPUT);
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	fc 01       	movw	r30, r24
    13ce:	eb 53       	subi	r30, 0x3B	; 59
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	90 81       	ld	r25, Z
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	69 2f       	mov	r22, r25
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinValue(Keypad_PORT, rows[i], DIO_u8_HIGH);
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	fc 01       	movw	r30, r24
    13e6:	eb 53       	subi	r30, 0x3B	; 59
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	90 81       	ld	r25, Z
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	69 2f       	mov	r22, r25
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

        // Columns as outputs default HIGH
        DIO_voidSetPinDirection(Keypad_PORT, cols[i], DIO_u8_OUTPUT);
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	fc 01       	movw	r30, r24
    13fe:	e7 53       	subi	r30, 0x37	; 55
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	90 81       	ld	r25, Z
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	69 2f       	mov	r22, r25
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinValue(Keypad_PORT, cols[i], DIO_u8_HIGH);
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	fc 01       	movw	r30, r24
    1416:	e7 53       	subi	r30, 0x37	; 55
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	90 81       	ld	r25, Z
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	69 2f       	mov	r22, r25
    1420:	41 e0       	ldi	r20, 0x01	; 1
    1422:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

// Key mapping
u8 keymap[4][4] = KPD_Array;

void Keypad_Init(void){
    for(u8 i=0;i<4;i++){
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	50 f2       	brcs	.-108    	; 0x13c6 <Keypad_Init+0xe>

        // Columns as outputs default HIGH
        DIO_voidSetPinDirection(Keypad_PORT, cols[i], DIO_u8_OUTPUT);
        DIO_voidSetPinValue(Keypad_PORT, cols[i], DIO_u8_HIGH);
    }
}
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <GET_Pressed_Key>:

u8 GET_Pressed_Key(void){
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <GET_Pressed_Key+0x6>
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    for(u8 c=0;c<4;c++){
    1446:	1a 82       	std	Y+2, r1	; 0x02
    1448:	4f c0       	rjmp	.+158    	; 0x14e8 <GET_Pressed_Key+0xae>
        // Drive current column LOW
        DIO_voidSetPinValue(Keypad_PORT, cols[c], DIO_u8_LOW);
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	fc 01       	movw	r30, r24
    1452:	e7 53       	subi	r30, 0x37	; 55
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	90 81       	ld	r25, Z
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	69 2f       	mov	r22, r25
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

        // Scan rows
        for(u8 r=0;r<4;r++){
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	2f c0       	rjmp	.+94     	; 0x14c4 <GET_Pressed_Key+0x8a>
            if(DIO_u8GetPinValue(Keypad_PORT, rows[r]) == DIO_u8_LOW){
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	88 2f       	mov	r24, r24
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	fc 01       	movw	r30, r24
    146e:	eb 53       	subi	r30, 0x3B	; 59
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	90 81       	ld	r25, Z
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	69 2f       	mov	r22, r25
    1478:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_u8GetPinValue>
    147c:	88 23       	and	r24, r24
    147e:	f9 f4       	brne	.+62     	; 0x14be <GET_Pressed_Key+0x84>
                // Restore column HIGH
                DIO_voidSetPinValue(Keypad_PORT, cols[c], DIO_u8_HIGH);
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	fc 01       	movw	r30, r24
    1488:	e7 53       	subi	r30, 0x37	; 55
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	90 81       	ld	r25, Z
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	69 2f       	mov	r22, r25
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

                // Return pressed key immediately (no waiting for release)
                return keymap[r][c];
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	48 2f       	mov	r20, r24
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	ca 01       	movw	r24, r20
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fc 01       	movw	r30, r24
    14b4:	e3 53       	subi	r30, 0x33	; 51
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	8b 83       	std	Y+3, r24	; 0x03
    14bc:	1b c0       	rjmp	.+54     	; 0x14f4 <GET_Pressed_Key+0xba>
    for(u8 c=0;c<4;c++){
        // Drive current column LOW
        DIO_voidSetPinValue(Keypad_PORT, cols[c], DIO_u8_LOW);

        // Scan rows
        for(u8 r=0;r<4;r++){
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	70 f2       	brcs	.-100    	; 0x1466 <GET_Pressed_Key+0x2c>
                return keymap[r][c];
            }
        }

        // Restore column HIGH
        DIO_voidSetPinValue(Keypad_PORT, cols[c], DIO_u8_HIGH);
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	fc 01       	movw	r30, r24
    14d2:	e7 53       	subi	r30, 0x37	; 55
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	90 81       	ld	r25, Z
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	69 2f       	mov	r22, r25
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(Keypad_PORT, cols[i], DIO_u8_HIGH);
    }
}

u8 GET_Pressed_Key(void){
    for(u8 c=0;c<4;c++){
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	8a 83       	std	Y+2, r24	; 0x02
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	08 f4       	brcc	.+2      	; 0x14f0 <GET_Pressed_Key+0xb6>
    14ee:	ad cf       	rjmp	.-166    	; 0x144a <GET_Pressed_Key+0x10>
        }

        // Restore column HIGH
        DIO_voidSetPinValue(Keypad_PORT, cols[c], DIO_u8_HIGH);
    }
    return NOT_Pressed;
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <keypad_getkey>:

char keypad_getkey()
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	e0 97       	sbiw	r28, 0x30	; 48
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    char keymap[4][4] = KPD_Array ;
    1516:	ae 01       	movw	r20, r28
    1518:	45 5e       	subi	r20, 0xE5	; 229
    151a:	5f 4f       	sbci	r21, 0xFF	; 255
    151c:	5d a7       	std	Y+45, r21	; 0x2d
    151e:	4c a7       	std	Y+44, r20	; 0x2c
    1520:	8d ee       	ldi	r24, 0xED	; 237
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9f a7       	std	Y+47, r25	; 0x2f
    1526:	8e a7       	std	Y+46, r24	; 0x2e
    1528:	90 e1       	ldi	r25, 0x10	; 16
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	ee a5       	ldd	r30, Y+46	; 0x2e
    152e:	ff a5       	ldd	r31, Y+47	; 0x2f
    1530:	00 80       	ld	r0, Z
    1532:	4e a5       	ldd	r20, Y+46	; 0x2e
    1534:	5f a5       	ldd	r21, Y+47	; 0x2f
    1536:	4f 5f       	subi	r20, 0xFF	; 255
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	5f a7       	std	Y+47, r21	; 0x2f
    153c:	4e a7       	std	Y+46, r20	; 0x2e
    153e:	ec a5       	ldd	r30, Y+44	; 0x2c
    1540:	fd a5       	ldd	r31, Y+45	; 0x2d
    1542:	00 82       	st	Z, r0
    1544:	4c a5       	ldd	r20, Y+44	; 0x2c
    1546:	5d a5       	ldd	r21, Y+45	; 0x2d
    1548:	4f 5f       	subi	r20, 0xFF	; 255
    154a:	5f 4f       	sbci	r21, 0xFF	; 255
    154c:	5d a7       	std	Y+45, r21	; 0x2d
    154e:	4c a7       	std	Y+44, r20	; 0x2c
    1550:	58 a9       	ldd	r21, Y+48	; 0x30
    1552:	51 50       	subi	r21, 0x01	; 1
    1554:	58 ab       	std	Y+48, r21	; 0x30
    1556:	88 a9       	ldd	r24, Y+48	; 0x30
    1558:	88 23       	and	r24, r24
    155a:	41 f7       	brne	.-48     	; 0x152c <keypad_getkey+0x2a>

    for (uint8_t row = 0; row < 4; row++)
    155c:	1a 8e       	std	Y+26, r1	; 0x1a
    155e:	06 c1       	rjmp	.+524    	; 0x176c <keypad_getkey+0x26a>
    {
        PORTB = (PORTB | 0x0F) & ~(1 << row); // drive one row low
    1560:	a8 e3       	ldi	r26, 0x38	; 56
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e8 e3       	ldi	r30, 0x38	; 56
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 60       	ori	r24, 0x0F	; 15
    156c:	48 2f       	mov	r20, r24
    156e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <keypad_getkey+0x7c>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	2a 95       	dec	r18
    1580:	e2 f7       	brpl	.-8      	; 0x157a <keypad_getkey+0x78>
    1582:	80 95       	com	r24
    1584:	84 23       	and	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a0 ea       	ldi	r26, 0xA0	; 160
    158e:	b0 e4       	ldi	r27, 0x40	; 64
    1590:	8d 8b       	std	Y+21, r24	; 0x15
    1592:	9e 8b       	std	Y+22, r25	; 0x16
    1594:	af 8b       	std	Y+23, r26	; 0x17
    1596:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1598:	6d 89       	ldd	r22, Y+21	; 0x15
    159a:	7e 89       	ldd	r23, Y+22	; 0x16
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	2b ea       	ldi	r18, 0xAB	; 171
    15a2:	3a ea       	ldi	r19, 0xAA	; 170
    15a4:	4a e2       	ldi	r20, 0x2A	; 42
    15a6:	50 e4       	ldi	r21, 0x40	; 64
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 8b       	std	Y+17, r24	; 0x11
    15b2:	9a 8b       	std	Y+18, r25	; 0x12
    15b4:	ab 8b       	std	Y+19, r26	; 0x13
    15b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15b8:	69 89       	ldd	r22, Y+17	; 0x11
    15ba:	7a 89       	ldd	r23, Y+18	; 0x12
    15bc:	8b 89       	ldd	r24, Y+19	; 0x13
    15be:	9c 89       	ldd	r25, Y+20	; 0x14
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	1c f4       	brge	.+6      	; 0x15d6 <keypad_getkey+0xd4>
		__ticks = 1;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	88 8b       	std	Y+16, r24	; 0x10
    15d4:	91 c0       	rjmp	.+290    	; 0x16f8 <keypad_getkey+0x1f6>
	else if (__tmp > 255)
    15d6:	69 89       	ldd	r22, Y+17	; 0x11
    15d8:	7a 89       	ldd	r23, Y+18	; 0x12
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	53 e4       	ldi	r21, 0x43	; 67
    15e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	0c f0       	brlt	.+2      	; 0x15f0 <keypad_getkey+0xee>
    15ee:	7b c0       	rjmp	.+246    	; 0x16e6 <keypad_getkey+0x1e4>
	{
		_delay_ms(__us / 1000.0);
    15f0:	6d 89       	ldd	r22, Y+21	; 0x15
    15f2:	7e 89       	ldd	r23, Y+22	; 0x16
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8c 87       	std	Y+12, r24	; 0x0c
    160a:	9d 87       	std	Y+13, r25	; 0x0d
    160c:	ae 87       	std	Y+14, r26	; 0x0e
    160e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6c 85       	ldd	r22, Y+12	; 0x0c
    1612:	7d 85       	ldd	r23, Y+13	; 0x0d
    1614:	8e 85       	ldd	r24, Y+14	; 0x0e
    1616:	9f 85       	ldd	r25, Y+15	; 0x0f
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a ef       	ldi	r20, 0xFA	; 250
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	88 87       	std	Y+8, r24	; 0x08
    162a:	99 87       	std	Y+9, r25	; 0x09
    162c:	aa 87       	std	Y+10, r26	; 0x0a
    162e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1630:	68 85       	ldd	r22, Y+8	; 0x08
    1632:	79 85       	ldd	r23, Y+9	; 0x09
    1634:	8a 85       	ldd	r24, Y+10	; 0x0a
    1636:	9b 85       	ldd	r25, Y+11	; 0x0b
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <keypad_getkey+0x150>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	8e 83       	std	Y+6, r24	; 0x06
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <keypad_getkey+0x1ce>
	else if (__tmp > 65535)
    1652:	68 85       	ldd	r22, Y+8	; 0x08
    1654:	79 85       	ldd	r23, Y+9	; 0x09
    1656:	8a 85       	ldd	r24, Y+10	; 0x0a
    1658:	9b 85       	ldd	r25, Y+11	; 0x0b
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <keypad_getkey+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6c 85       	ldd	r22, Y+12	; 0x0c
    166c:	7d 85       	ldd	r23, Y+13	; 0x0d
    166e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1670:	9f 85       	ldd	r25, Y+15	; 0x0f
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9f 83       	std	Y+7, r25	; 0x07
    1690:	8e 83       	std	Y+6, r24	; 0x06
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <keypad_getkey+0x1b0>
    1694:	88 ec       	ldi	r24, 0xC8	; 200
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9d 83       	std	Y+5, r25	; 0x05
    169a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	9d 81       	ldd	r25, Y+5	; 0x05
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <keypad_getkey+0x19e>
    16a4:	9d 83       	std	Y+5, r25	; 0x05
    16a6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8e 81       	ldd	r24, Y+6	; 0x06
    16aa:	9f 81       	ldd	r25, Y+7	; 0x07
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9f 83       	std	Y+7, r25	; 0x07
    16b0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	9f 81       	ldd	r25, Y+7	; 0x07
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <keypad_getkey+0x192>
    16ba:	24 c0       	rjmp	.+72     	; 0x1704 <keypad_getkey+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	68 85       	ldd	r22, Y+8	; 0x08
    16be:	79 85       	ldd	r23, Y+9	; 0x09
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9f 83       	std	Y+7, r25	; 0x07
    16ce:	8e 83       	std	Y+6, r24	; 0x06
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	9f 81       	ldd	r25, Y+7	; 0x07
    16d4:	9b 83       	std	Y+3, r25	; 0x03
    16d6:	8a 83       	std	Y+2, r24	; 0x02
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	9b 81       	ldd	r25, Y+3	; 0x03
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <keypad_getkey+0x1da>
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	8a 83       	std	Y+2, r24	; 0x02
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <keypad_getkey+0x202>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16e6:	69 89       	ldd	r22, Y+17	; 0x11
    16e8:	7a 89       	ldd	r23, Y+18	; 0x12
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	88 8b       	std	Y+16, r24	; 0x10
    16f8:	88 89       	ldd	r24, Y+16	; 0x10
    16fa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	8a 95       	dec	r24
    1700:	f1 f7       	brne	.-4      	; 0x16fe <keypad_getkey+0x1fc>
    1702:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(5);

        for (uint8_t col = 0; col < 4; col++)
    1704:	19 8e       	std	Y+25, r1	; 0x19
    1706:	2c c0       	rjmp	.+88     	; 0x1760 <keypad_getkey+0x25e>
        {
            if (!(PINB & (1 << (col + 4))))
    1708:	e6 e3       	ldi	r30, 0x36	; 54
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	89 8d       	ldd	r24, Y+25	; 0x19
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	04 96       	adiw	r24, 0x04	; 4
    171a:	f9 01       	movw	r30, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <keypad_getkey+0x220>
    171e:	f5 95       	asr	r31
    1720:	e7 95       	ror	r30
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <keypad_getkey+0x21c>
    1726:	cf 01       	movw	r24, r30
    1728:	81 70       	andi	r24, 0x01	; 1
    172a:	90 70       	andi	r25, 0x00	; 0
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	a9 f4       	brne	.+42     	; 0x175a <keypad_getkey+0x258>
            {
                return keymap[row][col]; // return immediately if key pressed
    1730:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	89 8d       	ldd	r24, Y+25	; 0x19
    1738:	48 2f       	mov	r20, r24
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	22 0f       	add	r18, r18
    173e:	33 1f       	adc	r19, r19
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	82 0f       	add	r24, r18
    174a:	93 1f       	adc	r25, r19
    174c:	84 0f       	add	r24, r20
    174e:	95 1f       	adc	r25, r21
    1750:	fc 01       	movw	r30, r24
    1752:	7a 96       	adiw	r30, 0x1a	; 26
    1754:	40 81       	ld	r20, Z
    1756:	4b a7       	std	Y+43, r20	; 0x2b
    1758:	0e c0       	rjmp	.+28     	; 0x1776 <keypad_getkey+0x274>
    for (uint8_t row = 0; row < 4; row++)
    {
        PORTB = (PORTB | 0x0F) & ~(1 << row); // drive one row low
        _delay_us(5);

        for (uint8_t col = 0; col < 4; col++)
    175a:	89 8d       	ldd	r24, Y+25	; 0x19
    175c:	8f 5f       	subi	r24, 0xFF	; 255
    175e:	89 8f       	std	Y+25, r24	; 0x19
    1760:	89 8d       	ldd	r24, Y+25	; 0x19
    1762:	84 30       	cpi	r24, 0x04	; 4
    1764:	88 f2       	brcs	.-94     	; 0x1708 <keypad_getkey+0x206>

char keypad_getkey()
{
    char keymap[4][4] = KPD_Array ;

    for (uint8_t row = 0; row < 4; row++)
    1766:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1768:	8f 5f       	subi	r24, 0xFF	; 255
    176a:	8a 8f       	std	Y+26, r24	; 0x1a
    176c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    176e:	84 30       	cpi	r24, 0x04	; 4
    1770:	08 f4       	brcc	.+2      	; 0x1774 <keypad_getkey+0x272>
    1772:	f6 ce       	rjmp	.-532    	; 0x1560 <keypad_getkey+0x5e>
            {
                return keymap[row][col]; // return immediately if key pressed
            }
        }
    }
    return 0; // no key pressed
    1774:	1b a6       	std	Y+43, r1	; 0x2b
    1776:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1778:	e0 96       	adiw	r28, 0x30	; 48
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <LCD_vidInit_8bits>:
#include "DIO_register.h"
#include "LCD_Config.h"
#include "LCD_Interface.h"
#include <util/delay.h>

void LCD_vidInit_8bits(void){
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	c0 5b       	subi	r28, 0xB0	; 176
    1798:	d0 40       	sbci	r29, 0x00	; 0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(DIO_u8_PORTD,0xFF);
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	// RS
	//DIO_voidSetPinDirection (DIO_u8_PORTC, 1, DIO_u8_OUTPUT);
	// RW
	DIO_voidSetPinDirection (DIO_u8_PORTC, 2, DIO_u8_OUTPUT);
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    17c0:	fe 01       	movw	r30, r28
    17c2:	e3 55       	subi	r30, 0x53	; 83
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e2       	ldi	r26, 0x20	; 32
    17cc:	b2 e4       	ldi	r27, 0x42	; 66
    17ce:	80 83       	st	Z, r24
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	a2 83       	std	Z+2, r26	; 0x02
    17d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d6:	8e 01       	movw	r16, r28
    17d8:	07 55       	subi	r16, 0x57	; 87
    17da:	1f 4f       	sbci	r17, 0xFF	; 255
    17dc:	fe 01       	movw	r30, r28
    17de:	e3 55       	subi	r30, 0x53	; 83
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	60 81       	ld	r22, Z
    17e4:	71 81       	ldd	r23, Z+1	; 0x01
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	4a ef       	ldi	r20, 0xFA	; 250
    17f0:	54 e4       	ldi	r21, 0x44	; 68
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f8 01       	movw	r30, r16
    17fc:	80 83       	st	Z, r24
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	a2 83       	std	Z+2, r26	; 0x02
    1802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1804:	fe 01       	movw	r30, r28
    1806:	e7 55       	subi	r30, 0x57	; 87
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	60 81       	ld	r22, Z
    180c:	71 81       	ldd	r23, Z+1	; 0x01
    180e:	82 81       	ldd	r24, Z+2	; 0x02
    1810:	93 81       	ldd	r25, Z+3	; 0x03
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	44 f4       	brge	.+16     	; 0x1832 <LCD_vidInit_8bits+0xa8>
		__ticks = 1;
    1822:	fe 01       	movw	r30, r28
    1824:	e9 55       	subi	r30, 0x59	; 89
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	80 83       	st	Z, r24
    1830:	64 c0       	rjmp	.+200    	; 0x18fa <LCD_vidInit_8bits+0x170>
	else if (__tmp > 65535)
    1832:	fe 01       	movw	r30, r28
    1834:	e7 55       	subi	r30, 0x57	; 87
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	4f e7       	ldi	r20, 0x7F	; 127
    1846:	57 e4       	ldi	r21, 0x47	; 71
    1848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    184c:	18 16       	cp	r1, r24
    184e:	0c f0       	brlt	.+2      	; 0x1852 <LCD_vidInit_8bits+0xc8>
    1850:	43 c0       	rjmp	.+134    	; 0x18d8 <LCD_vidInit_8bits+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	fe 01       	movw	r30, r28
    1854:	e3 55       	subi	r30, 0x53	; 83
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e2       	ldi	r20, 0x20	; 32
    1866:	51 e4       	ldi	r21, 0x41	; 65
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8e 01       	movw	r16, r28
    1872:	09 55       	subi	r16, 0x59	; 89
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	1f c0       	rjmp	.+62     	; 0x18c8 <LCD_vidInit_8bits+0x13e>
    188a:	fe 01       	movw	r30, r28
    188c:	eb 55       	subi	r30, 0x5B	; 91
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	88 ec       	ldi	r24, 0xC8	; 200
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1898:	fe 01       	movw	r30, r28
    189a:	eb 55       	subi	r30, 0x5B	; 91
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_vidInit_8bits+0x118>
    18a6:	fe 01       	movw	r30, r28
    18a8:	eb 55       	subi	r30, 0x5B	; 91
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b0:	de 01       	movw	r26, r28
    18b2:	a9 55       	subi	r26, 0x59	; 89
    18b4:	bf 4f       	sbci	r27, 0xFF	; 255
    18b6:	fe 01       	movw	r30, r28
    18b8:	e9 55       	subi	r30, 0x59	; 89
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	11 96       	adiw	r26, 0x01	; 1
    18c4:	9c 93       	st	X, r25
    18c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	fe 01       	movw	r30, r28
    18ca:	e9 55       	subi	r30, 0x59	; 89
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 81       	ld	r24, Z
    18d0:	91 81       	ldd	r25, Z+1	; 0x01
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	d1 f6       	brne	.-76     	; 0x188a <LCD_vidInit_8bits+0x100>
    18d6:	27 c0       	rjmp	.+78     	; 0x1926 <LCD_vidInit_8bits+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	8e 01       	movw	r16, r28
    18da:	09 55       	subi	r16, 0x59	; 89
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	fe 01       	movw	r30, r28
    18e0:	e7 55       	subi	r30, 0x57	; 87
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	60 81       	ld	r22, Z
    18e6:	71 81       	ldd	r23, Z+1	; 0x01
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	93 81       	ldd	r25, Z+3	; 0x03
    18ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	f8 01       	movw	r30, r16
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
    18fa:	de 01       	movw	r26, r28
    18fc:	ad 55       	subi	r26, 0x5D	; 93
    18fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1900:	fe 01       	movw	r30, r28
    1902:	e9 55       	subi	r30, 0x59	; 89
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	8d 93       	st	X+, r24
    190c:	9c 93       	st	X, r25
    190e:	fe 01       	movw	r30, r28
    1910:	ed 55       	subi	r30, 0x5D	; 93
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_vidInit_8bits+0x18e>
    191c:	fe 01       	movw	r30, r28
    191e:	ed 55       	subi	r30, 0x5D	; 93
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	80 83       	st	Z, r24
	// EN

	// 2. Power-on delay (critical!)
	_delay_ms (40); // Extended delay for safety
	// 3. Triple initialization sequence
	LCD_vidSendCommand(0x30);
    1926:	80 e3       	ldi	r24, 0x30	; 48
    1928:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    192c:	fe 01       	movw	r30, r28
    192e:	e1 56       	subi	r30, 0x61	; 97
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e2       	ldi	r26, 0x20	; 32
    1938:	b1 e4       	ldi	r27, 0x41	; 65
    193a:	80 83       	st	Z, r24
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	a2 83       	std	Z+2, r26	; 0x02
    1940:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	8e 01       	movw	r16, r28
    1944:	05 56       	subi	r16, 0x65	; 101
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	fe 01       	movw	r30, r28
    194a:	e1 56       	subi	r30, 0x61	; 97
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a ef       	ldi	r20, 0xFA	; 250
    195c:	54 e4       	ldi	r21, 0x44	; 68
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	f8 01       	movw	r30, r16
    1968:	80 83       	st	Z, r24
    196a:	91 83       	std	Z+1, r25	; 0x01
    196c:	a2 83       	std	Z+2, r26	; 0x02
    196e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1970:	fe 01       	movw	r30, r28
    1972:	e5 56       	subi	r30, 0x65	; 101
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	60 81       	ld	r22, Z
    1978:	71 81       	ldd	r23, Z+1	; 0x01
    197a:	82 81       	ldd	r24, Z+2	; 0x02
    197c:	93 81       	ldd	r25, Z+3	; 0x03
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	44 f4       	brge	.+16     	; 0x199e <LCD_vidInit_8bits+0x214>
		__ticks = 1;
    198e:	fe 01       	movw	r30, r28
    1990:	e7 56       	subi	r30, 0x67	; 103
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24
    199c:	64 c0       	rjmp	.+200    	; 0x1a66 <LCD_vidInit_8bits+0x2dc>
	else if (__tmp > 65535)
    199e:	fe 01       	movw	r30, r28
    19a0:	e5 56       	subi	r30, 0x65	; 101
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	60 81       	ld	r22, Z
    19a6:	71 81       	ldd	r23, Z+1	; 0x01
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	3f ef       	ldi	r19, 0xFF	; 255
    19b0:	4f e7       	ldi	r20, 0x7F	; 127
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b8:	18 16       	cp	r1, r24
    19ba:	0c f0       	brlt	.+2      	; 0x19be <LCD_vidInit_8bits+0x234>
    19bc:	43 c0       	rjmp	.+134    	; 0x1a44 <LCD_vidInit_8bits+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19be:	fe 01       	movw	r30, r28
    19c0:	e1 56       	subi	r30, 0x61	; 97
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8e 01       	movw	r16, r28
    19de:	07 56       	subi	r16, 0x67	; 103
    19e0:	1f 4f       	sbci	r17, 0xFF	; 255
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	f8 01       	movw	r30, r16
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
    19f4:	1f c0       	rjmp	.+62     	; 0x1a34 <LCD_vidInit_8bits+0x2aa>
    19f6:	fe 01       	movw	r30, r28
    19f8:	e9 56       	subi	r30, 0x69	; 105
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	88 ec       	ldi	r24, 0xC8	; 200
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	fe 01       	movw	r30, r28
    1a06:	e9 56       	subi	r30, 0x69	; 105
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_vidInit_8bits+0x284>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e9 56       	subi	r30, 0x69	; 105
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	de 01       	movw	r26, r28
    1a1e:	a7 56       	subi	r26, 0x67	; 103
    1a20:	bf 4f       	sbci	r27, 0xFF	; 255
    1a22:	fe 01       	movw	r30, r28
    1a24:	e7 56       	subi	r30, 0x67	; 103
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	11 96       	adiw	r26, 0x01	; 1
    1a30:	9c 93       	st	X, r25
    1a32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	fe 01       	movw	r30, r28
    1a36:	e7 56       	subi	r30, 0x67	; 103
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	80 81       	ld	r24, Z
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	d1 f6       	brne	.-76     	; 0x19f6 <LCD_vidInit_8bits+0x26c>
    1a42:	27 c0       	rjmp	.+78     	; 0x1a92 <LCD_vidInit_8bits+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a44:	8e 01       	movw	r16, r28
    1a46:	07 56       	subi	r16, 0x67	; 103
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	e5 56       	subi	r30, 0x65	; 101
    1a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a50:	60 81       	ld	r22, Z
    1a52:	71 81       	ldd	r23, Z+1	; 0x01
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	f8 01       	movw	r30, r16
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	de 01       	movw	r26, r28
    1a68:	ab 56       	subi	r26, 0x6B	; 107
    1a6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e7 56       	subi	r30, 0x67	; 103
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	8d 93       	st	X+, r24
    1a78:	9c 93       	st	X, r25
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	eb 56       	subi	r30, 0x6B	; 107
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	80 81       	ld	r24, Z
    1a82:	91 81       	ldd	r25, Z+1	; 0x01
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_vidInit_8bits+0x2fa>
    1a88:	fe 01       	movw	r30, r28
    1a8a:	eb 56       	subi	r30, 0x6B	; 107
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
	_delay_ms (10);
	LCD_vidSendCommand(0x30);
    1a92:	80 e3       	ldi	r24, 0x30	; 48
    1a94:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 56       	subi	r30, 0x6F	; 111
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	80 83       	st	Z, r24
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	a2 83       	std	Z+2, r26	; 0x02
    1aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	8e 01       	movw	r16, r28
    1ab0:	03 57       	subi	r16, 0x73	; 115
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 56       	subi	r30, 0x6F	; 111
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a ef       	ldi	r20, 0xFA	; 250
    1ac8:	54 e4       	ldi	r21, 0x44	; 68
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1adc:	fe 01       	movw	r30, r28
    1ade:	e3 57       	subi	r30, 0x73	; 115
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	44 f4       	brge	.+16     	; 0x1b0a <LCD_vidInit_8bits+0x380>
		__ticks = 1;
    1afa:	fe 01       	movw	r30, r28
    1afc:	e5 57       	subi	r30, 0x75	; 117
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	64 c0       	rjmp	.+200    	; 0x1bd2 <LCD_vidInit_8bits+0x448>
	else if (__tmp > 65535)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e3 57       	subi	r30, 0x73	; 115
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	0c f0       	brlt	.+2      	; 0x1b2a <LCD_vidInit_8bits+0x3a0>
    1b28:	43 c0       	rjmp	.+134    	; 0x1bb0 <LCD_vidInit_8bits+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ef 56       	subi	r30, 0x6F	; 111
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8e 01       	movw	r16, r28
    1b4a:	05 57       	subi	r16, 0x75	; 117
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	1f c0       	rjmp	.+62     	; 0x1ba0 <LCD_vidInit_8bits+0x416>
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 57       	subi	r30, 0x77	; 119
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	88 ec       	ldi	r24, 0xC8	; 200
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	fe 01       	movw	r30, r28
    1b72:	e7 57       	subi	r30, 0x77	; 119
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_vidInit_8bits+0x3f0>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 57       	subi	r30, 0x77	; 119
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	de 01       	movw	r26, r28
    1b8a:	a5 57       	subi	r26, 0x75	; 117
    1b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e5 57       	subi	r30, 0x75	; 117
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	9c 93       	st	X, r25
    1b9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 57       	subi	r30, 0x75	; 117
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	d1 f6       	brne	.-76     	; 0x1b62 <LCD_vidInit_8bits+0x3d8>
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <LCD_vidInit_8bits+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	05 57       	subi	r16, 0x75	; 117
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e3 57       	subi	r30, 0x73	; 115
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	de 01       	movw	r26, r28
    1bd4:	a9 57       	subi	r26, 0x79	; 121
    1bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 57       	subi	r30, 0x75	; 117
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	8d 93       	st	X+, r24
    1be4:	9c 93       	st	X, r25
    1be6:	fe 01       	movw	r30, r28
    1be8:	e9 57       	subi	r30, 0x79	; 121
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_vidInit_8bits+0x466>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 57       	subi	r30, 0x79	; 121
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_vidSendCommand(0x30);
    1bfe:	80 e3       	ldi	r24, 0x30	; 48
    1c00:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    1c04:	fe 01       	movw	r30, r28
    1c06:	ed 57       	subi	r30, 0x7D	; 125
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a6 e1       	ldi	r26, 0x16	; 22
    1c10:	b3 e4       	ldi	r27, 0x43	; 67
    1c12:	80 83       	st	Z, r24
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	a2 83       	std	Z+2, r26	; 0x02
    1c18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	01 58       	subi	r16, 0x81	; 129
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	fe 01       	movw	r30, r28
    1c22:	ed 57       	subi	r30, 0x7D	; 125
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	2b ea       	ldi	r18, 0xAB	; 171
    1c30:	3a ea       	ldi	r19, 0xAA	; 170
    1c32:	4a e2       	ldi	r20, 0x2A	; 42
    1c34:	50 e4       	ldi	r21, 0x40	; 64
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	80 83       	st	Z, r24
    1c42:	91 83       	std	Z+1, r25	; 0x01
    1c44:	a2 83       	std	Z+2, r26	; 0x02
    1c46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e1 58       	subi	r30, 0x81	; 129
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	34 f4       	brge	.+12     	; 0x1c72 <LCD_vidInit_8bits+0x4e8>
		__ticks = 1;
    1c66:	fe 01       	movw	r30, r28
    1c68:	e2 58       	subi	r30, 0x82	; 130
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 83       	st	Z, r24
    1c70:	e0 c0       	rjmp	.+448    	; 0x1e32 <LCD_vidInit_8bits+0x6a8>
	else if (__tmp > 255)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e1 58       	subi	r30, 0x81	; 129
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	53 e4       	ldi	r21, 0x43	; 67
    1c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <LCD_vidInit_8bits+0x508>
    1c90:	c0 c0       	rjmp	.+384    	; 0x1e12 <LCD_vidInit_8bits+0x688>
	{
		_delay_ms(__us / 1000.0);
    1c92:	fe 01       	movw	r30, r28
    1c94:	ed 57       	subi	r30, 0x7D	; 125
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	4a e7       	ldi	r20, 0x7A	; 122
    1ca6:	54 e4       	ldi	r21, 0x44	; 68
    1ca8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e6 58       	subi	r30, 0x86	; 134
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 83       	st	Z, r24
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	a2 83       	std	Z+2, r26	; 0x02
    1cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	0a 58       	subi	r16, 0x8A	; 138
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e6 58       	subi	r30, 0x86	; 134
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a ef       	ldi	r20, 0xFA	; 250
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 83       	st	Z, r24
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	a2 83       	std	Z+2, r26	; 0x02
    1cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cec:	fe 01       	movw	r30, r28
    1cee:	ea 58       	subi	r30, 0x8A	; 138
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	44 f4       	brge	.+16     	; 0x1d1a <LCD_vidInit_8bits+0x590>
		__ticks = 1;
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ec 58       	subi	r30, 0x8C	; 140
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
    1d18:	64 c0       	rjmp	.+200    	; 0x1de2 <LCD_vidInit_8bits+0x658>
	else if (__tmp > 65535)
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	ea 58       	subi	r30, 0x8A	; 138
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	0c f0       	brlt	.+2      	; 0x1d3a <LCD_vidInit_8bits+0x5b0>
    1d38:	43 c0       	rjmp	.+134    	; 0x1dc0 <LCD_vidInit_8bits+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e6 58       	subi	r30, 0x86	; 134
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8e 01       	movw	r16, r28
    1d5a:	0c 58       	subi	r16, 0x8C	; 140
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	80 83       	st	Z, r24
    1d70:	1f c0       	rjmp	.+62     	; 0x1db0 <LCD_vidInit_8bits+0x626>
    1d72:	fe 01       	movw	r30, r28
    1d74:	ee 58       	subi	r30, 0x8E	; 142
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	88 ec       	ldi	r24, 0xC8	; 200
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
    1d80:	fe 01       	movw	r30, r28
    1d82:	ee 58       	subi	r30, 0x8E	; 142
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	80 81       	ld	r24, Z
    1d88:	91 81       	ldd	r25, Z+1	; 0x01
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_vidInit_8bits+0x600>
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ee 58       	subi	r30, 0x8E	; 142
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d98:	de 01       	movw	r26, r28
    1d9a:	ac 58       	subi	r26, 0x8C	; 140
    1d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ec 58       	subi	r30, 0x8C	; 140
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	11 96       	adiw	r26, 0x01	; 1
    1dac:	9c 93       	st	X, r25
    1dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	fe 01       	movw	r30, r28
    1db2:	ec 58       	subi	r30, 0x8C	; 140
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	d1 f6       	brne	.-76     	; 0x1d72 <LCD_vidInit_8bits+0x5e8>
    1dbe:	4b c0       	rjmp	.+150    	; 0x1e56 <LCD_vidInit_8bits+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	0c 58       	subi	r16, 0x8C	; 140
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ea 58       	subi	r30, 0x8A	; 138
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	f8 01       	movw	r30, r16
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
    1de2:	de 01       	movw	r26, r28
    1de4:	a0 59       	subi	r26, 0x90	; 144
    1de6:	bf 4f       	sbci	r27, 0xFF	; 255
    1de8:	fe 01       	movw	r30, r28
    1dea:	ec 58       	subi	r30, 0x8C	; 140
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	11 96       	adiw	r26, 0x01	; 1
    1df4:	9c 93       	st	X, r25
    1df6:	8e 93       	st	-X, r24
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e0 59       	subi	r30, 0x90	; 144
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_vidInit_8bits+0x678>
    1e06:	fe 01       	movw	r30, r28
    1e08:	e0 59       	subi	r30, 0x90	; 144
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
    1e10:	22 c0       	rjmp	.+68     	; 0x1e56 <LCD_vidInit_8bits+0x6cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e12:	8e 01       	movw	r16, r28
    1e14:	02 58       	subi	r16, 0x82	; 130
    1e16:	1f 4f       	sbci	r17, 0xFF	; 255
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e1 58       	subi	r30, 0x81	; 129
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	82 81       	ldd	r24, Z+2	; 0x02
    1e24:	93 81       	ldd	r25, Z+3	; 0x03
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	f8 01       	movw	r30, r16
    1e30:	80 83       	st	Z, r24
    1e32:	de 01       	movw	r26, r28
    1e34:	a1 59       	subi	r26, 0x91	; 145
    1e36:	bf 4f       	sbci	r27, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e2 58       	subi	r30, 0x82	; 130
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e42:	fe 01       	movw	r30, r28
    1e44:	e1 59       	subi	r30, 0x91	; 145
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	8a 95       	dec	r24
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_vidInit_8bits+0x6c0>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e1 59       	subi	r30, 0x91	; 145
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 83       	st	Z, r24
	_delay_us(150);
	LCD_vidSendCommand(0x38);
    1e56:	88 e3       	ldi	r24, 0x38	; 56
    1e58:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e5 59       	subi	r30, 0x95	; 149
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a8 e4       	ldi	r26, 0x48	; 72
    1e68:	b2 e4       	ldi	r27, 0x42	; 66
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e72:	8e 01       	movw	r16, r28
    1e74:	09 59       	subi	r16, 0x99	; 153
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	fe 01       	movw	r30, r28
    1e7a:	e5 59       	subi	r30, 0x95	; 149
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	2b ea       	ldi	r18, 0xAB	; 171
    1e88:	3a ea       	ldi	r19, 0xAA	; 170
    1e8a:	4a e2       	ldi	r20, 0x2A	; 42
    1e8c:	50 e4       	ldi	r21, 0x40	; 64
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e9 59       	subi	r30, 0x99	; 153
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	34 f4       	brge	.+12     	; 0x1eca <LCD_vidInit_8bits+0x740>
		__ticks = 1;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ea 59       	subi	r30, 0x9A	; 154
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	80 83       	st	Z, r24
    1ec8:	e0 c0       	rjmp	.+448    	; 0x208a <LCD_vidInit_8bits+0x900>
	else if (__tmp > 255)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e9 59       	subi	r30, 0x99	; 153
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	53 e4       	ldi	r21, 0x43	; 67
    1ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <LCD_vidInit_8bits+0x760>
    1ee8:	c0 c0       	rjmp	.+384    	; 0x206a <LCD_vidInit_8bits+0x8e0>
	{
		_delay_ms(__us / 1000.0);
    1eea:	fe 01       	movw	r30, r28
    1eec:	e5 59       	subi	r30, 0x95	; 149
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ee 59       	subi	r30, 0x9E	; 158
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	8e 01       	movw	r16, r28
    1f18:	02 5a       	subi	r16, 0xA2	; 162
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ee 59       	subi	r30, 0x9E	; 158
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 83       	st	Z, r24
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	a2 83       	std	Z+2, r26	; 0x02
    1f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f44:	fe 01       	movw	r30, r28
    1f46:	e2 5a       	subi	r30, 0xA2	; 162
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	44 f4       	brge	.+16     	; 0x1f72 <LCD_vidInit_8bits+0x7e8>
		__ticks = 1;
    1f62:	fe 01       	movw	r30, r28
    1f64:	e4 5a       	subi	r30, 0xA4	; 164
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	64 c0       	rjmp	.+200    	; 0x203a <LCD_vidInit_8bits+0x8b0>
	else if (__tmp > 65535)
    1f72:	fe 01       	movw	r30, r28
    1f74:	e2 5a       	subi	r30, 0xA2	; 162
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <LCD_vidInit_8bits+0x808>
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <LCD_vidInit_8bits+0x88e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	fe 01       	movw	r30, r28
    1f94:	ee 59       	subi	r30, 0x9E	; 158
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	04 5a       	subi	r16, 0xA4	; 164
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	1f c0       	rjmp	.+62     	; 0x2008 <LCD_vidInit_8bits+0x87e>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e6 5a       	subi	r30, 0xA6	; 166
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e6 5a       	subi	r30, 0xA6	; 166
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_vidInit_8bits+0x858>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e6 5a       	subi	r30, 0xA6	; 166
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	de 01       	movw	r26, r28
    1ff2:	a4 5a       	subi	r26, 0xA4	; 164
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e4 5a       	subi	r30, 0xA4	; 164
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	11 96       	adiw	r26, 0x01	; 1
    2004:	9c 93       	st	X, r25
    2006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	fe 01       	movw	r30, r28
    200a:	e4 5a       	subi	r30, 0xA4	; 164
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	d1 f6       	brne	.-76     	; 0x1fca <LCD_vidInit_8bits+0x840>
    2016:	4b c0       	rjmp	.+150    	; 0x20ae <LCD_vidInit_8bits+0x924>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	8e 01       	movw	r16, r28
    201a:	04 5a       	subi	r16, 0xA4	; 164
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	e2 5a       	subi	r30, 0xA2	; 162
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	de 01       	movw	r26, r28
    203c:	a8 5a       	subi	r26, 0xA8	; 168
    203e:	bf 4f       	sbci	r27, 0xFF	; 255
    2040:	fe 01       	movw	r30, r28
    2042:	e4 5a       	subi	r30, 0xA4	; 164
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
    2050:	fe 01       	movw	r30, r28
    2052:	e8 5a       	subi	r30, 0xA8	; 168
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCD_vidInit_8bits+0x8d0>
    205e:	fe 01       	movw	r30, r28
    2060:	e8 5a       	subi	r30, 0xA8	; 168
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	22 c0       	rjmp	.+68     	; 0x20ae <LCD_vidInit_8bits+0x924>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    206a:	8e 01       	movw	r16, r28
    206c:	0a 59       	subi	r16, 0x9A	; 154
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	fe 01       	movw	r30, r28
    2072:	e9 59       	subi	r30, 0x99	; 153
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	f8 01       	movw	r30, r16
    2088:	80 83       	st	Z, r24
    208a:	de 01       	movw	r26, r28
    208c:	a9 5a       	subi	r26, 0xA9	; 169
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	ea 59       	subi	r30, 0x9A	; 154
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    209a:	fe 01       	movw	r30, r28
    209c:	e9 5a       	subi	r30, 0xA9	; 169
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	8a 95       	dec	r24
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_vidInit_8bits+0x918>
    20a6:	fe 01       	movw	r30, r28
    20a8:	e9 5a       	subi	r30, 0xA9	; 169
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 83       	st	Z, r24
	_delay_us(50);

	LCD_vidSendCommand(0x08);
    20ae:	88 e0       	ldi	r24, 0x08	; 8
    20b0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 5a       	subi	r30, 0xAD	; 173
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a8 e4       	ldi	r26, 0x48	; 72
    20c0:	b2 e4       	ldi	r27, 0x42	; 66
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ca:	8e 01       	movw	r16, r28
    20cc:	01 5b       	subi	r16, 0xB1	; 177
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	ed 5a       	subi	r30, 0xAD	; 173
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	2b ea       	ldi	r18, 0xAB	; 171
    20e0:	3a ea       	ldi	r19, 0xAA	; 170
    20e2:	4a e2       	ldi	r20, 0x2A	; 42
    20e4:	50 e4       	ldi	r21, 0x40	; 64
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e1 5b       	subi	r30, 0xB1	; 177
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	34 f4       	brge	.+12     	; 0x2122 <LCD_vidInit_8bits+0x998>
		__ticks = 1;
    2116:	fe 01       	movw	r30, r28
    2118:	e2 5b       	subi	r30, 0xB2	; 178
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	80 83       	st	Z, r24
    2120:	e0 c0       	rjmp	.+448    	; 0x22e2 <LCD_vidInit_8bits+0xb58>
	else if (__tmp > 255)
    2122:	fe 01       	movw	r30, r28
    2124:	e1 5b       	subi	r30, 0xB1	; 177
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	0c f0       	brlt	.+2      	; 0x2142 <LCD_vidInit_8bits+0x9b8>
    2140:	c0 c0       	rjmp	.+384    	; 0x22c2 <LCD_vidInit_8bits+0xb38>
	{
		_delay_ms(__us / 1000.0);
    2142:	fe 01       	movw	r30, r28
    2144:	ed 5a       	subi	r30, 0xAD	; 173
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	60 81       	ld	r22, Z
    214a:	71 81       	ldd	r23, Z+1	; 0x01
    214c:	82 81       	ldd	r24, Z+2	; 0x02
    214e:	93 81       	ldd	r25, Z+3	; 0x03
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4a e7       	ldi	r20, 0x7A	; 122
    2156:	54 e4       	ldi	r21, 0x44	; 68
    2158:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	fe 01       	movw	r30, r28
    2162:	e6 5b       	subi	r30, 0xB6	; 182
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 83       	st	Z, r24
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	a2 83       	std	Z+2, r26	; 0x02
    216c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	8e 01       	movw	r16, r28
    2170:	0a 5b       	subi	r16, 0xBA	; 186
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	fe 01       	movw	r30, r28
    2176:	e6 5b       	subi	r30, 0xB6	; 182
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	60 81       	ld	r22, Z
    217c:	71 81       	ldd	r23, Z+1	; 0x01
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	4a ef       	ldi	r20, 0xFA	; 250
    2188:	54 e4       	ldi	r21, 0x44	; 68
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	f8 01       	movw	r30, r16
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219c:	fe 01       	movw	r30, r28
    219e:	ea 5b       	subi	r30, 0xBA	; 186
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 e8       	ldi	r20, 0x80	; 128
    21b0:	5f e3       	ldi	r21, 0x3F	; 63
    21b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b6:	88 23       	and	r24, r24
    21b8:	44 f4       	brge	.+16     	; 0x21ca <LCD_vidInit_8bits+0xa40>
		__ticks = 1;
    21ba:	fe 01       	movw	r30, r28
    21bc:	ec 5b       	subi	r30, 0xBC	; 188
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
    21c8:	64 c0       	rjmp	.+200    	; 0x2292 <LCD_vidInit_8bits+0xb08>
	else if (__tmp > 65535)
    21ca:	fe 01       	movw	r30, r28
    21cc:	ea 5b       	subi	r30, 0xBA	; 186
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	0c f0       	brlt	.+2      	; 0x21ea <LCD_vidInit_8bits+0xa60>
    21e8:	43 c0       	rjmp	.+134    	; 0x2270 <LCD_vidInit_8bits+0xae6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	fe 01       	movw	r30, r28
    21ec:	e6 5b       	subi	r30, 0xB6	; 182
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	60 81       	ld	r22, Z
    21f2:	71 81       	ldd	r23, Z+1	; 0x01
    21f4:	82 81       	ldd	r24, Z+2	; 0x02
    21f6:	93 81       	ldd	r25, Z+3	; 0x03
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	8e 01       	movw	r16, r28
    220a:	0c 5b       	subi	r16, 0xBC	; 188
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	f8 01       	movw	r30, r16
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	1f c0       	rjmp	.+62     	; 0x2260 <LCD_vidInit_8bits+0xad6>
    2222:	fe 01       	movw	r30, r28
    2224:	ee 5b       	subi	r30, 0xBE	; 190
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2230:	fe 01       	movw	r30, r28
    2232:	ee 5b       	subi	r30, 0xBE	; 190
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	91 81       	ldd	r25, Z+1	; 0x01
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_vidInit_8bits+0xab0>
    223e:	fe 01       	movw	r30, r28
    2240:	ee 5b       	subi	r30, 0xBE	; 190
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2248:	de 01       	movw	r26, r28
    224a:	ac 5b       	subi	r26, 0xBC	; 188
    224c:	bf 4f       	sbci	r27, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	ec 5b       	subi	r30, 0xBC	; 188
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	11 96       	adiw	r26, 0x01	; 1
    225c:	9c 93       	st	X, r25
    225e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	fe 01       	movw	r30, r28
    2262:	ec 5b       	subi	r30, 0xBC	; 188
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	d1 f6       	brne	.-76     	; 0x2222 <LCD_vidInit_8bits+0xa98>
    226e:	42 c0       	rjmp	.+132    	; 0x22f4 <LCD_vidInit_8bits+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	8e 01       	movw	r16, r28
    2272:	0c 5b       	subi	r16, 0xBC	; 188
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	ea 5b       	subi	r30, 0xBA	; 186
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	f8 01       	movw	r30, r16
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	80 83       	st	Z, r24
    2292:	de 01       	movw	r26, r28
    2294:	a0 5c       	subi	r26, 0xC0	; 192
    2296:	bf 4f       	sbci	r27, 0xFF	; 255
    2298:	fe 01       	movw	r30, r28
    229a:	ec 5b       	subi	r30, 0xBC	; 188
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
    22a8:	fe 01       	movw	r30, r28
    22aa:	e0 5c       	subi	r30, 0xC0	; 192
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_vidInit_8bits+0xb28>
    22b6:	fe 01       	movw	r30, r28
    22b8:	e0 5c       	subi	r30, 0xC0	; 192
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	19 c0       	rjmp	.+50     	; 0x22f4 <LCD_vidInit_8bits+0xb6a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22c2:	8e 01       	movw	r16, r28
    22c4:	02 5b       	subi	r16, 0xB2	; 178
    22c6:	1f 4f       	sbci	r17, 0xFF	; 255
    22c8:	fe 01       	movw	r30, r28
    22ca:	e1 5b       	subi	r30, 0xB1	; 177
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	93 81       	ldd	r25, Z+3	; 0x03
    22d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	f8 01       	movw	r30, r16
    22e0:	80 83       	st	Z, r24
    22e2:	fe 01       	movw	r30, r28
    22e4:	e2 5b       	subi	r30, 0xB2	; 178
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    22ee:	8a 95       	dec	r24
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_vidInit_8bits+0xb64>
    22f2:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(50);
	LCD_vidSendCommand(0x01);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e4       	ldi	r26, 0x40	; 64
    2300:	b0 e4       	ldi	r27, 0x40	; 64
    2302:	8b af       	std	Y+59, r24	; 0x3b
    2304:	9c af       	std	Y+60, r25	; 0x3c
    2306:	ad af       	std	Y+61, r26	; 0x3d
    2308:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6b ad       	ldd	r22, Y+59	; 0x3b
    230c:	7c ad       	ldd	r23, Y+60	; 0x3c
    230e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2310:	9e ad       	ldd	r25, Y+62	; 0x3e
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8f ab       	std	Y+55, r24	; 0x37
    2324:	98 af       	std	Y+56, r25	; 0x38
    2326:	a9 af       	std	Y+57, r26	; 0x39
    2328:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    232a:	6f a9       	ldd	r22, Y+55	; 0x37
    232c:	78 ad       	ldd	r23, Y+56	; 0x38
    232e:	89 ad       	ldd	r24, Y+57	; 0x39
    2330:	9a ad       	ldd	r25, Y+58	; 0x3a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <LCD_vidInit_8bits+0xbc2>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9e ab       	std	Y+54, r25	; 0x36
    2348:	8d ab       	std	Y+53, r24	; 0x35
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <LCD_vidInit_8bits+0xc40>
	else if (__tmp > 65535)
    234c:	6f a9       	ldd	r22, Y+55	; 0x37
    234e:	78 ad       	ldd	r23, Y+56	; 0x38
    2350:	89 ad       	ldd	r24, Y+57	; 0x39
    2352:	9a ad       	ldd	r25, Y+58	; 0x3a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <LCD_vidInit_8bits+0xc2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6b ad       	ldd	r22, Y+59	; 0x3b
    2366:	7c ad       	ldd	r23, Y+60	; 0x3c
    2368:	8d ad       	ldd	r24, Y+61	; 0x3d
    236a:	9e ad       	ldd	r25, Y+62	; 0x3e
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e ab       	std	Y+54, r25	; 0x36
    238a:	8d ab       	std	Y+53, r24	; 0x35
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_vidInit_8bits+0xc22>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c ab       	std	Y+52, r25	; 0x34
    2394:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2396:	8b a9       	ldd	r24, Y+51	; 0x33
    2398:	9c a9       	ldd	r25, Y+52	; 0x34
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_vidInit_8bits+0xc10>
    239e:	9c ab       	std	Y+52, r25	; 0x34
    23a0:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8d a9       	ldd	r24, Y+53	; 0x35
    23a4:	9e a9       	ldd	r25, Y+54	; 0x36
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9e ab       	std	Y+54, r25	; 0x36
    23aa:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8d a9       	ldd	r24, Y+53	; 0x35
    23ae:	9e a9       	ldd	r25, Y+54	; 0x36
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <LCD_vidInit_8bits+0xc04>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <LCD_vidInit_8bits+0xc54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6f a9       	ldd	r22, Y+55	; 0x37
    23b8:	78 ad       	ldd	r23, Y+56	; 0x38
    23ba:	89 ad       	ldd	r24, Y+57	; 0x39
    23bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9e ab       	std	Y+54, r25	; 0x36
    23c8:	8d ab       	std	Y+53, r24	; 0x35
    23ca:	8d a9       	ldd	r24, Y+53	; 0x35
    23cc:	9e a9       	ldd	r25, Y+54	; 0x36
    23ce:	9a ab       	std	Y+50, r25	; 0x32
    23d0:	89 ab       	std	Y+49, r24	; 0x31
    23d2:	89 a9       	ldd	r24, Y+49	; 0x31
    23d4:	9a a9       	ldd	r25, Y+50	; 0x32
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_vidInit_8bits+0xc4c>
    23da:	9a ab       	std	Y+50, r25	; 0x32
    23dc:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(3);
	LCD_vidSendCommand(0x06);
    23de:	86 e0       	ldi	r24, 0x06	; 6
    23e0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	a8 e4       	ldi	r26, 0x48	; 72
    23ea:	b2 e4       	ldi	r27, 0x42	; 66
    23ec:	8d a7       	std	Y+45, r24	; 0x2d
    23ee:	9e a7       	std	Y+46, r25	; 0x2e
    23f0:	af a7       	std	Y+47, r26	; 0x2f
    23f2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    23f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    23f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fa:	98 a9       	ldd	r25, Y+48	; 0x30
    23fc:	2b ea       	ldi	r18, 0xAB	; 171
    23fe:	3a ea       	ldi	r19, 0xAA	; 170
    2400:	4a e2       	ldi	r20, 0x2A	; 42
    2402:	50 e4       	ldi	r21, 0x40	; 64
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	89 a7       	std	Y+41, r24	; 0x29
    240e:	9a a7       	std	Y+42, r25	; 0x2a
    2410:	ab a7       	std	Y+43, r26	; 0x2b
    2412:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2414:	69 a5       	ldd	r22, Y+41	; 0x29
    2416:	7a a5       	ldd	r23, Y+42	; 0x2a
    2418:	8b a5       	ldd	r24, Y+43	; 0x2b
    241a:	9c a5       	ldd	r25, Y+44	; 0x2c
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e8       	ldi	r20, 0x80	; 128
    2422:	5f e3       	ldi	r21, 0x3F	; 63
    2424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2428:	88 23       	and	r24, r24
    242a:	1c f4       	brge	.+6      	; 0x2432 <LCD_vidInit_8bits+0xca8>
		__ticks = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	88 a7       	std	Y+40, r24	; 0x28
    2430:	91 c0       	rjmp	.+290    	; 0x2554 <LCD_vidInit_8bits+0xdca>
	else if (__tmp > 255)
    2432:	69 a5       	ldd	r22, Y+41	; 0x29
    2434:	7a a5       	ldd	r23, Y+42	; 0x2a
    2436:	8b a5       	ldd	r24, Y+43	; 0x2b
    2438:	9c a5       	ldd	r25, Y+44	; 0x2c
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	53 e4       	ldi	r21, 0x43	; 67
    2442:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	0c f0       	brlt	.+2      	; 0x244c <LCD_vidInit_8bits+0xcc2>
    244a:	7b c0       	rjmp	.+246    	; 0x2542 <LCD_vidInit_8bits+0xdb8>
	{
		_delay_ms(__us / 1000.0);
    244c:	6d a5       	ldd	r22, Y+45	; 0x2d
    244e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2450:	8f a5       	ldd	r24, Y+47	; 0x2f
    2452:	98 a9       	ldd	r25, Y+48	; 0x30
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	4a e7       	ldi	r20, 0x7A	; 122
    245a:	54 e4       	ldi	r21, 0x44	; 68
    245c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8c a3       	std	Y+36, r24	; 0x24
    2466:	9d a3       	std	Y+37, r25	; 0x25
    2468:	ae a3       	std	Y+38, r26	; 0x26
    246a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	6c a1       	ldd	r22, Y+36	; 0x24
    246e:	7d a1       	ldd	r23, Y+37	; 0x25
    2470:	8e a1       	ldd	r24, Y+38	; 0x26
    2472:	9f a1       	ldd	r25, Y+39	; 0x27
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a ef       	ldi	r20, 0xFA	; 250
    247a:	54 e4       	ldi	r21, 0x44	; 68
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	88 a3       	std	Y+32, r24	; 0x20
    2486:	99 a3       	std	Y+33, r25	; 0x21
    2488:	aa a3       	std	Y+34, r26	; 0x22
    248a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    248c:	68 a1       	ldd	r22, Y+32	; 0x20
    248e:	79 a1       	ldd	r23, Y+33	; 0x21
    2490:	8a a1       	ldd	r24, Y+34	; 0x22
    2492:	9b a1       	ldd	r25, Y+35	; 0x23
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e8       	ldi	r20, 0x80	; 128
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a0:	88 23       	and	r24, r24
    24a2:	2c f4       	brge	.+10     	; 0x24ae <LCD_vidInit_8bits+0xd24>
		__ticks = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9f 8f       	std	Y+31, r25	; 0x1f
    24aa:	8e 8f       	std	Y+30, r24	; 0x1e
    24ac:	3f c0       	rjmp	.+126    	; 0x252c <LCD_vidInit_8bits+0xda2>
	else if (__tmp > 65535)
    24ae:	68 a1       	ldd	r22, Y+32	; 0x20
    24b0:	79 a1       	ldd	r23, Y+33	; 0x21
    24b2:	8a a1       	ldd	r24, Y+34	; 0x22
    24b4:	9b a1       	ldd	r25, Y+35	; 0x23
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	4f e7       	ldi	r20, 0x7F	; 127
    24bc:	57 e4       	ldi	r21, 0x47	; 71
    24be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	4c f5       	brge	.+82     	; 0x2518 <LCD_vidInit_8bits+0xd8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c6:	6c a1       	ldd	r22, Y+36	; 0x24
    24c8:	7d a1       	ldd	r23, Y+37	; 0x25
    24ca:	8e a1       	ldd	r24, Y+38	; 0x26
    24cc:	9f a1       	ldd	r25, Y+39	; 0x27
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e2       	ldi	r20, 0x20	; 32
    24d4:	51 e4       	ldi	r21, 0x41	; 65
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	9f 8f       	std	Y+31, r25	; 0x1f
    24ec:	8e 8f       	std	Y+30, r24	; 0x1e
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <LCD_vidInit_8bits+0xd84>
    24f0:	88 ec       	ldi	r24, 0xC8	; 200
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9d 8f       	std	Y+29, r25	; 0x1d
    24f6:	8c 8f       	std	Y+28, r24	; 0x1c
    24f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_vidInit_8bits+0xd72>
    2500:	9d 8f       	std	Y+29, r25	; 0x1d
    2502:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2504:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2506:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	9f 8f       	std	Y+31, r25	; 0x1f
    250c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2510:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	69 f7       	brne	.-38     	; 0x24f0 <LCD_vidInit_8bits+0xd66>
    2516:	24 c0       	rjmp	.+72     	; 0x2560 <LCD_vidInit_8bits+0xdd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2518:	68 a1       	ldd	r22, Y+32	; 0x20
    251a:	79 a1       	ldd	r23, Y+33	; 0x21
    251c:	8a a1       	ldd	r24, Y+34	; 0x22
    251e:	9b a1       	ldd	r25, Y+35	; 0x23
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9f 8f       	std	Y+31, r25	; 0x1f
    252a:	8e 8f       	std	Y+30, r24	; 0x1e
    252c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    252e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2530:	9b 8f       	std	Y+27, r25	; 0x1b
    2532:	8a 8f       	std	Y+26, r24	; 0x1a
    2534:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2536:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_vidInit_8bits+0xdae>
    253c:	9b 8f       	std	Y+27, r25	; 0x1b
    253e:	8a 8f       	std	Y+26, r24	; 0x1a
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <LCD_vidInit_8bits+0xdd6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2542:	69 a5       	ldd	r22, Y+41	; 0x29
    2544:	7a a5       	ldd	r23, Y+42	; 0x2a
    2546:	8b a5       	ldd	r24, Y+43	; 0x2b
    2548:	9c a5       	ldd	r25, Y+44	; 0x2c
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	88 a7       	std	Y+40, r24	; 0x28
    2554:	88 a5       	ldd	r24, Y+40	; 0x28
    2556:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2558:	89 8d       	ldd	r24, Y+25	; 0x19
    255a:	8a 95       	dec	r24
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_vidInit_8bits+0xdd0>
    255e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_vidSendCommand(0x0c);
    2560:	8c e0       	ldi	r24, 0x0C	; 12
    2562:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a8 e4       	ldi	r26, 0x48	; 72
    256c:	b2 e4       	ldi	r27, 0x42	; 66
    256e:	8d 8b       	std	Y+21, r24	; 0x15
    2570:	9e 8b       	std	Y+22, r25	; 0x16
    2572:	af 8b       	std	Y+23, r26	; 0x17
    2574:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	2b ea       	ldi	r18, 0xAB	; 171
    2580:	3a ea       	ldi	r19, 0xAA	; 170
    2582:	4a e2       	ldi	r20, 0x2A	; 42
    2584:	50 e4       	ldi	r21, 0x40	; 64
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	89 8b       	std	Y+17, r24	; 0x11
    2590:	9a 8b       	std	Y+18, r25	; 0x12
    2592:	ab 8b       	std	Y+19, r26	; 0x13
    2594:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2596:	69 89       	ldd	r22, Y+17	; 0x11
    2598:	7a 89       	ldd	r23, Y+18	; 0x12
    259a:	8b 89       	ldd	r24, Y+19	; 0x13
    259c:	9c 89       	ldd	r25, Y+20	; 0x14
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	1c f4       	brge	.+6      	; 0x25b4 <LCD_vidInit_8bits+0xe2a>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	88 8b       	std	Y+16, r24	; 0x10
    25b2:	91 c0       	rjmp	.+290    	; 0x26d6 <LCD_vidInit_8bits+0xf4c>
	else if (__tmp > 255)
    25b4:	69 89       	ldd	r22, Y+17	; 0x11
    25b6:	7a 89       	ldd	r23, Y+18	; 0x12
    25b8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ba:	9c 89       	ldd	r25, Y+20	; 0x14
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	53 e4       	ldi	r21, 0x43	; 67
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <LCD_vidInit_8bits+0xe44>
    25cc:	7b c0       	rjmp	.+246    	; 0x26c4 <LCD_vidInit_8bits+0xf3a>
	{
		_delay_ms(__us / 1000.0);
    25ce:	6d 89       	ldd	r22, Y+21	; 0x15
    25d0:	7e 89       	ldd	r23, Y+22	; 0x16
    25d2:	8f 89       	ldd	r24, Y+23	; 0x17
    25d4:	98 8d       	ldd	r25, Y+24	; 0x18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8c 87       	std	Y+12, r24	; 0x0c
    25e8:	9d 87       	std	Y+13, r25	; 0x0d
    25ea:	ae 87       	std	Y+14, r26	; 0x0e
    25ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    25f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a ef       	ldi	r20, 0xFA	; 250
    25fc:	54 e4       	ldi	r21, 0x44	; 68
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	88 87       	std	Y+8, r24	; 0x08
    2608:	99 87       	std	Y+9, r25	; 0x09
    260a:	aa 87       	std	Y+10, r26	; 0x0a
    260c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    260e:	68 85       	ldd	r22, Y+8	; 0x08
    2610:	79 85       	ldd	r23, Y+9	; 0x09
    2612:	8a 85       	ldd	r24, Y+10	; 0x0a
    2614:	9b 85       	ldd	r25, Y+11	; 0x0b
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_vidInit_8bits+0xea6>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9f 83       	std	Y+7, r25	; 0x07
    262c:	8e 83       	std	Y+6, r24	; 0x06
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <LCD_vidInit_8bits+0xf24>
	else if (__tmp > 65535)
    2630:	68 85       	ldd	r22, Y+8	; 0x08
    2632:	79 85       	ldd	r23, Y+9	; 0x09
    2634:	8a 85       	ldd	r24, Y+10	; 0x0a
    2636:	9b 85       	ldd	r25, Y+11	; 0x0b
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <LCD_vidInit_8bits+0xf10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6c 85       	ldd	r22, Y+12	; 0x0c
    264a:	7d 85       	ldd	r23, Y+13	; 0x0d
    264c:	8e 85       	ldd	r24, Y+14	; 0x0e
    264e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9f 83       	std	Y+7, r25	; 0x07
    266e:	8e 83       	std	Y+6, r24	; 0x06
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <LCD_vidInit_8bits+0xf06>
    2672:	88 ec       	ldi	r24, 0xC8	; 200
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	9d 83       	std	Y+5, r25	; 0x05
    2678:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267a:	8c 81       	ldd	r24, Y+4	; 0x04
    267c:	9d 81       	ldd	r25, Y+5	; 0x05
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_vidInit_8bits+0xef4>
    2682:	9d 83       	std	Y+5, r25	; 0x05
    2684:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8e 81       	ldd	r24, Y+6	; 0x06
    2688:	9f 81       	ldd	r25, Y+7	; 0x07
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9f 83       	std	Y+7, r25	; 0x07
    268e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8e 81       	ldd	r24, Y+6	; 0x06
    2692:	9f 81       	ldd	r25, Y+7	; 0x07
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <LCD_vidInit_8bits+0xee8>
    2698:	24 c0       	rjmp	.+72     	; 0x26e2 <LCD_vidInit_8bits+0xf58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	68 85       	ldd	r22, Y+8	; 0x08
    269c:	79 85       	ldd	r23, Y+9	; 0x09
    269e:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9f 83       	std	Y+7, r25	; 0x07
    26ac:	8e 83       	std	Y+6, r24	; 0x06
    26ae:	8e 81       	ldd	r24, Y+6	; 0x06
    26b0:	9f 81       	ldd	r25, Y+7	; 0x07
    26b2:	9b 83       	std	Y+3, r25	; 0x03
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_vidInit_8bits+0xf30>
    26be:	9b 83       	std	Y+3, r25	; 0x03
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <LCD_vidInit_8bits+0xf58>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26c4:	69 89       	ldd	r22, Y+17	; 0x11
    26c6:	7a 89       	ldd	r23, Y+18	; 0x12
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	88 8b       	std	Y+16, r24	; 0x10
    26d6:	88 89       	ldd	r24, Y+16	; 0x10
    26d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	8a 95       	dec	r24
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_vidInit_8bits+0xf52>
    26e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    26e2:	c0 55       	subi	r28, 0x50	; 80
    26e4:	df 4f       	sbci	r29, 0xFF	; 255
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	08 95       	ret

000026fa <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 u8CmdCpy){
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	2f 97       	sbiw	r28, 0x0f	; 15
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_LOW);
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

	DIO_voidSetPortValue(LCD_DATA_PORT,u8CmdCpy);
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	6f 85       	ldd	r22, Y+15	; 0x0f
    271e:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPortValue>

	//enable
	DIO_voidSetPortDirection(LCD_CONTROL_PORT,DIO_u8_OUTPUT);
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPortDirection>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	a0 e0       	ldi	r26, 0x00	; 0
    273a:	b0 e4       	ldi	r27, 0x40	; 64
    273c:	8b 87       	std	Y+11, r24	; 0x0b
    273e:	9c 87       	std	Y+12, r25	; 0x0c
    2740:	ad 87       	std	Y+13, r26	; 0x0d
    2742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	6b 85       	ldd	r22, Y+11	; 0x0b
    2746:	7c 85       	ldd	r23, Y+12	; 0x0c
    2748:	8d 85       	ldd	r24, Y+13	; 0x0d
    274a:	9e 85       	ldd	r25, Y+14	; 0x0e
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	4a ef       	ldi	r20, 0xFA	; 250
    2752:	54 e4       	ldi	r21, 0x44	; 68
    2754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	8f 83       	std	Y+7, r24	; 0x07
    275e:	98 87       	std	Y+8, r25	; 0x08
    2760:	a9 87       	std	Y+9, r26	; 0x09
    2762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	40 e8       	ldi	r20, 0x80	; 128
    2772:	5f e3       	ldi	r21, 0x3F	; 63
    2774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2778:	88 23       	and	r24, r24
    277a:	2c f4       	brge	.+10     	; 0x2786 <LCD_vidSendCommand+0x8c>
		__ticks = 1;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	9e 83       	std	Y+6, r25	; 0x06
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	3f c0       	rjmp	.+126    	; 0x2804 <LCD_vidSendCommand+0x10a>
	else if (__tmp > 65535)
    2786:	6f 81       	ldd	r22, Y+7	; 0x07
    2788:	78 85       	ldd	r23, Y+8	; 0x08
    278a:	89 85       	ldd	r24, Y+9	; 0x09
    278c:	9a 85       	ldd	r25, Y+10	; 0x0a
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	3f ef       	ldi	r19, 0xFF	; 255
    2792:	4f e7       	ldi	r20, 0x7F	; 127
    2794:	57 e4       	ldi	r21, 0x47	; 71
    2796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    279a:	18 16       	cp	r1, r24
    279c:	4c f5       	brge	.+82     	; 0x27f0 <LCD_vidSendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e2       	ldi	r20, 0x20	; 32
    27ac:	51 e4       	ldi	r21, 0x41	; 65
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	bc 01       	movw	r22, r24
    27b8:	cd 01       	movw	r24, r26
    27ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9e 83       	std	Y+6, r25	; 0x06
    27c4:	8d 83       	std	Y+5, r24	; 0x05
    27c6:	0f c0       	rjmp	.+30     	; 0x27e6 <LCD_vidSendCommand+0xec>
    27c8:	88 ec       	ldi	r24, 0xC8	; 200
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_vidSendCommand+0xda>
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	69 f7       	brne	.-38     	; 0x27c8 <LCD_vidSendCommand+0xce>
    27ee:	14 c0       	rjmp	.+40     	; 0x2818 <LCD_vidSendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	9a 81       	ldd	r25, Y+2	; 0x02
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <LCD_vidSendCommand+0x116>
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	62 e0       	ldi	r22, 0x02	; 2
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

}
    2822:	2f 96       	adiw	r28, 0x0f	; 15
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <LCD_vidWriteCharctr>:
void LCD_vidWriteCharctr(u8 u8DataCpy){
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	e1 97       	sbiw	r28, 0x31	; 49
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	89 ab       	std	Y+49, r24	; 0x31
	///8 Bits (D0->D7)////


	///RS -> 1 for Data////

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, DIO_u8_HIGH);
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	41 e0       	ldi	r20, 0x01	; 1
    2850:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

	//RW PIN writing active LOW

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW); //pass command //D0->D7//
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	61 e0       	ldi	r22, 0x01	; 1
    2858:	40 e0       	ldi	r20, 0x00	; 0
    285a:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>

	DIO_voidSetPortValue (LCD_DATA_PORT, u8DataCpy);
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	69 a9       	ldd	r22, Y+49	; 0x31
    2862:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPortValue>

	//EnaLCD vidWriteCharctrble

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_HIGH);
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 e8       	ldi	r26, 0x80	; 128
    2876:	bf e3       	ldi	r27, 0x3F	; 63
    2878:	8d a7       	std	Y+45, r24	; 0x2d
    287a:	9e a7       	std	Y+46, r25	; 0x2e
    287c:	af a7       	std	Y+47, r26	; 0x2f
    287e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2880:	6d a5       	ldd	r22, Y+45	; 0x2d
    2882:	7e a5       	ldd	r23, Y+46	; 0x2e
    2884:	8f a5       	ldd	r24, Y+47	; 0x2f
    2886:	98 a9       	ldd	r25, Y+48	; 0x30
    2888:	2b ea       	ldi	r18, 0xAB	; 171
    288a:	3a ea       	ldi	r19, 0xAA	; 170
    288c:	4a e2       	ldi	r20, 0x2A	; 42
    288e:	50 e4       	ldi	r21, 0x40	; 64
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	89 a7       	std	Y+41, r24	; 0x29
    289a:	9a a7       	std	Y+42, r25	; 0x2a
    289c:	ab a7       	std	Y+43, r26	; 0x2b
    289e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    28a0:	69 a5       	ldd	r22, Y+41	; 0x29
    28a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    28a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	1c f4       	brge	.+6      	; 0x28be <LCD_vidWriteCharctr+0x8a>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	88 a7       	std	Y+40, r24	; 0x28
    28bc:	91 c0       	rjmp	.+290    	; 0x29e0 <LCD_vidWriteCharctr+0x1ac>
	else if (__tmp > 255)
    28be:	69 a5       	ldd	r22, Y+41	; 0x29
    28c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    28c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4f e7       	ldi	r20, 0x7F	; 127
    28cc:	53 e4       	ldi	r21, 0x43	; 67
    28ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d2:	18 16       	cp	r1, r24
    28d4:	0c f0       	brlt	.+2      	; 0x28d8 <LCD_vidWriteCharctr+0xa4>
    28d6:	7b c0       	rjmp	.+246    	; 0x29ce <LCD_vidWriteCharctr+0x19a>
	{
		_delay_ms(__us / 1000.0);
    28d8:	6d a5       	ldd	r22, Y+45	; 0x2d
    28da:	7e a5       	ldd	r23, Y+46	; 0x2e
    28dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28de:	98 a9       	ldd	r25, Y+48	; 0x30
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a e7       	ldi	r20, 0x7A	; 122
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8c a3       	std	Y+36, r24	; 0x24
    28f2:	9d a3       	std	Y+37, r25	; 0x25
    28f4:	ae a3       	std	Y+38, r26	; 0x26
    28f6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f8:	6c a1       	ldd	r22, Y+36	; 0x24
    28fa:	7d a1       	ldd	r23, Y+37	; 0x25
    28fc:	8e a1       	ldd	r24, Y+38	; 0x26
    28fe:	9f a1       	ldd	r25, Y+39	; 0x27
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	4a ef       	ldi	r20, 0xFA	; 250
    2906:	54 e4       	ldi	r21, 0x44	; 68
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	88 a3       	std	Y+32, r24	; 0x20
    2912:	99 a3       	std	Y+33, r25	; 0x21
    2914:	aa a3       	std	Y+34, r26	; 0x22
    2916:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2918:	68 a1       	ldd	r22, Y+32	; 0x20
    291a:	79 a1       	ldd	r23, Y+33	; 0x21
    291c:	8a a1       	ldd	r24, Y+34	; 0x22
    291e:	9b a1       	ldd	r25, Y+35	; 0x23
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <LCD_vidWriteCharctr+0x106>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9f 8f       	std	Y+31, r25	; 0x1f
    2936:	8e 8f       	std	Y+30, r24	; 0x1e
    2938:	3f c0       	rjmp	.+126    	; 0x29b8 <LCD_vidWriteCharctr+0x184>
	else if (__tmp > 65535)
    293a:	68 a1       	ldd	r22, Y+32	; 0x20
    293c:	79 a1       	ldd	r23, Y+33	; 0x21
    293e:	8a a1       	ldd	r24, Y+34	; 0x22
    2940:	9b a1       	ldd	r25, Y+35	; 0x23
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	3f ef       	ldi	r19, 0xFF	; 255
    2946:	4f e7       	ldi	r20, 0x7F	; 127
    2948:	57 e4       	ldi	r21, 0x47	; 71
    294a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    294e:	18 16       	cp	r1, r24
    2950:	4c f5       	brge	.+82     	; 0x29a4 <LCD_vidWriteCharctr+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2952:	6c a1       	ldd	r22, Y+36	; 0x24
    2954:	7d a1       	ldd	r23, Y+37	; 0x25
    2956:	8e a1       	ldd	r24, Y+38	; 0x26
    2958:	9f a1       	ldd	r25, Y+39	; 0x27
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9f 8f       	std	Y+31, r25	; 0x1f
    2978:	8e 8f       	std	Y+30, r24	; 0x1e
    297a:	0f c0       	rjmp	.+30     	; 0x299a <LCD_vidWriteCharctr+0x166>
    297c:	88 ec       	ldi	r24, 0xC8	; 200
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9d 8f       	std	Y+29, r25	; 0x1d
    2982:	8c 8f       	std	Y+28, r24	; 0x1c
    2984:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2986:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <LCD_vidWriteCharctr+0x154>
    298c:	9d 8f       	std	Y+29, r25	; 0x1d
    298e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2990:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2992:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	9f 8f       	std	Y+31, r25	; 0x1f
    2998:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    299c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    299e:	00 97       	sbiw	r24, 0x00	; 0
    29a0:	69 f7       	brne	.-38     	; 0x297c <LCD_vidWriteCharctr+0x148>
    29a2:	24 c0       	rjmp	.+72     	; 0x29ec <LCD_vidWriteCharctr+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a4:	68 a1       	ldd	r22, Y+32	; 0x20
    29a6:	79 a1       	ldd	r23, Y+33	; 0x21
    29a8:	8a a1       	ldd	r24, Y+34	; 0x22
    29aa:	9b a1       	ldd	r25, Y+35	; 0x23
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	9f 8f       	std	Y+31, r25	; 0x1f
    29b6:	8e 8f       	std	Y+30, r24	; 0x1e
    29b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29bc:	9b 8f       	std	Y+27, r25	; 0x1b
    29be:	8a 8f       	std	Y+26, r24	; 0x1a
    29c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_vidWriteCharctr+0x190>
    29c8:	9b 8f       	std	Y+27, r25	; 0x1b
    29ca:	8a 8f       	std	Y+26, r24	; 0x1a
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <LCD_vidWriteCharctr+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ce:	69 a5       	ldd	r22, Y+41	; 0x29
    29d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    29d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	88 a7       	std	Y+40, r24	; 0x28
    29e0:	88 a5       	ldd	r24, Y+40	; 0x28
    29e2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29e4:	89 8d       	ldd	r24, Y+25	; 0x19
    29e6:	8a 95       	dec	r24
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <LCD_vidWriteCharctr+0x1b2>
    29ea:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN, DIO_u8_LOW);
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	62 e0       	ldi	r22, 0x02	; 2
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	a8 e4       	ldi	r26, 0x48	; 72
    29fc:	b2 e4       	ldi	r27, 0x42	; 66
    29fe:	8d 8b       	std	Y+21, r24	; 0x15
    2a00:	9e 8b       	std	Y+22, r25	; 0x16
    2a02:	af 8b       	std	Y+23, r26	; 0x17
    2a04:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a06:	6d 89       	ldd	r22, Y+21	; 0x15
    2a08:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0e:	2b ea       	ldi	r18, 0xAB	; 171
    2a10:	3a ea       	ldi	r19, 0xAA	; 170
    2a12:	4a e2       	ldi	r20, 0x2A	; 42
    2a14:	50 e4       	ldi	r21, 0x40	; 64
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	89 8b       	std	Y+17, r24	; 0x11
    2a20:	9a 8b       	std	Y+18, r25	; 0x12
    2a22:	ab 8b       	std	Y+19, r26	; 0x13
    2a24:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a26:	69 89       	ldd	r22, Y+17	; 0x11
    2a28:	7a 89       	ldd	r23, Y+18	; 0x12
    2a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f e3       	ldi	r21, 0x3F	; 63
    2a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	1c f4       	brge	.+6      	; 0x2a44 <LCD_vidWriteCharctr+0x210>
		__ticks = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	88 8b       	std	Y+16, r24	; 0x10
    2a42:	91 c0       	rjmp	.+290    	; 0x2b66 <LCD_vidWriteCharctr+0x332>
	else if (__tmp > 255)
    2a44:	69 89       	ldd	r22, Y+17	; 0x11
    2a46:	7a 89       	ldd	r23, Y+18	; 0x12
    2a48:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	53 e4       	ldi	r21, 0x43	; 67
    2a54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	0c f0       	brlt	.+2      	; 0x2a5e <LCD_vidWriteCharctr+0x22a>
    2a5c:	7b c0       	rjmp	.+246    	; 0x2b54 <LCD_vidWriteCharctr+0x320>
	{
		_delay_ms(__us / 1000.0);
    2a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a60:	7e 89       	ldd	r23, Y+22	; 0x16
    2a62:	8f 89       	ldd	r24, Y+23	; 0x17
    2a64:	98 8d       	ldd	r25, Y+24	; 0x18
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a e7       	ldi	r20, 0x7A	; 122
    2a6c:	54 e4       	ldi	r21, 0x44	; 68
    2a6e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8c 87       	std	Y+12, r24	; 0x0c
    2a78:	9d 87       	std	Y+13, r25	; 0x0d
    2a7a:	ae 87       	std	Y+14, r26	; 0x0e
    2a7c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a80:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a82:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a84:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	4a ef       	ldi	r20, 0xFA	; 250
    2a8c:	54 e4       	ldi	r21, 0x44	; 68
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	88 87       	std	Y+8, r24	; 0x08
    2a98:	99 87       	std	Y+9, r25	; 0x09
    2a9a:	aa 87       	std	Y+10, r26	; 0x0a
    2a9c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a9e:	68 85       	ldd	r22, Y+8	; 0x08
    2aa0:	79 85       	ldd	r23, Y+9	; 0x09
    2aa2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e8       	ldi	r20, 0x80	; 128
    2aac:	5f e3       	ldi	r21, 0x3F	; 63
    2aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab2:	88 23       	and	r24, r24
    2ab4:	2c f4       	brge	.+10     	; 0x2ac0 <LCD_vidWriteCharctr+0x28c>
		__ticks = 1;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9f 83       	std	Y+7, r25	; 0x07
    2abc:	8e 83       	std	Y+6, r24	; 0x06
    2abe:	3f c0       	rjmp	.+126    	; 0x2b3e <LCD_vidWriteCharctr+0x30a>
	else if (__tmp > 65535)
    2ac0:	68 85       	ldd	r22, Y+8	; 0x08
    2ac2:	79 85       	ldd	r23, Y+9	; 0x09
    2ac4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	3f ef       	ldi	r19, 0xFF	; 255
    2acc:	4f e7       	ldi	r20, 0x7F	; 127
    2ace:	57 e4       	ldi	r21, 0x47	; 71
    2ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad4:	18 16       	cp	r1, r24
    2ad6:	4c f5       	brge	.+82     	; 0x2b2a <LCD_vidWriteCharctr+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ada:	7d 85       	ldd	r23, Y+13	; 0x0d
    2adc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ade:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e2       	ldi	r20, 0x20	; 32
    2ae6:	51 e4       	ldi	r21, 0x41	; 65
    2ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	9f 83       	std	Y+7, r25	; 0x07
    2afe:	8e 83       	std	Y+6, r24	; 0x06
    2b00:	0f c0       	rjmp	.+30     	; 0x2b20 <LCD_vidWriteCharctr+0x2ec>
    2b02:	88 ec       	ldi	r24, 0xC8	; 200
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9d 83       	std	Y+5, r25	; 0x05
    2b08:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	f1 f7       	brne	.-4      	; 0x2b0e <LCD_vidWriteCharctr+0x2da>
    2b12:	9d 83       	std	Y+5, r25	; 0x05
    2b14:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b16:	8e 81       	ldd	r24, Y+6	; 0x06
    2b18:	9f 81       	ldd	r25, Y+7	; 0x07
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	9f 83       	std	Y+7, r25	; 0x07
    2b1e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b20:	8e 81       	ldd	r24, Y+6	; 0x06
    2b22:	9f 81       	ldd	r25, Y+7	; 0x07
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f7       	brne	.-38     	; 0x2b02 <LCD_vidWriteCharctr+0x2ce>
    2b28:	24 c0       	rjmp	.+72     	; 0x2b72 <LCD_vidWriteCharctr+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2a:	68 85       	ldd	r22, Y+8	; 0x08
    2b2c:	79 85       	ldd	r23, Y+9	; 0x09
    2b2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b30:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9f 83       	std	Y+7, r25	; 0x07
    2b3c:	8e 83       	std	Y+6, r24	; 0x06
    2b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b40:	9f 81       	ldd	r25, Y+7	; 0x07
    2b42:	9b 83       	std	Y+3, r25	; 0x03
    2b44:	8a 83       	std	Y+2, r24	; 0x02
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_vidWriteCharctr+0x316>
    2b4e:	9b 83       	std	Y+3, r25	; 0x03
    2b50:	8a 83       	std	Y+2, r24	; 0x02
    2b52:	0f c0       	rjmp	.+30     	; 0x2b72 <LCD_vidWriteCharctr+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b54:	69 89       	ldd	r22, Y+17	; 0x11
    2b56:	7a 89       	ldd	r23, Y+18	; 0x12
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	88 8b       	std	Y+16, r24	; 0x10
    2b66:	88 89       	ldd	r24, Y+16	; 0x10
    2b68:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	8a 95       	dec	r24
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <LCD_vidWriteCharctr+0x338>
    2b70:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
}
    2b72:	e1 96       	adiw	r28, 0x31	; 49
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <LCD_vidGotoxy>:

void LCD_vidGotoxy(u8 X, u8 Y)
{
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <LCD_vidGotoxy+0x6>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <LCD_vidGotoxy+0x8>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	8a 83       	std	Y+2, r24	; 0x02
    2b92:	6b 83       	std	Y+3, r22	; 0x03
	// Validate coordinates
	if (X < 16 && Y < 2)
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	80 31       	cpi	r24, 0x10	; 16
    2b98:	a0 f4       	brcc	.+40     	; 0x2bc2 <LCD_vidGotoxy+0x3e>
    2b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9c:	82 30       	cpi	r24, 0x02	; 2
    2b9e:	88 f4       	brcc	.+34     	; 0x2bc2 <LCD_vidGotoxy+0x3e>
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 128 + X : 192 + X;
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	88 23       	and	r24, r24
    2ba4:	29 f4       	brne	.+10     	; 0x2bb0 <LCD_vidGotoxy+0x2c>
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	98 2f       	mov	r25, r24
    2baa:	90 58       	subi	r25, 0x80	; 128
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	04 c0       	rjmp	.+8      	; 0x2bb8 <LCD_vidGotoxy+0x34>
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	90 54       	subi	r25, 0x40	; 64
    2bb6:	9c 83       	std	Y+4, r25	; 0x04
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	89 83       	std	Y+1, r24	; 0x01
		LCD_vidSendCommand(address);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
	}
}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <LCD_Clear>:

void LCD_Clear()
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	2e 97       	sbiw	r28, 0x0e	; 14
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
	 LCD_vidSendCommand(0x01);		/* Clear display */
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e4       	ldi	r27, 0x40	; 64
    2bf2:	8b 87       	std	Y+11, r24	; 0x0b
    2bf4:	9c 87       	std	Y+12, r25	; 0x0c
    2bf6:	ad 87       	std	Y+13, r26	; 0x0d
    2bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8f 83       	std	Y+7, r24	; 0x07
    2c14:	98 87       	std	Y+8, r25	; 0x08
    2c16:	a9 87       	std	Y+9, r26	; 0x09
    2c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <LCD_Clear+0x6c>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <LCD_Clear+0xcc>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_Clear+0xba>
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <LCD_Clear+0xae>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <LCD_Clear+0xf6>
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	 LCD_vidSendCommand(0x80);		/* Cursor at home position */
    2cce:	80 e8       	ldi	r24, 0x80	; 128
    2cd0:	0e 94 7d 13 	call	0x26fa	; 0x26fa <LCD_vidSendCommand>
}
    2cd4:	2e 96       	adiw	r28, 0x0e	; 14
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <LCD_vidWriteNumber_8bits>:
void LCD_vidWriteNumber_8bits(u16 Copy_u16Number)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	2d 97       	sbiw	r28, 0x0d	; 13
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	9d 87       	std	Y+13, r25	; 0x0d
    2cfc:	8c 87       	std	Y+12, r24	; 0x0c
    char buffer[10];
    u8 i = 0;
    2cfe:	19 82       	std	Y+1, r1	; 0x01

    // 1. Ã™â€žÃ™Ë† Ã˜Â§Ã™â€žÃ˜Â±Ã™â€šÃ™â€¦ Ã˜ÂµÃ™ï¿½Ã˜Â± Ã˜Â§Ã˜Â·Ã˜Â¨Ã˜Â¹Ã™â€¡ Ã™â€¦Ã˜Â¨Ã˜Â§Ã˜Â´Ã˜Â±Ã˜Â©
    if (Copy_u16Number == 0)
    2d00:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d02:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	11 f5       	brne	.+68     	; 0x2d4c <LCD_vidWriteNumber_8bits+0x66>
    {
    	LCD_vidWriteCharctr('0');
    2d08:	80 e3       	ldi	r24, 0x30	; 48
    2d0a:	0e 94 1a 14 	call	0x2834	; 0x2834 <LCD_vidWriteCharctr>
    2d0e:	34 c0       	rjmp	.+104    	; 0x2d78 <LCD_vidWriteNumber_8bits+0x92>
    }

    // 2. Ã˜Â­Ã™Ë†Ã™â€˜Ã™â€ž Ã˜Â§Ã™â€žÃ˜Â±Ã™â€šÃ™â€¦ Ã™â€žÃ™â‚¬ chars (Ã˜Â¹Ã™Æ’Ã˜Â³Ã™Å )
    while (Copy_u16Number > 0)
    {
        buffer[i] = (Copy_u16Number % 10) + '0';
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	e8 2f       	mov	r30, r24
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d18:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d1a:	2a e0       	ldi	r18, 0x0A	; 10
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	b9 01       	movw	r22, r18
    2d20:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__udivmodhi4>
    2d24:	28 2f       	mov	r18, r24
    2d26:	20 5d       	subi	r18, 0xD0	; 208
    2d28:	ce 01       	movw	r24, r28
    2d2a:	02 96       	adiw	r24, 0x02	; 2
    2d2c:	e8 0f       	add	r30, r24
    2d2e:	f9 1f       	adc	r31, r25
    2d30:	20 83       	st	Z, r18
        Copy_u16Number /= 10;
    2d32:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d34:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d36:	2a e0       	ldi	r18, 0x0A	; 10
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	b9 01       	movw	r22, r18
    2d3c:	0e 94 2a 2b 	call	0x5654	; 0x5654 <__udivmodhi4>
    2d40:	cb 01       	movw	r24, r22
    2d42:	9d 87       	std	Y+13, r25	; 0x0d
    2d44:	8c 87       	std	Y+12, r24	; 0x0c
        i++;
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	8f 5f       	subi	r24, 0xFF	; 255
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    	LCD_vidWriteCharctr('0');
        return;
    }

    // 2. Ã˜Â­Ã™Ë†Ã™â€˜Ã™â€ž Ã˜Â§Ã™â€žÃ˜Â±Ã™â€šÃ™â€¦ Ã™â€žÃ™â‚¬ chars (Ã˜Â¹Ã™Æ’Ã˜Â³Ã™Å )
    while (Copy_u16Number > 0)
    2d4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	f1 f6       	brne	.-68     	; 0x2d10 <LCD_vidWriteNumber_8bits+0x2a>
    2d54:	0e c0       	rjmp	.+28     	; 0x2d72 <LCD_vidWriteNumber_8bits+0x8c>
    }

    // 3. Ã˜Â§Ã˜Â·Ã˜Â¨Ã˜Â¹ Ã˜Â§Ã™â€žÃ˜Â£Ã˜Â±Ã™â€šÃ˜Â§Ã™â€¦ Ã˜Â¨Ã˜Â§Ã™â€žÃ˜ÂªÃ˜Â±Ã˜ÂªÃ™Å Ã˜Â¨ Ã˜Â§Ã™â€žÃ˜ÂµÃ˜Â­Ã™Å Ã˜Â­
    while (i > 0)
    {
        i--;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	81 50       	subi	r24, 0x01	; 1
    2d5a:	89 83       	std	Y+1, r24	; 0x01
        LCD_vidWriteCharctr(buffer[i]);
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	ce 01       	movw	r24, r28
    2d64:	02 96       	adiw	r24, 0x02	; 2
    2d66:	fc 01       	movw	r30, r24
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
    2d6c:	80 81       	ld	r24, Z
    2d6e:	0e 94 1a 14 	call	0x2834	; 0x2834 <LCD_vidWriteCharctr>
        Copy_u16Number /= 10;
        i++;
    }

    // 3. Ã˜Â§Ã˜Â·Ã˜Â¨Ã˜Â¹ Ã˜Â§Ã™â€žÃ˜Â£Ã˜Â±Ã™â€šÃ˜Â§Ã™â€¦ Ã˜Â¨Ã˜Â§Ã™â€žÃ˜ÂªÃ˜Â±Ã˜ÂªÃ™Å Ã˜Â¨ Ã˜Â§Ã™â€žÃ˜ÂµÃ˜Â­Ã™Å Ã˜Â­
    while (i > 0)
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	88 23       	and	r24, r24
    2d76:	79 f7       	brne	.-34     	; 0x2d56 <LCD_vidWriteNumber_8bits+0x70>
    {
        i--;
        LCD_vidWriteCharctr(buffer[i]);
    }
}
    2d78:	2d 96       	adiw	r28, 0x0d	; 13
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <LCD_Command>:

void LCD_Command( unsigned char cmnd )
	{
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	c7 55       	subi	r28, 0x57	; 87
    2d98:	d0 40       	sbci	r29, 0x00	; 0
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	fe 01       	movw	r30, r28
    2da6:	e9 5a       	subi	r30, 0xA9	; 169
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	80 83       	st	Z, r24
	    PORTC &= ~(1<<RS);    /* RS=0, command reg */
    2dac:	a5 e3       	ldi	r26, 0x35	; 53
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	e5 e3       	ldi	r30, 0x35	; 53
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	8e 7f       	andi	r24, 0xFE	; 254
    2db8:	8c 93       	st	X, r24
	    PORTC &= ~(1<<1);     /* RW=0, write */
    2dba:	a5 e3       	ldi	r26, 0x35	; 53
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e5 e3       	ldi	r30, 0x35	; 53
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	8d 7f       	andi	r24, 0xFD	; 253
    2dc6:	8c 93       	st	X, r24

	    // إرسال النبضة العليا على PD0–PD3
	    LCD_Port = (LCD_Port & 0xF0) | ((cmnd >> 4) & 0x0F);
    2dc8:	a2 e3       	ldi	r26, 0x32	; 50
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e2 e3       	ldi	r30, 0x32	; 50
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	90 7f       	andi	r25, 0xF0	; 240
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e9 5a       	subi	r30, 0xA9	; 169
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	82 95       	swap	r24
    2de0:	8f 70       	andi	r24, 0x0F	; 15
    2de2:	89 2b       	or	r24, r25
    2de4:	8c 93       	st	X, r24

	    PORTC |= (1<<EN);
    2de6:	a5 e3       	ldi	r26, 0x35	; 53
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e5 e3       	ldi	r30, 0x35	; 53
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	84 60       	ori	r24, 0x04	; 4
    2df2:	8c 93       	st	X, r24
    2df4:	fe 01       	movw	r30, r28
    2df6:	ed 5a       	subi	r30, 0xAD	; 173
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a0 e8       	ldi	r26, 0x80	; 128
    2e00:	bf e3       	ldi	r27, 0x3F	; 63
    2e02:	80 83       	st	Z, r24
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	a2 83       	std	Z+2, r26	; 0x02
    2e08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e0a:	8e 01       	movw	r16, r28
    2e0c:	01 5b       	subi	r16, 0xB1	; 177
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	fe 01       	movw	r30, r28
    2e12:	ed 5a       	subi	r30, 0xAD	; 173
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	2b ea       	ldi	r18, 0xAB	; 171
    2e20:	3a ea       	ldi	r19, 0xAA	; 170
    2e22:	4a e2       	ldi	r20, 0x2A	; 42
    2e24:	50 e4       	ldi	r21, 0x40	; 64
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	f8 01       	movw	r30, r16
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e1 5b       	subi	r30, 0xB1	; 177
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	34 f4       	brge	.+12     	; 0x2e62 <LCD_Command+0xd8>
		__ticks = 1;
    2e56:	fe 01       	movw	r30, r28
    2e58:	e2 5b       	subi	r30, 0xB2	; 178
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	80 83       	st	Z, r24
    2e60:	e0 c0       	rjmp	.+448    	; 0x3022 <LCD_Command+0x298>
	else if (__tmp > 255)
    2e62:	fe 01       	movw	r30, r28
    2e64:	e1 5b       	subi	r30, 0xB1	; 177
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	53 e4       	ldi	r21, 0x43	; 67
    2e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	0c f0       	brlt	.+2      	; 0x2e82 <LCD_Command+0xf8>
    2e80:	c0 c0       	rjmp	.+384    	; 0x3002 <LCD_Command+0x278>
	{
		_delay_ms(__us / 1000.0);
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 5a       	subi	r30, 0xAD	; 173
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	4a e7       	ldi	r20, 0x7A	; 122
    2e96:	54 e4       	ldi	r21, 0x44	; 68
    2e98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e6 5b       	subi	r30, 0xB6	; 182
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eae:	8e 01       	movw	r16, r28
    2eb0:	0a 5b       	subi	r16, 0xBA	; 186
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e6 5b       	subi	r30, 0xB6	; 182
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	60 81       	ld	r22, Z
    2ebc:	71 81       	ldd	r23, Z+1	; 0x01
    2ebe:	82 81       	ldd	r24, Z+2	; 0x02
    2ec0:	93 81       	ldd	r25, Z+3	; 0x03
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	4a ef       	ldi	r20, 0xFA	; 250
    2ec8:	54 e4       	ldi	r21, 0x44	; 68
    2eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	f8 01       	movw	r30, r16
    2ed4:	80 83       	st	Z, r24
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	a2 83       	std	Z+2, r26	; 0x02
    2eda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2edc:	fe 01       	movw	r30, r28
    2ede:	ea 5b       	subi	r30, 0xBA	; 186
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	40 e8       	ldi	r20, 0x80	; 128
    2ef0:	5f e3       	ldi	r21, 0x3F	; 63
    2ef2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef6:	88 23       	and	r24, r24
    2ef8:	44 f4       	brge	.+16     	; 0x2f0a <LCD_Command+0x180>
		__ticks = 1;
    2efa:	fe 01       	movw	r30, r28
    2efc:	ec 5b       	subi	r30, 0xBC	; 188
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	91 83       	std	Z+1, r25	; 0x01
    2f06:	80 83       	st	Z, r24
    2f08:	64 c0       	rjmp	.+200    	; 0x2fd2 <LCD_Command+0x248>
	else if (__tmp > 65535)
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	ea 5b       	subi	r30, 0xBA	; 186
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	3f ef       	ldi	r19, 0xFF	; 255
    2f1c:	4f e7       	ldi	r20, 0x7F	; 127
    2f1e:	57 e4       	ldi	r21, 0x47	; 71
    2f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f24:	18 16       	cp	r1, r24
    2f26:	0c f0       	brlt	.+2      	; 0x2f2a <LCD_Command+0x1a0>
    2f28:	43 c0       	rjmp	.+134    	; 0x2fb0 <LCD_Command+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e6 5b       	subi	r30, 0xB6	; 182
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	60 81       	ld	r22, Z
    2f32:	71 81       	ldd	r23, Z+1	; 0x01
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e2       	ldi	r20, 0x20	; 32
    2f3e:	51 e4       	ldi	r21, 0x41	; 65
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8e 01       	movw	r16, r28
    2f4a:	0c 5b       	subi	r16, 0xBC	; 188
    2f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	80 83       	st	Z, r24
    2f60:	1f c0       	rjmp	.+62     	; 0x2fa0 <LCD_Command+0x216>
    2f62:	fe 01       	movw	r30, r28
    2f64:	ee 5b       	subi	r30, 0xBE	; 190
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	88 ec       	ldi	r24, 0xC8	; 200
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	fe 01       	movw	r30, r28
    2f72:	ee 5b       	subi	r30, 0xBE	; 190
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	91 81       	ldd	r25, Z+1	; 0x01
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <LCD_Command+0x1f0>
    2f7e:	fe 01       	movw	r30, r28
    2f80:	ee 5b       	subi	r30, 0xBE	; 190
    2f82:	ff 4f       	sbci	r31, 0xFF	; 255
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f88:	de 01       	movw	r26, r28
    2f8a:	ac 5b       	subi	r26, 0xBC	; 188
    2f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ec 5b       	subi	r30, 0xBC	; 188
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	91 81       	ldd	r25, Z+1	; 0x01
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	11 96       	adiw	r26, 0x01	; 1
    2f9c:	9c 93       	st	X, r25
    2f9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ec 5b       	subi	r30, 0xBC	; 188
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	d1 f6       	brne	.-76     	; 0x2f62 <LCD_Command+0x1d8>
    2fae:	42 c0       	rjmp	.+132    	; 0x3034 <LCD_Command+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	0c 5b       	subi	r16, 0xBC	; 188
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ea 5b       	subi	r30, 0xBA	; 186
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	f8 01       	movw	r30, r16
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
    2fd2:	de 01       	movw	r26, r28
    2fd4:	a0 5c       	subi	r26, 0xC0	; 192
    2fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ec 5b       	subi	r30, 0xBC	; 188
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 93       	st	X, r25
    2fe6:	8e 93       	st	-X, r24
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e0 5c       	subi	r30, 0xC0	; 192
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <LCD_Command+0x268>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e0 5c       	subi	r30, 0xC0	; 192
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
    3000:	19 c0       	rjmp	.+50     	; 0x3034 <LCD_Command+0x2aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3002:	8e 01       	movw	r16, r28
    3004:	02 5b       	subi	r16, 0xB2	; 178
    3006:	1f 4f       	sbci	r17, 0xFF	; 255
    3008:	fe 01       	movw	r30, r28
    300a:	e1 5b       	subi	r30, 0xB1	; 177
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	60 81       	ld	r22, Z
    3010:	71 81       	ldd	r23, Z+1	; 0x01
    3012:	82 81       	ldd	r24, Z+2	; 0x02
    3014:	93 81       	ldd	r25, Z+3	; 0x03
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24
    3022:	fe 01       	movw	r30, r28
    3024:	e2 5b       	subi	r30, 0xB2	; 178
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    302c:	8f ad       	ldd	r24, Y+63	; 0x3f
    302e:	8a 95       	dec	r24
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_Command+0x2a4>
    3032:	8f af       	std	Y+63, r24	; 0x3f
	    _delay_us(1);
	    PORTC &= ~(1<<EN);
    3034:	a5 e3       	ldi	r26, 0x35	; 53
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e5 e3       	ldi	r30, 0x35	; 53
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	8b 7f       	andi	r24, 0xFB	; 251
    3040:	8c 93       	st	X, r24
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	a8 e4       	ldi	r26, 0x48	; 72
    3048:	b3 e4       	ldi	r27, 0x43	; 67
    304a:	8b af       	std	Y+59, r24	; 0x3b
    304c:	9c af       	std	Y+60, r25	; 0x3c
    304e:	ad af       	std	Y+61, r26	; 0x3d
    3050:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3052:	6b ad       	ldd	r22, Y+59	; 0x3b
    3054:	7c ad       	ldd	r23, Y+60	; 0x3c
    3056:	8d ad       	ldd	r24, Y+61	; 0x3d
    3058:	9e ad       	ldd	r25, Y+62	; 0x3e
    305a:	2b ea       	ldi	r18, 0xAB	; 171
    305c:	3a ea       	ldi	r19, 0xAA	; 170
    305e:	4a e2       	ldi	r20, 0x2A	; 42
    3060:	50 e4       	ldi	r21, 0x40	; 64
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	8f ab       	std	Y+55, r24	; 0x37
    306c:	98 af       	std	Y+56, r25	; 0x38
    306e:	a9 af       	std	Y+57, r26	; 0x39
    3070:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3072:	6f a9       	ldd	r22, Y+55	; 0x37
    3074:	78 ad       	ldd	r23, Y+56	; 0x38
    3076:	89 ad       	ldd	r24, Y+57	; 0x39
    3078:	9a ad       	ldd	r25, Y+58	; 0x3a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	1c f4       	brge	.+6      	; 0x3090 <LCD_Command+0x306>
		__ticks = 1;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	8e ab       	std	Y+54, r24	; 0x36
    308e:	91 c0       	rjmp	.+290    	; 0x31b2 <LCD_Command+0x428>
	else if (__tmp > 255)
    3090:	6f a9       	ldd	r22, Y+55	; 0x37
    3092:	78 ad       	ldd	r23, Y+56	; 0x38
    3094:	89 ad       	ldd	r24, Y+57	; 0x39
    3096:	9a ad       	ldd	r25, Y+58	; 0x3a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	53 e4       	ldi	r21, 0x43	; 67
    30a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	0c f0       	brlt	.+2      	; 0x30aa <LCD_Command+0x320>
    30a8:	7b c0       	rjmp	.+246    	; 0x31a0 <LCD_Command+0x416>
	{
		_delay_ms(__us / 1000.0);
    30aa:	6b ad       	ldd	r22, Y+59	; 0x3b
    30ac:	7c ad       	ldd	r23, Y+60	; 0x3c
    30ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    30b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a e7       	ldi	r20, 0x7A	; 122
    30b8:	54 e4       	ldi	r21, 0x44	; 68
    30ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8a ab       	std	Y+50, r24	; 0x32
    30c4:	9b ab       	std	Y+51, r25	; 0x33
    30c6:	ac ab       	std	Y+52, r26	; 0x34
    30c8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ca:	6a a9       	ldd	r22, Y+50	; 0x32
    30cc:	7b a9       	ldd	r23, Y+51	; 0x33
    30ce:	8c a9       	ldd	r24, Y+52	; 0x34
    30d0:	9d a9       	ldd	r25, Y+53	; 0x35
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	4a ef       	ldi	r20, 0xFA	; 250
    30d8:	54 e4       	ldi	r21, 0x44	; 68
    30da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	8e a7       	std	Y+46, r24	; 0x2e
    30e4:	9f a7       	std	Y+47, r25	; 0x2f
    30e6:	a8 ab       	std	Y+48, r26	; 0x30
    30e8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    30ea:	6e a5       	ldd	r22, Y+46	; 0x2e
    30ec:	7f a5       	ldd	r23, Y+47	; 0x2f
    30ee:	88 a9       	ldd	r24, Y+48	; 0x30
    30f0:	99 a9       	ldd	r25, Y+49	; 0x31
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e8       	ldi	r20, 0x80	; 128
    30f8:	5f e3       	ldi	r21, 0x3F	; 63
    30fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30fe:	88 23       	and	r24, r24
    3100:	2c f4       	brge	.+10     	; 0x310c <LCD_Command+0x382>
		__ticks = 1;
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	9d a7       	std	Y+45, r25	; 0x2d
    3108:	8c a7       	std	Y+44, r24	; 0x2c
    310a:	3f c0       	rjmp	.+126    	; 0x318a <LCD_Command+0x400>
	else if (__tmp > 65535)
    310c:	6e a5       	ldd	r22, Y+46	; 0x2e
    310e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3110:	88 a9       	ldd	r24, Y+48	; 0x30
    3112:	99 a9       	ldd	r25, Y+49	; 0x31
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	3f ef       	ldi	r19, 0xFF	; 255
    3118:	4f e7       	ldi	r20, 0x7F	; 127
    311a:	57 e4       	ldi	r21, 0x47	; 71
    311c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3120:	18 16       	cp	r1, r24
    3122:	4c f5       	brge	.+82     	; 0x3176 <LCD_Command+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3124:	6a a9       	ldd	r22, Y+50	; 0x32
    3126:	7b a9       	ldd	r23, Y+51	; 0x33
    3128:	8c a9       	ldd	r24, Y+52	; 0x34
    312a:	9d a9       	ldd	r25, Y+53	; 0x35
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	40 e2       	ldi	r20, 0x20	; 32
    3132:	51 e4       	ldi	r21, 0x41	; 65
    3134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	bc 01       	movw	r22, r24
    313e:	cd 01       	movw	r24, r26
    3140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	9d a7       	std	Y+45, r25	; 0x2d
    314a:	8c a7       	std	Y+44, r24	; 0x2c
    314c:	0f c0       	rjmp	.+30     	; 0x316c <LCD_Command+0x3e2>
    314e:	88 ec       	ldi	r24, 0xC8	; 200
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	9b a7       	std	Y+43, r25	; 0x2b
    3154:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3156:	8a a5       	ldd	r24, Y+42	; 0x2a
    3158:	9b a5       	ldd	r25, Y+43	; 0x2b
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <LCD_Command+0x3d0>
    315e:	9b a7       	std	Y+43, r25	; 0x2b
    3160:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3162:	8c a5       	ldd	r24, Y+44	; 0x2c
    3164:	9d a5       	ldd	r25, Y+45	; 0x2d
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	9d a7       	std	Y+45, r25	; 0x2d
    316a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316c:	8c a5       	ldd	r24, Y+44	; 0x2c
    316e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	69 f7       	brne	.-38     	; 0x314e <LCD_Command+0x3c4>
    3174:	24 c0       	rjmp	.+72     	; 0x31be <LCD_Command+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3176:	6e a5       	ldd	r22, Y+46	; 0x2e
    3178:	7f a5       	ldd	r23, Y+47	; 0x2f
    317a:	88 a9       	ldd	r24, Y+48	; 0x30
    317c:	99 a9       	ldd	r25, Y+49	; 0x31
    317e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	9d a7       	std	Y+45, r25	; 0x2d
    3188:	8c a7       	std	Y+44, r24	; 0x2c
    318a:	8c a5       	ldd	r24, Y+44	; 0x2c
    318c:	9d a5       	ldd	r25, Y+45	; 0x2d
    318e:	99 a7       	std	Y+41, r25	; 0x29
    3190:	88 a7       	std	Y+40, r24	; 0x28
    3192:	88 a5       	ldd	r24, Y+40	; 0x28
    3194:	99 a5       	ldd	r25, Y+41	; 0x29
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <LCD_Command+0x40c>
    319a:	99 a7       	std	Y+41, r25	; 0x29
    319c:	88 a7       	std	Y+40, r24	; 0x28
    319e:	0f c0       	rjmp	.+30     	; 0x31be <LCD_Command+0x434>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31a0:	6f a9       	ldd	r22, Y+55	; 0x37
    31a2:	78 ad       	ldd	r23, Y+56	; 0x38
    31a4:	89 ad       	ldd	r24, Y+57	; 0x39
    31a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8e ab       	std	Y+54, r24	; 0x36
    31b2:	8e a9       	ldd	r24, Y+54	; 0x36
    31b4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31b6:	8f a1       	ldd	r24, Y+39	; 0x27
    31b8:	8a 95       	dec	r24
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_Command+0x42e>
    31bc:	8f a3       	std	Y+39, r24	; 0x27
	    _delay_us(200);

	    // إرسال النبضة السفلى على PD0–PD3
	    LCD_Port = (LCD_Port & 0xF0) | (cmnd & 0x0F);
    31be:	a2 e3       	ldi	r26, 0x32	; 50
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e2 e3       	ldi	r30, 0x32	; 50
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	98 2f       	mov	r25, r24
    31ca:	90 7f       	andi	r25, 0xF0	; 240
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 5a       	subi	r30, 0xA9	; 169
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	8f 70       	andi	r24, 0x0F	; 15
    31d6:	89 2b       	or	r24, r25
    31d8:	8c 93       	st	X, r24

	    PORTC |= (1<<EN);
    31da:	a5 e3       	ldi	r26, 0x35	; 53
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e5 e3       	ldi	r30, 0x35	; 53
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	84 60       	ori	r24, 0x04	; 4
    31e6:	8c 93       	st	X, r24
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e8       	ldi	r26, 0x80	; 128
    31ee:	bf e3       	ldi	r27, 0x3F	; 63
    31f0:	8b a3       	std	Y+35, r24	; 0x23
    31f2:	9c a3       	std	Y+36, r25	; 0x24
    31f4:	ad a3       	std	Y+37, r26	; 0x25
    31f6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31f8:	6b a1       	ldd	r22, Y+35	; 0x23
    31fa:	7c a1       	ldd	r23, Y+36	; 0x24
    31fc:	8d a1       	ldd	r24, Y+37	; 0x25
    31fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3200:	2b ea       	ldi	r18, 0xAB	; 171
    3202:	3a ea       	ldi	r19, 0xAA	; 170
    3204:	4a e2       	ldi	r20, 0x2A	; 42
    3206:	50 e4       	ldi	r21, 0x40	; 64
    3208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8f 8f       	std	Y+31, r24	; 0x1f
    3212:	98 a3       	std	Y+32, r25	; 0x20
    3214:	a9 a3       	std	Y+33, r26	; 0x21
    3216:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3218:	6f 8d       	ldd	r22, Y+31	; 0x1f
    321a:	78 a1       	ldd	r23, Y+32	; 0x20
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	5f e3       	ldi	r21, 0x3F	; 63
    3228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322c:	88 23       	and	r24, r24
    322e:	1c f4       	brge	.+6      	; 0x3236 <LCD_Command+0x4ac>
		__ticks = 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	8e 8f       	std	Y+30, r24	; 0x1e
    3234:	91 c0       	rjmp	.+290    	; 0x3358 <LCD_Command+0x5ce>
	else if (__tmp > 255)
    3236:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3238:	78 a1       	ldd	r23, Y+32	; 0x20
    323a:	89 a1       	ldd	r24, Y+33	; 0x21
    323c:	9a a1       	ldd	r25, Y+34	; 0x22
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	4f e7       	ldi	r20, 0x7F	; 127
    3244:	53 e4       	ldi	r21, 0x43	; 67
    3246:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324a:	18 16       	cp	r1, r24
    324c:	0c f0       	brlt	.+2      	; 0x3250 <LCD_Command+0x4c6>
    324e:	7b c0       	rjmp	.+246    	; 0x3346 <LCD_Command+0x5bc>
	{
		_delay_ms(__us / 1000.0);
    3250:	6b a1       	ldd	r22, Y+35	; 0x23
    3252:	7c a1       	ldd	r23, Y+36	; 0x24
    3254:	8d a1       	ldd	r24, Y+37	; 0x25
    3256:	9e a1       	ldd	r25, Y+38	; 0x26
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	4a e7       	ldi	r20, 0x7A	; 122
    325e:	54 e4       	ldi	r21, 0x44	; 68
    3260:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	8a 8f       	std	Y+26, r24	; 0x1a
    326a:	9b 8f       	std	Y+27, r25	; 0x1b
    326c:	ac 8f       	std	Y+28, r26	; 0x1c
    326e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3270:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3272:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3274:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3276:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	4a ef       	ldi	r20, 0xFA	; 250
    327e:	54 e4       	ldi	r21, 0x44	; 68
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	8e 8b       	std	Y+22, r24	; 0x16
    328a:	9f 8b       	std	Y+23, r25	; 0x17
    328c:	a8 8f       	std	Y+24, r26	; 0x18
    328e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3290:	6e 89       	ldd	r22, Y+22	; 0x16
    3292:	7f 89       	ldd	r23, Y+23	; 0x17
    3294:	88 8d       	ldd	r24, Y+24	; 0x18
    3296:	99 8d       	ldd	r25, Y+25	; 0x19
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e8       	ldi	r20, 0x80	; 128
    329e:	5f e3       	ldi	r21, 0x3F	; 63
    32a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	2c f4       	brge	.+10     	; 0x32b2 <LCD_Command+0x528>
		__ticks = 1;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	9d 8b       	std	Y+21, r25	; 0x15
    32ae:	8c 8b       	std	Y+20, r24	; 0x14
    32b0:	3f c0       	rjmp	.+126    	; 0x3330 <LCD_Command+0x5a6>
	else if (__tmp > 65535)
    32b2:	6e 89       	ldd	r22, Y+22	; 0x16
    32b4:	7f 89       	ldd	r23, Y+23	; 0x17
    32b6:	88 8d       	ldd	r24, Y+24	; 0x18
    32b8:	99 8d       	ldd	r25, Y+25	; 0x19
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	3f ef       	ldi	r19, 0xFF	; 255
    32be:	4f e7       	ldi	r20, 0x7F	; 127
    32c0:	57 e4       	ldi	r21, 0x47	; 71
    32c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c6:	18 16       	cp	r1, r24
    32c8:	4c f5       	brge	.+82     	; 0x331c <LCD_Command+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    32cc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    32ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e2       	ldi	r20, 0x20	; 32
    32d8:	51 e4       	ldi	r21, 0x41	; 65
    32da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32de:	dc 01       	movw	r26, r24
    32e0:	cb 01       	movw	r24, r22
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	9d 8b       	std	Y+21, r25	; 0x15
    32f0:	8c 8b       	std	Y+20, r24	; 0x14
    32f2:	0f c0       	rjmp	.+30     	; 0x3312 <LCD_Command+0x588>
    32f4:	88 ec       	ldi	r24, 0xC8	; 200
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9b 8b       	std	Y+19, r25	; 0x13
    32fa:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32fc:	8a 89       	ldd	r24, Y+18	; 0x12
    32fe:	9b 89       	ldd	r25, Y+19	; 0x13
    3300:	01 97       	sbiw	r24, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <LCD_Command+0x576>
    3304:	9b 8b       	std	Y+19, r25	; 0x13
    3306:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3308:	8c 89       	ldd	r24, Y+20	; 0x14
    330a:	9d 89       	ldd	r25, Y+21	; 0x15
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	9d 8b       	std	Y+21, r25	; 0x15
    3310:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3312:	8c 89       	ldd	r24, Y+20	; 0x14
    3314:	9d 89       	ldd	r25, Y+21	; 0x15
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	69 f7       	brne	.-38     	; 0x32f4 <LCD_Command+0x56a>
    331a:	24 c0       	rjmp	.+72     	; 0x3364 <LCD_Command+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331c:	6e 89       	ldd	r22, Y+22	; 0x16
    331e:	7f 89       	ldd	r23, Y+23	; 0x17
    3320:	88 8d       	ldd	r24, Y+24	; 0x18
    3322:	99 8d       	ldd	r25, Y+25	; 0x19
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	9d 8b       	std	Y+21, r25	; 0x15
    332e:	8c 8b       	std	Y+20, r24	; 0x14
    3330:	8c 89       	ldd	r24, Y+20	; 0x14
    3332:	9d 89       	ldd	r25, Y+21	; 0x15
    3334:	99 8b       	std	Y+17, r25	; 0x11
    3336:	88 8b       	std	Y+16, r24	; 0x10
    3338:	88 89       	ldd	r24, Y+16	; 0x10
    333a:	99 89       	ldd	r25, Y+17	; 0x11
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <LCD_Command+0x5b2>
    3340:	99 8b       	std	Y+17, r25	; 0x11
    3342:	88 8b       	std	Y+16, r24	; 0x10
    3344:	0f c0       	rjmp	.+30     	; 0x3364 <LCD_Command+0x5da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3346:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3348:	78 a1       	ldd	r23, Y+32	; 0x20
    334a:	89 a1       	ldd	r24, Y+33	; 0x21
    334c:	9a a1       	ldd	r25, Y+34	; 0x22
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	8e 8f       	std	Y+30, r24	; 0x1e
    3358:	8e 8d       	ldd	r24, Y+30	; 0x1e
    335a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    335c:	8f 85       	ldd	r24, Y+15	; 0x0f
    335e:	8a 95       	dec	r24
    3360:	f1 f7       	brne	.-4      	; 0x335e <LCD_Command+0x5d4>
    3362:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_us(1);
	    PORTC &= ~(1<<EN);
    3364:	a5 e3       	ldi	r26, 0x35	; 53
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e5 e3       	ldi	r30, 0x35	; 53
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	8b 7f       	andi	r24, 0xFB	; 251
    3370:	8c 93       	st	X, r24
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a0 e0       	ldi	r26, 0x00	; 0
    3378:	b0 e4       	ldi	r27, 0x40	; 64
    337a:	8b 87       	std	Y+11, r24	; 0x0b
    337c:	9c 87       	std	Y+12, r25	; 0x0c
    337e:	ad 87       	std	Y+13, r26	; 0x0d
    3380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3382:	6b 85       	ldd	r22, Y+11	; 0x0b
    3384:	7c 85       	ldd	r23, Y+12	; 0x0c
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	9e 85       	ldd	r25, Y+14	; 0x0e
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	4a ef       	ldi	r20, 0xFA	; 250
    3390:	54 e4       	ldi	r21, 0x44	; 68
    3392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	8f 83       	std	Y+7, r24	; 0x07
    339c:	98 87       	std	Y+8, r25	; 0x08
    339e:	a9 87       	std	Y+9, r26	; 0x09
    33a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a2:	6f 81       	ldd	r22, Y+7	; 0x07
    33a4:	78 85       	ldd	r23, Y+8	; 0x08
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	2c f4       	brge	.+10     	; 0x33c4 <LCD_Command+0x63a>
		__ticks = 1;
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	9e 83       	std	Y+6, r25	; 0x06
    33c0:	8d 83       	std	Y+5, r24	; 0x05
    33c2:	3f c0       	rjmp	.+126    	; 0x3442 <LCD_Command+0x6b8>
	else if (__tmp > 65535)
    33c4:	6f 81       	ldd	r22, Y+7	; 0x07
    33c6:	78 85       	ldd	r23, Y+8	; 0x08
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	20 e0       	ldi	r18, 0x00	; 0
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	57 e4       	ldi	r21, 0x47	; 71
    33d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33d8:	18 16       	cp	r1, r24
    33da:	4c f5       	brge	.+82     	; 0x342e <LCD_Command+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    33de:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	0f c0       	rjmp	.+30     	; 0x3424 <LCD_Command+0x69a>
    3406:	88 ec       	ldi	r24, 0xC8	; 200
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	9c 81       	ldd	r25, Y+4	; 0x04
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <LCD_Command+0x688>
    3416:	9c 83       	std	Y+4, r25	; 0x04
    3418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341a:	8d 81       	ldd	r24, Y+5	; 0x05
    341c:	9e 81       	ldd	r25, Y+6	; 0x06
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3424:	8d 81       	ldd	r24, Y+5	; 0x05
    3426:	9e 81       	ldd	r25, Y+6	; 0x06
    3428:	00 97       	sbiw	r24, 0x00	; 0
    342a:	69 f7       	brne	.-38     	; 0x3406 <LCD_Command+0x67c>
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <LCD_Command+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342e:	6f 81       	ldd	r22, Y+7	; 0x07
    3430:	78 85       	ldd	r23, Y+8	; 0x08
    3432:	89 85       	ldd	r24, Y+9	; 0x09
    3434:	9a 85       	ldd	r25, Y+10	; 0x0a
    3436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	9a 83       	std	Y+2, r25	; 0x02
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	f1 f7       	brne	.-4      	; 0x344e <LCD_Command+0x6c4>
    3452:	9a 83       	std	Y+2, r25	; 0x02
    3454:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(2);
	}
    3456:	c9 5a       	subi	r28, 0xA9	; 169
    3458:	df 4f       	sbci	r29, 0xFF	; 255
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	1f 91       	pop	r17
    346a:	0f 91       	pop	r16
    346c:	08 95       	ret

0000346e <LCD_4_bit_vidGotoxy>:
/////////////////////////////////////////
 // 4-bit LCD
void LCD_4_bit_vidGotoxy(u8 X, u8 Y)
{
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	00 d0       	rcall	.+0      	; 0x3474 <LCD_4_bit_vidGotoxy+0x6>
    3474:	00 d0       	rcall	.+0      	; 0x3476 <LCD_4_bit_vidGotoxy+0x8>
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	8a 83       	std	Y+2, r24	; 0x02
    347c:	6b 83       	std	Y+3, r22	; 0x03
	// Validate coordinates
	if (X < 16 && Y < 2)
    347e:	8a 81       	ldd	r24, Y+2	; 0x02
    3480:	80 31       	cpi	r24, 0x10	; 16
    3482:	a0 f4       	brcc	.+40     	; 0x34ac <LCD_4_bit_vidGotoxy+0x3e>
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	82 30       	cpi	r24, 0x02	; 2
    3488:	88 f4       	brcc	.+34     	; 0x34ac <LCD_4_bit_vidGotoxy+0x3e>
	{
		// Calculate DDRAM address
		u8 address = (Y == 0) ? 128 + X : 192 + X;
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	88 23       	and	r24, r24
    348e:	29 f4       	brne	.+10     	; 0x349a <LCD_4_bit_vidGotoxy+0x2c>
    3490:	8a 81       	ldd	r24, Y+2	; 0x02
    3492:	98 2f       	mov	r25, r24
    3494:	90 58       	subi	r25, 0x80	; 128
    3496:	9c 83       	std	Y+4, r25	; 0x04
    3498:	04 c0       	rjmp	.+8      	; 0x34a2 <LCD_4_bit_vidGotoxy+0x34>
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	98 2f       	mov	r25, r24
    349e:	90 54       	subi	r25, 0x40	; 64
    34a0:	9c 83       	std	Y+4, r25	; 0x04
    34a2:	8c 81       	ldd	r24, Y+4	; 0x04
    34a4:	89 83       	std	Y+1, r24	; 0x01
		LCD_Command(address);
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
	}
}
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <LCD_Char>:
 void LCD_Char( char data )
 {
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	c7 55       	subi	r28, 0x57	; 87
    34c8:	d0 40       	sbci	r29, 0x00	; 0
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	fe 01       	movw	r30, r28
    34d6:	e9 5a       	subi	r30, 0xA9	; 169
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	80 83       	st	Z, r24
     PORTC |= (1<<RS);     /* RS=1, data reg */
    34dc:	a5 e3       	ldi	r26, 0x35	; 53
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	e5 e3       	ldi	r30, 0x35	; 53
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	81 60       	ori	r24, 0x01	; 1
    34e8:	8c 93       	st	X, r24
     PORTC &= ~(1<<1);     /* RW=0, write */
    34ea:	a5 e3       	ldi	r26, 0x35	; 53
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	e5 e3       	ldi	r30, 0x35	; 53
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	8d 7f       	andi	r24, 0xFD	; 253
    34f6:	8c 93       	st	X, r24

     // إرسال النبضة العليا على PD0–PD3
     LCD_Port = (LCD_Port & 0xF0) | ((data >> 4) & 0x0F);
    34f8:	a2 e3       	ldi	r26, 0x32	; 50
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e2 e3       	ldi	r30, 0x32	; 50
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	98 2f       	mov	r25, r24
    3504:	90 7f       	andi	r25, 0xF0	; 240
    3506:	fe 01       	movw	r30, r28
    3508:	e9 5a       	subi	r30, 0xA9	; 169
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	82 95       	swap	r24
    3510:	8f 70       	andi	r24, 0x0F	; 15
    3512:	89 2b       	or	r24, r25
    3514:	8c 93       	st	X, r24

     PORTC |= (1<<EN);
    3516:	a5 e3       	ldi	r26, 0x35	; 53
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e5 e3       	ldi	r30, 0x35	; 53
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	84 60       	ori	r24, 0x04	; 4
    3522:	8c 93       	st	X, r24
    3524:	fe 01       	movw	r30, r28
    3526:	ed 5a       	subi	r30, 0xAD	; 173
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	a0 e8       	ldi	r26, 0x80	; 128
    3530:	bf e3       	ldi	r27, 0x3F	; 63
    3532:	80 83       	st	Z, r24
    3534:	91 83       	std	Z+1, r25	; 0x01
    3536:	a2 83       	std	Z+2, r26	; 0x02
    3538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    353a:	8e 01       	movw	r16, r28
    353c:	01 5b       	subi	r16, 0xB1	; 177
    353e:	1f 4f       	sbci	r17, 0xFF	; 255
    3540:	fe 01       	movw	r30, r28
    3542:	ed 5a       	subi	r30, 0xAD	; 173
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	60 81       	ld	r22, Z
    3548:	71 81       	ldd	r23, Z+1	; 0x01
    354a:	82 81       	ldd	r24, Z+2	; 0x02
    354c:	93 81       	ldd	r25, Z+3	; 0x03
    354e:	2b ea       	ldi	r18, 0xAB	; 171
    3550:	3a ea       	ldi	r19, 0xAA	; 170
    3552:	4a e2       	ldi	r20, 0x2A	; 42
    3554:	50 e4       	ldi	r21, 0x40	; 64
    3556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	f8 01       	movw	r30, r16
    3560:	80 83       	st	Z, r24
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	a2 83       	std	Z+2, r26	; 0x02
    3566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3568:	fe 01       	movw	r30, r28
    356a:	e1 5b       	subi	r30, 0xB1	; 177
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	60 81       	ld	r22, Z
    3570:	71 81       	ldd	r23, Z+1	; 0x01
    3572:	82 81       	ldd	r24, Z+2	; 0x02
    3574:	93 81       	ldd	r25, Z+3	; 0x03
    3576:	20 e0       	ldi	r18, 0x00	; 0
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	40 e8       	ldi	r20, 0x80	; 128
    357c:	5f e3       	ldi	r21, 0x3F	; 63
    357e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3582:	88 23       	and	r24, r24
    3584:	34 f4       	brge	.+12     	; 0x3592 <LCD_Char+0xd8>
		__ticks = 1;
    3586:	fe 01       	movw	r30, r28
    3588:	e2 5b       	subi	r30, 0xB2	; 178
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	80 83       	st	Z, r24
    3590:	e0 c0       	rjmp	.+448    	; 0x3752 <LCD_Char+0x298>
	else if (__tmp > 255)
    3592:	fe 01       	movw	r30, r28
    3594:	e1 5b       	subi	r30, 0xB1	; 177
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	60 81       	ld	r22, Z
    359a:	71 81       	ldd	r23, Z+1	; 0x01
    359c:	82 81       	ldd	r24, Z+2	; 0x02
    359e:	93 81       	ldd	r25, Z+3	; 0x03
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	53 e4       	ldi	r21, 0x43	; 67
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	0c f0       	brlt	.+2      	; 0x35b2 <LCD_Char+0xf8>
    35b0:	c0 c0       	rjmp	.+384    	; 0x3732 <LCD_Char+0x278>
	{
		_delay_ms(__us / 1000.0);
    35b2:	fe 01       	movw	r30, r28
    35b4:	ed 5a       	subi	r30, 0xAD	; 173
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	60 81       	ld	r22, Z
    35ba:	71 81       	ldd	r23, Z+1	; 0x01
    35bc:	82 81       	ldd	r24, Z+2	; 0x02
    35be:	93 81       	ldd	r25, Z+3	; 0x03
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	4a e7       	ldi	r20, 0x7A	; 122
    35c6:	54 e4       	ldi	r21, 0x44	; 68
    35c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	fe 01       	movw	r30, r28
    35d2:	e6 5b       	subi	r30, 0xB6	; 182
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 83       	st	Z, r24
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	a2 83       	std	Z+2, r26	; 0x02
    35dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35de:	8e 01       	movw	r16, r28
    35e0:	0a 5b       	subi	r16, 0xBA	; 186
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e6 5b       	subi	r30, 0xB6	; 182
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	4a ef       	ldi	r20, 0xFA	; 250
    35f8:	54 e4       	ldi	r21, 0x44	; 68
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	f8 01       	movw	r30, r16
    3604:	80 83       	st	Z, r24
    3606:	91 83       	std	Z+1, r25	; 0x01
    3608:	a2 83       	std	Z+2, r26	; 0x02
    360a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    360c:	fe 01       	movw	r30, r28
    360e:	ea 5b       	subi	r30, 0xBA	; 186
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	5f e3       	ldi	r21, 0x3F	; 63
    3622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3626:	88 23       	and	r24, r24
    3628:	44 f4       	brge	.+16     	; 0x363a <LCD_Char+0x180>
		__ticks = 1;
    362a:	fe 01       	movw	r30, r28
    362c:	ec 5b       	subi	r30, 0xBC	; 188
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	91 83       	std	Z+1, r25	; 0x01
    3636:	80 83       	st	Z, r24
    3638:	64 c0       	rjmp	.+200    	; 0x3702 <LCD_Char+0x248>
	else if (__tmp > 65535)
    363a:	fe 01       	movw	r30, r28
    363c:	ea 5b       	subi	r30, 0xBA	; 186
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	60 81       	ld	r22, Z
    3642:	71 81       	ldd	r23, Z+1	; 0x01
    3644:	82 81       	ldd	r24, Z+2	; 0x02
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	3f ef       	ldi	r19, 0xFF	; 255
    364c:	4f e7       	ldi	r20, 0x7F	; 127
    364e:	57 e4       	ldi	r21, 0x47	; 71
    3650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3654:	18 16       	cp	r1, r24
    3656:	0c f0       	brlt	.+2      	; 0x365a <LCD_Char+0x1a0>
    3658:	43 c0       	rjmp	.+134    	; 0x36e0 <LCD_Char+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	fe 01       	movw	r30, r28
    365c:	e6 5b       	subi	r30, 0xB6	; 182
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	60 81       	ld	r22, Z
    3662:	71 81       	ldd	r23, Z+1	; 0x01
    3664:	82 81       	ldd	r24, Z+2	; 0x02
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8e 01       	movw	r16, r28
    367a:	0c 5b       	subi	r16, 0xBC	; 188
    367c:	1f 4f       	sbci	r17, 0xFF	; 255
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	f8 01       	movw	r30, r16
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	80 83       	st	Z, r24
    3690:	1f c0       	rjmp	.+62     	; 0x36d0 <LCD_Char+0x216>
    3692:	fe 01       	movw	r30, r28
    3694:	ee 5b       	subi	r30, 0xBE	; 190
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	88 ec       	ldi	r24, 0xC8	; 200
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
    36a0:	fe 01       	movw	r30, r28
    36a2:	ee 5b       	subi	r30, 0xBE	; 190
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <LCD_Char+0x1f0>
    36ae:	fe 01       	movw	r30, r28
    36b0:	ee 5b       	subi	r30, 0xBE	; 190
    36b2:	ff 4f       	sbci	r31, 0xFF	; 255
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	de 01       	movw	r26, r28
    36ba:	ac 5b       	subi	r26, 0xBC	; 188
    36bc:	bf 4f       	sbci	r27, 0xFF	; 255
    36be:	fe 01       	movw	r30, r28
    36c0:	ec 5b       	subi	r30, 0xBC	; 188
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	91 81       	ldd	r25, Z+1	; 0x01
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	11 96       	adiw	r26, 0x01	; 1
    36cc:	9c 93       	st	X, r25
    36ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d0:	fe 01       	movw	r30, r28
    36d2:	ec 5b       	subi	r30, 0xBC	; 188
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	d1 f6       	brne	.-76     	; 0x3692 <LCD_Char+0x1d8>
    36de:	42 c0       	rjmp	.+132    	; 0x3764 <LCD_Char+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e0:	8e 01       	movw	r16, r28
    36e2:	0c 5b       	subi	r16, 0xBC	; 188
    36e4:	1f 4f       	sbci	r17, 0xFF	; 255
    36e6:	fe 01       	movw	r30, r28
    36e8:	ea 5b       	subi	r30, 0xBA	; 186
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	60 81       	ld	r22, Z
    36ee:	71 81       	ldd	r23, Z+1	; 0x01
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	93 81       	ldd	r25, Z+3	; 0x03
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	80 83       	st	Z, r24
    3702:	de 01       	movw	r26, r28
    3704:	a0 5c       	subi	r26, 0xC0	; 192
    3706:	bf 4f       	sbci	r27, 0xFF	; 255
    3708:	fe 01       	movw	r30, r28
    370a:	ec 5b       	subi	r30, 0xBC	; 188
    370c:	ff 4f       	sbci	r31, 0xFF	; 255
    370e:	80 81       	ld	r24, Z
    3710:	91 81       	ldd	r25, Z+1	; 0x01
    3712:	11 96       	adiw	r26, 0x01	; 1
    3714:	9c 93       	st	X, r25
    3716:	8e 93       	st	-X, r24
    3718:	fe 01       	movw	r30, r28
    371a:	e0 5c       	subi	r30, 0xC0	; 192
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	80 81       	ld	r24, Z
    3720:	91 81       	ldd	r25, Z+1	; 0x01
    3722:	01 97       	sbiw	r24, 0x01	; 1
    3724:	f1 f7       	brne	.-4      	; 0x3722 <LCD_Char+0x268>
    3726:	fe 01       	movw	r30, r28
    3728:	e0 5c       	subi	r30, 0xC0	; 192
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	80 83       	st	Z, r24
    3730:	19 c0       	rjmp	.+50     	; 0x3764 <LCD_Char+0x2aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3732:	8e 01       	movw	r16, r28
    3734:	02 5b       	subi	r16, 0xB2	; 178
    3736:	1f 4f       	sbci	r17, 0xFF	; 255
    3738:	fe 01       	movw	r30, r28
    373a:	e1 5b       	subi	r30, 0xB1	; 177
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	f8 01       	movw	r30, r16
    3750:	80 83       	st	Z, r24
    3752:	fe 01       	movw	r30, r28
    3754:	e2 5b       	subi	r30, 0xB2	; 178
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    375c:	8f ad       	ldd	r24, Y+63	; 0x3f
    375e:	8a 95       	dec	r24
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_Char+0x2a4>
    3762:	8f af       	std	Y+63, r24	; 0x3f
     _delay_us(1);
     PORTC &= ~(1<<EN);
    3764:	a5 e3       	ldi	r26, 0x35	; 53
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	e5 e3       	ldi	r30, 0x35	; 53
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	8b 7f       	andi	r24, 0xFB	; 251
    3770:	8c 93       	st	X, r24
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a8 e4       	ldi	r26, 0x48	; 72
    3778:	b3 e4       	ldi	r27, 0x43	; 67
    377a:	8b af       	std	Y+59, r24	; 0x3b
    377c:	9c af       	std	Y+60, r25	; 0x3c
    377e:	ad af       	std	Y+61, r26	; 0x3d
    3780:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3782:	6b ad       	ldd	r22, Y+59	; 0x3b
    3784:	7c ad       	ldd	r23, Y+60	; 0x3c
    3786:	8d ad       	ldd	r24, Y+61	; 0x3d
    3788:	9e ad       	ldd	r25, Y+62	; 0x3e
    378a:	2b ea       	ldi	r18, 0xAB	; 171
    378c:	3a ea       	ldi	r19, 0xAA	; 170
    378e:	4a e2       	ldi	r20, 0x2A	; 42
    3790:	50 e4       	ldi	r21, 0x40	; 64
    3792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	8f ab       	std	Y+55, r24	; 0x37
    379c:	98 af       	std	Y+56, r25	; 0x38
    379e:	a9 af       	std	Y+57, r26	; 0x39
    37a0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    37a2:	6f a9       	ldd	r22, Y+55	; 0x37
    37a4:	78 ad       	ldd	r23, Y+56	; 0x38
    37a6:	89 ad       	ldd	r24, Y+57	; 0x39
    37a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e8       	ldi	r20, 0x80	; 128
    37b0:	5f e3       	ldi	r21, 0x3F	; 63
    37b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37b6:	88 23       	and	r24, r24
    37b8:	1c f4       	brge	.+6      	; 0x37c0 <LCD_Char+0x306>
		__ticks = 1;
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	8e ab       	std	Y+54, r24	; 0x36
    37be:	91 c0       	rjmp	.+290    	; 0x38e2 <LCD_Char+0x428>
	else if (__tmp > 255)
    37c0:	6f a9       	ldd	r22, Y+55	; 0x37
    37c2:	78 ad       	ldd	r23, Y+56	; 0x38
    37c4:	89 ad       	ldd	r24, Y+57	; 0x39
    37c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	4f e7       	ldi	r20, 0x7F	; 127
    37ce:	53 e4       	ldi	r21, 0x43	; 67
    37d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d4:	18 16       	cp	r1, r24
    37d6:	0c f0       	brlt	.+2      	; 0x37da <LCD_Char+0x320>
    37d8:	7b c0       	rjmp	.+246    	; 0x38d0 <LCD_Char+0x416>
	{
		_delay_ms(__us / 1000.0);
    37da:	6b ad       	ldd	r22, Y+59	; 0x3b
    37dc:	7c ad       	ldd	r23, Y+60	; 0x3c
    37de:	8d ad       	ldd	r24, Y+61	; 0x3d
    37e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	4a e7       	ldi	r20, 0x7A	; 122
    37e8:	54 e4       	ldi	r21, 0x44	; 68
    37ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	8a ab       	std	Y+50, r24	; 0x32
    37f4:	9b ab       	std	Y+51, r25	; 0x33
    37f6:	ac ab       	std	Y+52, r26	; 0x34
    37f8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37fa:	6a a9       	ldd	r22, Y+50	; 0x32
    37fc:	7b a9       	ldd	r23, Y+51	; 0x33
    37fe:	8c a9       	ldd	r24, Y+52	; 0x34
    3800:	9d a9       	ldd	r25, Y+53	; 0x35
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	4a ef       	ldi	r20, 0xFA	; 250
    3808:	54 e4       	ldi	r21, 0x44	; 68
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	8e a7       	std	Y+46, r24	; 0x2e
    3814:	9f a7       	std	Y+47, r25	; 0x2f
    3816:	a8 ab       	std	Y+48, r26	; 0x30
    3818:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    381a:	6e a5       	ldd	r22, Y+46	; 0x2e
    381c:	7f a5       	ldd	r23, Y+47	; 0x2f
    381e:	88 a9       	ldd	r24, Y+48	; 0x30
    3820:	99 a9       	ldd	r25, Y+49	; 0x31
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e8       	ldi	r20, 0x80	; 128
    3828:	5f e3       	ldi	r21, 0x3F	; 63
    382a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382e:	88 23       	and	r24, r24
    3830:	2c f4       	brge	.+10     	; 0x383c <LCD_Char+0x382>
		__ticks = 1;
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	9d a7       	std	Y+45, r25	; 0x2d
    3838:	8c a7       	std	Y+44, r24	; 0x2c
    383a:	3f c0       	rjmp	.+126    	; 0x38ba <LCD_Char+0x400>
	else if (__tmp > 65535)
    383c:	6e a5       	ldd	r22, Y+46	; 0x2e
    383e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3840:	88 a9       	ldd	r24, Y+48	; 0x30
    3842:	99 a9       	ldd	r25, Y+49	; 0x31
    3844:	20 e0       	ldi	r18, 0x00	; 0
    3846:	3f ef       	ldi	r19, 0xFF	; 255
    3848:	4f e7       	ldi	r20, 0x7F	; 127
    384a:	57 e4       	ldi	r21, 0x47	; 71
    384c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3850:	18 16       	cp	r1, r24
    3852:	4c f5       	brge	.+82     	; 0x38a6 <LCD_Char+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3854:	6a a9       	ldd	r22, Y+50	; 0x32
    3856:	7b a9       	ldd	r23, Y+51	; 0x33
    3858:	8c a9       	ldd	r24, Y+52	; 0x34
    385a:	9d a9       	ldd	r25, Y+53	; 0x35
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	40 e2       	ldi	r20, 0x20	; 32
    3862:	51 e4       	ldi	r21, 0x41	; 65
    3864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	bc 01       	movw	r22, r24
    386e:	cd 01       	movw	r24, r26
    3870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3874:	dc 01       	movw	r26, r24
    3876:	cb 01       	movw	r24, r22
    3878:	9d a7       	std	Y+45, r25	; 0x2d
    387a:	8c a7       	std	Y+44, r24	; 0x2c
    387c:	0f c0       	rjmp	.+30     	; 0x389c <LCD_Char+0x3e2>
    387e:	88 ec       	ldi	r24, 0xC8	; 200
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9b a7       	std	Y+43, r25	; 0x2b
    3884:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3886:	8a a5       	ldd	r24, Y+42	; 0x2a
    3888:	9b a5       	ldd	r25, Y+43	; 0x2b
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <LCD_Char+0x3d0>
    388e:	9b a7       	std	Y+43, r25	; 0x2b
    3890:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3892:	8c a5       	ldd	r24, Y+44	; 0x2c
    3894:	9d a5       	ldd	r25, Y+45	; 0x2d
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	9d a7       	std	Y+45, r25	; 0x2d
    389a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389c:	8c a5       	ldd	r24, Y+44	; 0x2c
    389e:	9d a5       	ldd	r25, Y+45	; 0x2d
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	69 f7       	brne	.-38     	; 0x387e <LCD_Char+0x3c4>
    38a4:	24 c0       	rjmp	.+72     	; 0x38ee <LCD_Char+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    38a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    38aa:	88 a9       	ldd	r24, Y+48	; 0x30
    38ac:	99 a9       	ldd	r25, Y+49	; 0x31
    38ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	9d a7       	std	Y+45, r25	; 0x2d
    38b8:	8c a7       	std	Y+44, r24	; 0x2c
    38ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    38bc:	9d a5       	ldd	r25, Y+45	; 0x2d
    38be:	99 a7       	std	Y+41, r25	; 0x29
    38c0:	88 a7       	std	Y+40, r24	; 0x28
    38c2:	88 a5       	ldd	r24, Y+40	; 0x28
    38c4:	99 a5       	ldd	r25, Y+41	; 0x29
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	f1 f7       	brne	.-4      	; 0x38c6 <LCD_Char+0x40c>
    38ca:	99 a7       	std	Y+41, r25	; 0x29
    38cc:	88 a7       	std	Y+40, r24	; 0x28
    38ce:	0f c0       	rjmp	.+30     	; 0x38ee <LCD_Char+0x434>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38d0:	6f a9       	ldd	r22, Y+55	; 0x37
    38d2:	78 ad       	ldd	r23, Y+56	; 0x38
    38d4:	89 ad       	ldd	r24, Y+57	; 0x39
    38d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    38d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	8e ab       	std	Y+54, r24	; 0x36
    38e2:	8e a9       	ldd	r24, Y+54	; 0x36
    38e4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38e6:	8f a1       	ldd	r24, Y+39	; 0x27
    38e8:	8a 95       	dec	r24
    38ea:	f1 f7       	brne	.-4      	; 0x38e8 <LCD_Char+0x42e>
    38ec:	8f a3       	std	Y+39, r24	; 0x27
     _delay_us(200);

     // إرسال النبضة السفلى على PD0–PD3
     LCD_Port = (LCD_Port & 0xF0) | (data & 0x0F);
    38ee:	a2 e3       	ldi	r26, 0x32	; 50
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	e2 e3       	ldi	r30, 0x32	; 50
    38f4:	f0 e0       	ldi	r31, 0x00	; 0
    38f6:	80 81       	ld	r24, Z
    38f8:	98 2f       	mov	r25, r24
    38fa:	90 7f       	andi	r25, 0xF0	; 240
    38fc:	fe 01       	movw	r30, r28
    38fe:	e9 5a       	subi	r30, 0xA9	; 169
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	80 81       	ld	r24, Z
    3904:	8f 70       	andi	r24, 0x0F	; 15
    3906:	89 2b       	or	r24, r25
    3908:	8c 93       	st	X, r24

     PORTC |= (1<<EN);
    390a:	a5 e3       	ldi	r26, 0x35	; 53
    390c:	b0 e0       	ldi	r27, 0x00	; 0
    390e:	e5 e3       	ldi	r30, 0x35	; 53
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	84 60       	ori	r24, 0x04	; 4
    3916:	8c 93       	st	X, r24
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 e8       	ldi	r26, 0x80	; 128
    391e:	bf e3       	ldi	r27, 0x3F	; 63
    3920:	8b a3       	std	Y+35, r24	; 0x23
    3922:	9c a3       	std	Y+36, r25	; 0x24
    3924:	ad a3       	std	Y+37, r26	; 0x25
    3926:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3928:	6b a1       	ldd	r22, Y+35	; 0x23
    392a:	7c a1       	ldd	r23, Y+36	; 0x24
    392c:	8d a1       	ldd	r24, Y+37	; 0x25
    392e:	9e a1       	ldd	r25, Y+38	; 0x26
    3930:	2b ea       	ldi	r18, 0xAB	; 171
    3932:	3a ea       	ldi	r19, 0xAA	; 170
    3934:	4a e2       	ldi	r20, 0x2A	; 42
    3936:	50 e4       	ldi	r21, 0x40	; 64
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	8f 8f       	std	Y+31, r24	; 0x1f
    3942:	98 a3       	std	Y+32, r25	; 0x20
    3944:	a9 a3       	std	Y+33, r26	; 0x21
    3946:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3948:	6f 8d       	ldd	r22, Y+31	; 0x1f
    394a:	78 a1       	ldd	r23, Y+32	; 0x20
    394c:	89 a1       	ldd	r24, Y+33	; 0x21
    394e:	9a a1       	ldd	r25, Y+34	; 0x22
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395c:	88 23       	and	r24, r24
    395e:	1c f4       	brge	.+6      	; 0x3966 <LCD_Char+0x4ac>
		__ticks = 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	8e 8f       	std	Y+30, r24	; 0x1e
    3964:	91 c0       	rjmp	.+290    	; 0x3a88 <LCD_Char+0x5ce>
	else if (__tmp > 255)
    3966:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3968:	78 a1       	ldd	r23, Y+32	; 0x20
    396a:	89 a1       	ldd	r24, Y+33	; 0x21
    396c:	9a a1       	ldd	r25, Y+34	; 0x22
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	4f e7       	ldi	r20, 0x7F	; 127
    3974:	53 e4       	ldi	r21, 0x43	; 67
    3976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397a:	18 16       	cp	r1, r24
    397c:	0c f0       	brlt	.+2      	; 0x3980 <LCD_Char+0x4c6>
    397e:	7b c0       	rjmp	.+246    	; 0x3a76 <LCD_Char+0x5bc>
	{
		_delay_ms(__us / 1000.0);
    3980:	6b a1       	ldd	r22, Y+35	; 0x23
    3982:	7c a1       	ldd	r23, Y+36	; 0x24
    3984:	8d a1       	ldd	r24, Y+37	; 0x25
    3986:	9e a1       	ldd	r25, Y+38	; 0x26
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a e7       	ldi	r20, 0x7A	; 122
    398e:	54 e4       	ldi	r21, 0x44	; 68
    3990:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	8a 8f       	std	Y+26, r24	; 0x1a
    399a:	9b 8f       	std	Y+27, r25	; 0x1b
    399c:	ac 8f       	std	Y+28, r26	; 0x1c
    399e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    39a2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    39a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	4a ef       	ldi	r20, 0xFA	; 250
    39ae:	54 e4       	ldi	r21, 0x44	; 68
    39b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	8e 8b       	std	Y+22, r24	; 0x16
    39ba:	9f 8b       	std	Y+23, r25	; 0x17
    39bc:	a8 8f       	std	Y+24, r26	; 0x18
    39be:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    39c0:	6e 89       	ldd	r22, Y+22	; 0x16
    39c2:	7f 89       	ldd	r23, Y+23	; 0x17
    39c4:	88 8d       	ldd	r24, Y+24	; 0x18
    39c6:	99 8d       	ldd	r25, Y+25	; 0x19
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e8       	ldi	r20, 0x80	; 128
    39ce:	5f e3       	ldi	r21, 0x3F	; 63
    39d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d4:	88 23       	and	r24, r24
    39d6:	2c f4       	brge	.+10     	; 0x39e2 <LCD_Char+0x528>
		__ticks = 1;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9d 8b       	std	Y+21, r25	; 0x15
    39de:	8c 8b       	std	Y+20, r24	; 0x14
    39e0:	3f c0       	rjmp	.+126    	; 0x3a60 <LCD_Char+0x5a6>
	else if (__tmp > 65535)
    39e2:	6e 89       	ldd	r22, Y+22	; 0x16
    39e4:	7f 89       	ldd	r23, Y+23	; 0x17
    39e6:	88 8d       	ldd	r24, Y+24	; 0x18
    39e8:	99 8d       	ldd	r25, Y+25	; 0x19
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	3f ef       	ldi	r19, 0xFF	; 255
    39ee:	4f e7       	ldi	r20, 0x7F	; 127
    39f0:	57 e4       	ldi	r21, 0x47	; 71
    39f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f6:	18 16       	cp	r1, r24
    39f8:	4c f5       	brge	.+82     	; 0x3a4c <LCD_Char+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    39fc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    39fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e2       	ldi	r20, 0x20	; 32
    3a08:	51 e4       	ldi	r21, 0x41	; 65
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	9d 8b       	std	Y+21, r25	; 0x15
    3a20:	8c 8b       	std	Y+20, r24	; 0x14
    3a22:	0f c0       	rjmp	.+30     	; 0x3a42 <LCD_Char+0x588>
    3a24:	88 ec       	ldi	r24, 0xC8	; 200
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9b 8b       	std	Y+19, r25	; 0x13
    3a2a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a2c:	8a 89       	ldd	r24, Y+18	; 0x12
    3a2e:	9b 89       	ldd	r25, Y+19	; 0x13
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <LCD_Char+0x576>
    3a34:	9b 8b       	std	Y+19, r25	; 0x13
    3a36:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a38:	8c 89       	ldd	r24, Y+20	; 0x14
    3a3a:	9d 89       	ldd	r25, Y+21	; 0x15
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	9d 8b       	std	Y+21, r25	; 0x15
    3a40:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a42:	8c 89       	ldd	r24, Y+20	; 0x14
    3a44:	9d 89       	ldd	r25, Y+21	; 0x15
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	69 f7       	brne	.-38     	; 0x3a24 <LCD_Char+0x56a>
    3a4a:	24 c0       	rjmp	.+72     	; 0x3a94 <LCD_Char+0x5da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4c:	6e 89       	ldd	r22, Y+22	; 0x16
    3a4e:	7f 89       	ldd	r23, Y+23	; 0x17
    3a50:	88 8d       	ldd	r24, Y+24	; 0x18
    3a52:	99 8d       	ldd	r25, Y+25	; 0x19
    3a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	9d 8b       	std	Y+21, r25	; 0x15
    3a5e:	8c 8b       	std	Y+20, r24	; 0x14
    3a60:	8c 89       	ldd	r24, Y+20	; 0x14
    3a62:	9d 89       	ldd	r25, Y+21	; 0x15
    3a64:	99 8b       	std	Y+17, r25	; 0x11
    3a66:	88 8b       	std	Y+16, r24	; 0x10
    3a68:	88 89       	ldd	r24, Y+16	; 0x10
    3a6a:	99 89       	ldd	r25, Y+17	; 0x11
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <LCD_Char+0x5b2>
    3a70:	99 8b       	std	Y+17, r25	; 0x11
    3a72:	88 8b       	std	Y+16, r24	; 0x10
    3a74:	0f c0       	rjmp	.+30     	; 0x3a94 <LCD_Char+0x5da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a76:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3a78:	78 a1       	ldd	r23, Y+32	; 0x20
    3a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a7c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	8e 8f       	std	Y+30, r24	; 0x1e
    3a88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a8a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8e:	8a 95       	dec	r24
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <LCD_Char+0x5d4>
    3a92:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_us(1);
     PORTC &= ~(1<<EN);
    3a94:	a5 e3       	ldi	r26, 0x35	; 53
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	e5 e3       	ldi	r30, 0x35	; 53
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	8b 7f       	andi	r24, 0xFB	; 251
    3aa0:	8c 93       	st	X, r24
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	a0 e0       	ldi	r26, 0x00	; 0
    3aa8:	b0 e4       	ldi	r27, 0x40	; 64
    3aaa:	8b 87       	std	Y+11, r24	; 0x0b
    3aac:	9c 87       	std	Y+12, r25	; 0x0c
    3aae:	ad 87       	std	Y+13, r26	; 0x0d
    3ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	4a ef       	ldi	r20, 0xFA	; 250
    3ac0:	54 e4       	ldi	r21, 0x44	; 68
    3ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	8f 83       	std	Y+7, r24	; 0x07
    3acc:	98 87       	std	Y+8, r25	; 0x08
    3ace:	a9 87       	std	Y+9, r26	; 0x09
    3ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e8       	ldi	r20, 0x80	; 128
    3ae0:	5f e3       	ldi	r21, 0x3F	; 63
    3ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ae6:	88 23       	and	r24, r24
    3ae8:	2c f4       	brge	.+10     	; 0x3af4 <LCD_Char+0x63a>
		__ticks = 1;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
    3af2:	3f c0       	rjmp	.+126    	; 0x3b72 <LCD_Char+0x6b8>
	else if (__tmp > 65535)
    3af4:	6f 81       	ldd	r22, Y+7	; 0x07
    3af6:	78 85       	ldd	r23, Y+8	; 0x08
    3af8:	89 85       	ldd	r24, Y+9	; 0x09
    3afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	3f ef       	ldi	r19, 0xFF	; 255
    3b00:	4f e7       	ldi	r20, 0x7F	; 127
    3b02:	57 e4       	ldi	r21, 0x47	; 71
    3b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b08:	18 16       	cp	r1, r24
    3b0a:	4c f5       	brge	.+82     	; 0x3b5e <LCD_Char+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	51 e4       	ldi	r21, 0x41	; 65
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	bc 01       	movw	r22, r24
    3b26:	cd 01       	movw	r24, r26
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	8d 83       	std	Y+5, r24	; 0x05
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <LCD_Char+0x69a>
    3b36:	88 ec       	ldi	r24, 0xC8	; 200
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	9c 83       	std	Y+4, r25	; 0x04
    3b3c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	9c 81       	ldd	r25, Y+4	; 0x04
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <LCD_Char+0x688>
    3b46:	9c 83       	std	Y+4, r25	; 0x04
    3b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b54:	8d 81       	ldd	r24, Y+5	; 0x05
    3b56:	9e 81       	ldd	r25, Y+6	; 0x06
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	69 f7       	brne	.-38     	; 0x3b36 <LCD_Char+0x67c>
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <LCD_Char+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <LCD_Char+0x6c4>
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(2);
 }
    3b86:	c9 5a       	subi	r28, 0xA9	; 169
    3b88:	df 4f       	sbci	r29, 0xFF	; 255
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	de bf       	out	0x3e, r29	; 62
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	cd bf       	out	0x3d, r28	; 61
    3b94:	cf 91       	pop	r28
    3b96:	df 91       	pop	r29
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	08 95       	ret

00003b9e <LCD_Init>:
 void LCD_Init (void)			/* LCD Initialize function */
 {
    3b9e:	df 93       	push	r29
    3ba0:	cf 93       	push	r28
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	6c 97       	sbiw	r28, 0x1c	; 28
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61

 	// Ã˜ÂªÃ™â€¡Ã™Å Ã˜Â¦Ã˜Â© Ã˜Â¯Ã˜Â¨Ã˜Â§Ã˜Â¨Ã™Å Ã˜Â³ Ã˜Â§Ã™â€žÃ˜ÂªÃ˜Â­Ã™Æ’Ã™â€¦
 	DIO_voidSetPinDirection(DIO_u8_PORTC, 0, DIO_u8_OUTPUT); // RS
    3bb2:	82 e0       	ldi	r24, 0x02	; 2
    3bb4:	60 e0       	ldi	r22, 0x00	; 0
    3bb6:	41 e0       	ldi	r20, 0x01	; 1
    3bb8:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
 	DIO_voidSetPinDirection(DIO_u8_PORTC, 1, DIO_u8_OUTPUT); // RW
    3bbc:	82 e0       	ldi	r24, 0x02	; 2
    3bbe:	61 e0       	ldi	r22, 0x01	; 1
    3bc0:	41 e0       	ldi	r20, 0x01	; 1
    3bc2:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
 	DIO_voidSetPinDirection(DIO_u8_PORTC, 2, DIO_u8_OUTPUT); // E
    3bc6:	82 e0       	ldi	r24, 0x02	; 2
    3bc8:	62 e0       	ldi	r22, 0x02	; 2
    3bca:	41 e0       	ldi	r20, 0x01	; 1
    3bcc:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

 	// Ã˜ÂªÃ™â€¡Ã™Å Ã˜Â¦Ã˜Â© Ã˜Â¯Ã˜Â¨Ã˜Â§Ã˜Â¨Ã™Å Ã˜Â³ Ã˜Â§Ã™â€žÃ˜Â¨Ã™Å Ã˜Â§Ã™â€ Ã˜Â§Ã˜Âª (D4-D7 Ã™ï¿½Ã™â€šÃ˜Â· Ã™ï¿½Ã™Å  Ã™Ë†Ã˜Â¶Ã˜Â¹ 4-bit)
 	DIO_voidSetPinDirection(DIO_u8_PORTD, 0, DIO_u8_OUTPUT); // D4
    3bd0:	83 e0       	ldi	r24, 0x03	; 3
    3bd2:	60 e0       	ldi	r22, 0x00	; 0
    3bd4:	41 e0       	ldi	r20, 0x01	; 1
    3bd6:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
 	DIO_voidSetPinDirection(DIO_u8_PORTD, 1, DIO_u8_OUTPUT); // D5
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	61 e0       	ldi	r22, 0x01	; 1
    3bde:	41 e0       	ldi	r20, 0x01	; 1
    3be0:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
 	DIO_voidSetPinDirection(DIO_u8_PORTD, 2, DIO_u8_OUTPUT); // D6
    3be4:	83 e0       	ldi	r24, 0x03	; 3
    3be6:	62 e0       	ldi	r22, 0x02	; 2
    3be8:	41 e0       	ldi	r20, 0x01	; 1
    3bea:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
 	DIO_voidSetPinDirection(DIO_u8_PORTD, 3, DIO_u8_OUTPUT); // D7
    3bee:	83 e0       	ldi	r24, 0x03	; 3
    3bf0:	63 e0       	ldi	r22, 0x03	; 3
    3bf2:	41 e0       	ldi	r20, 0x01	; 1
    3bf4:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	a8 e4       	ldi	r26, 0x48	; 72
    3bfe:	b2 e4       	ldi	r27, 0x42	; 66
    3c00:	89 8f       	std	Y+25, r24	; 0x19
    3c02:	9a 8f       	std	Y+26, r25	; 0x1a
    3c04:	ab 8f       	std	Y+27, r26	; 0x1b
    3c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c08:	69 8d       	ldd	r22, Y+25	; 0x19
    3c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a ef       	ldi	r20, 0xFA	; 250
    3c16:	54 e4       	ldi	r21, 0x44	; 68
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	8d 8b       	std	Y+21, r24	; 0x15
    3c22:	9e 8b       	std	Y+22, r25	; 0x16
    3c24:	af 8b       	std	Y+23, r26	; 0x17
    3c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c28:	6d 89       	ldd	r22, Y+21	; 0x15
    3c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c3c:	88 23       	and	r24, r24
    3c3e:	2c f4       	brge	.+10     	; 0x3c4a <LCD_Init+0xac>
		__ticks = 1;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9c 8b       	std	Y+20, r25	; 0x14
    3c46:	8b 8b       	std	Y+19, r24	; 0x13
    3c48:	3f c0       	rjmp	.+126    	; 0x3cc8 <LCD_Init+0x12a>
	else if (__tmp > 65535)
    3c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c50:	98 8d       	ldd	r25, Y+24	; 0x18
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	4c f5       	brge	.+82     	; 0x3cb4 <LCD_Init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c62:	69 8d       	ldd	r22, Y+25	; 0x19
    3c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e2       	ldi	r20, 0x20	; 32
    3c70:	51 e4       	ldi	r21, 0x41	; 65
    3c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	bc 01       	movw	r22, r24
    3c7c:	cd 01       	movw	r24, r26
    3c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9c 8b       	std	Y+20, r25	; 0x14
    3c88:	8b 8b       	std	Y+19, r24	; 0x13
    3c8a:	0f c0       	rjmp	.+30     	; 0x3caa <LCD_Init+0x10c>
    3c8c:	88 ec       	ldi	r24, 0xC8	; 200
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	9a 8b       	std	Y+18, r25	; 0x12
    3c92:	89 8b       	std	Y+17, r24	; 0x11
    3c94:	89 89       	ldd	r24, Y+17	; 0x11
    3c96:	9a 89       	ldd	r25, Y+18	; 0x12
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <LCD_Init+0xfa>
    3c9c:	9a 8b       	std	Y+18, r25	; 0x12
    3c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	9c 8b       	std	Y+20, r25	; 0x14
    3ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3caa:	8b 89       	ldd	r24, Y+19	; 0x13
    3cac:	9c 89       	ldd	r25, Y+20	; 0x14
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	69 f7       	brne	.-38     	; 0x3c8c <LCD_Init+0xee>
    3cb2:	14 c0       	rjmp	.+40     	; 0x3cdc <LCD_Init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3cb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3cba:	98 8d       	ldd	r25, Y+24	; 0x18
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9c 8b       	std	Y+20, r25	; 0x14
    3cc6:	8b 8b       	std	Y+19, r24	; 0x13
    3cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3cca:	9c 89       	ldd	r25, Y+20	; 0x14
    3ccc:	98 8b       	std	Y+16, r25	; 0x10
    3cce:	8f 87       	std	Y+15, r24	; 0x0f
    3cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd2:	98 89       	ldd	r25, Y+16	; 0x10
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <LCD_Init+0x136>
    3cd8:	98 8b       	std	Y+16, r25	; 0x10
    3cda:	8f 87       	std	Y+15, r24	; 0x0f

 	_delay_ms(50); // Ã˜ÂªÃ˜Â£Ã˜Â®Ã™Å Ã˜Â± Ã˜Â¨Ã˜Â¯Ã˜Â¡ Ã˜Â§Ã™â€žÃ˜ÂªÃ˜Â´Ã˜ÂºÃ™Å Ã™â€ž

 	// Ã˜ÂªÃ˜Â³Ã™â€žÃ˜Â³Ã™â€ž Ã˜ÂªÃ™â€¡Ã™Å Ã˜Â¦Ã˜Â© 4-bit Ã˜Â§Ã™â€žÃ˜ÂµÃ˜Â­Ã™Å Ã˜Â­
 	LCD_Command(0x33);
    3cdc:	83 e3       	ldi	r24, 0x33	; 51
    3cde:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
 	LCD_Command(0x33);// Ã˜ÂªÃ™â€¡Ã™Å Ã˜Â¦Ã˜Â© Ã˜Â£Ã™Ë†Ã™â€žÃ™Å Ã˜Â©
    3ce2:	83 e3       	ldi	r24, 0x33	; 51
    3ce4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
 	LCD_Command(0x32); // Ã˜ÂªÃ™â€¡Ã™Å Ã˜Â¦Ã˜Â© Ã˜Â£Ã™Ë†Ã™â€žÃ™Å Ã˜Â©
    3ce8:	82 e3       	ldi	r24, 0x32	; 50
    3cea:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
 	LCD_Command(0x28); // Ã™Ë†Ã˜Â¶Ã˜Â¹ 4-bitÃ˜Å’ 2 Ã˜Â³Ã˜Â·Ã˜Â±Ã˜Å’ Ã™â€¦Ã˜ÂµÃ™ï¿½Ã™Ë†Ã™ï¿½Ã˜Â© 5x7
    3cee:	88 e2       	ldi	r24, 0x28	; 40
    3cf0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
 	LCD_Command(0x0C);// Ã˜ÂªÃ˜Â´Ã˜ÂºÃ™Å Ã™â€ž Ã˜Â§Ã™â€žÃ˜Â¹Ã˜Â±Ã˜Â¶Ã˜Å’ Ã˜Â¥Ã™Å Ã™â€šÃ˜Â§Ã™ï¿½ Ã˜Â§Ã™â€žÃ™â€¦Ã˜Â¤Ã˜Â´Ã˜Â±
    3cf4:	8c e0       	ldi	r24, 0x0C	; 12
    3cf6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
 	LCD_Command(0x06); // Ã˜Â²Ã™Å Ã˜Â§Ã˜Â¯Ã˜Â© Ã˜Â§Ã™â€žÃ™â€¦Ã˜Â¤Ã˜Â´Ã˜Â±
    3cfa:	86 e0       	ldi	r24, 0x06	; 6
    3cfc:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
 	LCD_Command(0x01); // Ã™â€¦Ã˜Â³Ã˜Â­ Ã˜Â§Ã™â€žÃ˜Â´Ã˜Â§Ã˜Â´Ã˜Â©
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	a0 e0       	ldi	r26, 0x00	; 0
    3d0c:	b0 e4       	ldi	r27, 0x40	; 64
    3d0e:	8b 87       	std	Y+11, r24	; 0x0b
    3d10:	9c 87       	std	Y+12, r25	; 0x0c
    3d12:	ad 87       	std	Y+13, r26	; 0x0d
    3d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	4a ef       	ldi	r20, 0xFA	; 250
    3d24:	54 e4       	ldi	r21, 0x44	; 68
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	8f 83       	std	Y+7, r24	; 0x07
    3d30:	98 87       	std	Y+8, r25	; 0x08
    3d32:	a9 87       	std	Y+9, r26	; 0x09
    3d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d36:	6f 81       	ldd	r22, Y+7	; 0x07
    3d38:	78 85       	ldd	r23, Y+8	; 0x08
    3d3a:	89 85       	ldd	r24, Y+9	; 0x09
    3d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e8       	ldi	r20, 0x80	; 128
    3d44:	5f e3       	ldi	r21, 0x3F	; 63
    3d46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d4a:	88 23       	and	r24, r24
    3d4c:	2c f4       	brge	.+10     	; 0x3d58 <LCD_Init+0x1ba>
		__ticks = 1;
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	9e 83       	std	Y+6, r25	; 0x06
    3d54:	8d 83       	std	Y+5, r24	; 0x05
    3d56:	3f c0       	rjmp	.+126    	; 0x3dd6 <LCD_Init+0x238>
	else if (__tmp > 65535)
    3d58:	6f 81       	ldd	r22, Y+7	; 0x07
    3d5a:	78 85       	ldd	r23, Y+8	; 0x08
    3d5c:	89 85       	ldd	r24, Y+9	; 0x09
    3d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	3f ef       	ldi	r19, 0xFF	; 255
    3d64:	4f e7       	ldi	r20, 0x7F	; 127
    3d66:	57 e4       	ldi	r21, 0x47	; 71
    3d68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6c:	18 16       	cp	r1, r24
    3d6e:	4c f5       	brge	.+82     	; 0x3dc2 <LCD_Init+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	40 e2       	ldi	r20, 0x20	; 32
    3d7e:	51 e4       	ldi	r21, 0x41	; 65
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	9e 83       	std	Y+6, r25	; 0x06
    3d96:	8d 83       	std	Y+5, r24	; 0x05
    3d98:	0f c0       	rjmp	.+30     	; 0x3db8 <LCD_Init+0x21a>
    3d9a:	88 ec       	ldi	r24, 0xC8	; 200
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	9c 83       	std	Y+4, r25	; 0x04
    3da0:	8b 83       	std	Y+3, r24	; 0x03
    3da2:	8b 81       	ldd	r24, Y+3	; 0x03
    3da4:	9c 81       	ldd	r25, Y+4	; 0x04
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <LCD_Init+0x208>
    3daa:	9c 83       	std	Y+4, r25	; 0x04
    3dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	8d 81       	ldd	r24, Y+5	; 0x05
    3db0:	9e 81       	ldd	r25, Y+6	; 0x06
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	9e 83       	std	Y+6, r25	; 0x06
    3db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dba:	9e 81       	ldd	r25, Y+6	; 0x06
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	69 f7       	brne	.-38     	; 0x3d9a <LCD_Init+0x1fc>
    3dc0:	14 c0       	rjmp	.+40     	; 0x3dea <LCD_Init+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc4:	78 85       	ldd	r23, Y+8	; 0x08
    3dc6:	89 85       	ldd	r24, Y+9	; 0x09
    3dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	9e 83       	std	Y+6, r25	; 0x06
    3dd4:	8d 83       	std	Y+5, r24	; 0x05
    3dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dda:	9a 83       	std	Y+2, r25	; 0x02
    3ddc:	89 83       	std	Y+1, r24	; 0x01
    3dde:	89 81       	ldd	r24, Y+1	; 0x01
    3de0:	9a 81       	ldd	r25, Y+2	; 0x02
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <LCD_Init+0x244>
    3de6:	9a 83       	std	Y+2, r25	; 0x02
    3de8:	89 83       	std	Y+1, r24	; 0x01
 	_delay_ms(2);

 }
    3dea:	6c 96       	adiw	r28, 0x1c	; 28
    3dec:	0f b6       	in	r0, 0x3f	; 63
    3dee:	f8 94       	cli
    3df0:	de bf       	out	0x3e, r29	; 62
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	cd bf       	out	0x3d, r28	; 61
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <LCD_svoidSendString>:


 void LCD_svoidSendString(char *ARG_charptr)
 {
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <LCD_svoidSendString+0x6>
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9b 83       	std	Y+3, r25	; 0x03
    3e0a:	8a 83       	std	Y+2, r24	; 0x02
     u8 i = 0;
    3e0c:	19 82       	std	Y+1, r1	; 0x01

     if (ARG_charptr == 0)
    3e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e10:	9b 81       	ldd	r25, Y+3	; 0x03
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	d1 f0       	breq	.+52     	; 0x3e4a <LCD_svoidSendString+0x4e>
    3e16:	0e c0       	rjmp	.+28     	; 0x3e34 <LCD_svoidSendString+0x38>
     else
     {
         // Loop through the string until null terminator '\0'
         while (ARG_charptr[i] != '\0')
         {
             LCD_Char(ARG_charptr[i]); // Send each character
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	28 2f       	mov	r18, r24
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	9b 81       	ldd	r25, Y+3	; 0x03
    3e22:	fc 01       	movw	r30, r24
    3e24:	e2 0f       	add	r30, r18
    3e26:	f3 1f       	adc	r31, r19
    3e28:	80 81       	ld	r24, Z
    3e2a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <LCD_Char>
             i++;
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	8f 5f       	subi	r24, 0xFF	; 255
    3e32:	89 83       	std	Y+1, r24	; 0x01
         // Do nothing if the pointer is NULL
     }
     else
     {
         // Loop through the string until null terminator '\0'
         while (ARG_charptr[i] != '\0')
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	28 2f       	mov	r18, r24
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e3e:	fc 01       	movw	r30, r24
    3e40:	e2 0f       	add	r30, r18
    3e42:	f3 1f       	adc	r31, r19
    3e44:	80 81       	ld	r24, Z
    3e46:	88 23       	and	r24, r24
    3e48:	39 f7       	brne	.-50     	; 0x3e18 <LCD_svoidSendString+0x1c>
         {
             LCD_Char(ARG_charptr[i]); // Send each character
             i++;
         }
     }
 }
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	cf 91       	pop	r28
    3e52:	df 91       	pop	r29
    3e54:	08 95       	ret

00003e56 <Servo_Init>:
#include "TIM_Interface.h"
#include "TIM_Register.h"
#include "DIO_Register.h"

void Servo_Init(void)
{
    3e56:	df 93       	push	r29
    3e58:	cf 93       	push	r28
    3e5a:	cd b7       	in	r28, 0x3d	; 61
    3e5c:	de b7       	in	r29, 0x3e	; 62
    // Set PD4 (OC1B) and PD5 (OC1A) as outputs using DIO driver
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN4, DIO_u8_OUTPUT);
    3e5e:	83 e0       	ldi	r24, 0x03	; 3
    3e60:	64 e0       	ldi	r22, 0x04	; 4
    3e62:	41 e0       	ldi	r20, 0x01	; 1
    3e64:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(DIO_u8_PORTD, DIO_u8_PIN5, DIO_u8_OUTPUT);
    3e68:	83 e0       	ldi	r24, 0x03	; 3
    3e6a:	65 e0       	ldi	r22, 0x05	; 5
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

    // Initialize Timer1 for Fast PWM mode 14 (ICR1 as TOP)
    Timer1_Init_ICR();
    3e72:	0e 94 c4 20 	call	0x4188	; 0x4188 <Timer1_Init_ICR>

    // Configure additional Timer1 settings for servo control
    // Fast PWM, mode 14 (ICR1 as TOP), non-inverting
    SET_BIT(TCCR1A, COM1A1);  // Non-inverting mode for OC1A
    3e76:	af e4       	ldi	r26, 0x4F	; 79
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	ef e4       	ldi	r30, 0x4F	; 79
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	80 68       	ori	r24, 0x80	; 128
    3e82:	8c 93       	st	X, r24
    SET_BIT(TCCR1A, COM1B1);  // Non-inverting mode for OC1B
    3e84:	af e4       	ldi	r26, 0x4F	; 79
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	ef e4       	ldi	r30, 0x4F	; 79
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	80 62       	ori	r24, 0x20	; 32
    3e90:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, COM1A0);
    3e92:	af e4       	ldi	r26, 0x4F	; 79
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	ef e4       	ldi	r30, 0x4F	; 79
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	80 81       	ld	r24, Z
    3e9c:	8f 7b       	andi	r24, 0xBF	; 191
    3e9e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, COM1B0);
    3ea0:	af e4       	ldi	r26, 0x4F	; 79
    3ea2:	b0 e0       	ldi	r27, 0x00	; 0
    3ea4:	ef e4       	ldi	r30, 0x4F	; 79
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	80 81       	ld	r24, Z
    3eaa:	8f 7e       	andi	r24, 0xEF	; 239
    3eac:	8c 93       	st	X, r24

    SET_BIT(TCCR1A, WGM11);   // Mode 14: WGM13:0 = 1110
    3eae:	af e4       	ldi	r26, 0x4F	; 79
    3eb0:	b0 e0       	ldi	r27, 0x00	; 0
    3eb2:	ef e4       	ldi	r30, 0x4F	; 79
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	82 60       	ori	r24, 0x02	; 2
    3eba:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, WGM13);
    3ebc:	ae e4       	ldi	r26, 0x4E	; 78
    3ebe:	b0 e0       	ldi	r27, 0x00	; 0
    3ec0:	ee e4       	ldi	r30, 0x4E	; 78
    3ec2:	f0 e0       	ldi	r31, 0x00	; 0
    3ec4:	80 81       	ld	r24, Z
    3ec6:	80 61       	ori	r24, 0x10	; 16
    3ec8:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, WGM12);
    3eca:	ae e4       	ldi	r26, 0x4E	; 78
    3ecc:	b0 e0       	ldi	r27, 0x00	; 0
    3ece:	ee e4       	ldi	r30, 0x4E	; 78
    3ed0:	f0 e0       	ldi	r31, 0x00	; 0
    3ed2:	80 81       	ld	r24, Z
    3ed4:	88 60       	ori	r24, 0x08	; 8
    3ed6:	8c 93       	st	X, r24

    // Set prescaler to 8
    CLR_BIT(TCCR1B, CS12);
    3ed8:	ae e4       	ldi	r26, 0x4E	; 78
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	ee e4       	ldi	r30, 0x4E	; 78
    3ede:	f0 e0       	ldi	r31, 0x00	; 0
    3ee0:	80 81       	ld	r24, Z
    3ee2:	8b 7f       	andi	r24, 0xFB	; 251
    3ee4:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, CS11);
    3ee6:	ae e4       	ldi	r26, 0x4E	; 78
    3ee8:	b0 e0       	ldi	r27, 0x00	; 0
    3eea:	ee e4       	ldi	r30, 0x4E	; 78
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	80 81       	ld	r24, Z
    3ef0:	82 60       	ori	r24, 0x02	; 2
    3ef2:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, CS10);
    3ef4:	ae e4       	ldi	r26, 0x4E	; 78
    3ef6:	b0 e0       	ldi	r27, 0x00	; 0
    3ef8:	ee e4       	ldi	r30, 0x4E	; 78
    3efa:	f0 e0       	ldi	r31, 0x00	; 0
    3efc:	80 81       	ld	r24, Z
    3efe:	8e 7f       	andi	r24, 0xFE	; 254
    3f00:	8c 93       	st	X, r24

    // Set period for 20ms (50Hz) with 8MHz clock and prescaler 8
    // ICR1 = (F_CPU / (prescaler * frequency)) - 1
    // ICR1 = (8000000 / (8 * 50)) - 1 = 20000 - 1 = 19999
    ICR1 = 19999;
    3f02:	e6 e4       	ldi	r30, 0x46	; 70
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	8f e1       	ldi	r24, 0x1F	; 31
    3f08:	9e e4       	ldi	r25, 0x4E	; 78
    3f0a:	91 83       	std	Z+1, r25	; 0x01
    3f0c:	80 83       	st	Z, r24
}
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <Servo1_RotateCW>:

// Servo 1 (PD4 → OC1B)
void Servo1_RotateCW(void)   { OCR1B = 2000; }  // ~2 ms pulse (180 degrees)
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    3f1c:	e8 e4       	ldi	r30, 0x48	; 72
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	80 ed       	ldi	r24, 0xD0	; 208
    3f22:	97 e0       	ldi	r25, 0x07	; 7
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
    3f28:	cf 91       	pop	r28
    3f2a:	df 91       	pop	r29
    3f2c:	08 95       	ret

00003f2e <Servo1_RotateCCW>:
void Servo1_RotateCCW(void)  { OCR1B = 1000; }  // ~1 ms pulse (0 degrees)
    3f2e:	df 93       	push	r29
    3f30:	cf 93       	push	r28
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
    3f36:	e8 e4       	ldi	r30, 0x48	; 72
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	88 ee       	ldi	r24, 0xE8	; 232
    3f3c:	93 e0       	ldi	r25, 0x03	; 3
    3f3e:	91 83       	std	Z+1, r25	; 0x01
    3f40:	80 83       	st	Z, r24
    3f42:	cf 91       	pop	r28
    3f44:	df 91       	pop	r29
    3f46:	08 95       	ret

00003f48 <Servo1_Stop>:
void Servo1_Stop(void)       { OCR1B = 1500; }  // ~1.5 ms pulse (90 degrees)
    3f48:	df 93       	push	r29
    3f4a:	cf 93       	push	r28
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	e8 e4       	ldi	r30, 0x48	; 72
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	8c ed       	ldi	r24, 0xDC	; 220
    3f56:	95 e0       	ldi	r25, 0x05	; 5
    3f58:	91 83       	std	Z+1, r25	; 0x01
    3f5a:	80 83       	st	Z, r24
    3f5c:	cf 91       	pop	r28
    3f5e:	df 91       	pop	r29
    3f60:	08 95       	ret

00003f62 <Servo2_RotateCW>:

// Servo 2 (PD5 → OC1A)
void Servo2_RotateCW(void)   { OCR1A = 2000; }
    3f62:	df 93       	push	r29
    3f64:	cf 93       	push	r28
    3f66:	cd b7       	in	r28, 0x3d	; 61
    3f68:	de b7       	in	r29, 0x3e	; 62
    3f6a:	ea e4       	ldi	r30, 0x4A	; 74
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	80 ed       	ldi	r24, 0xD0	; 208
    3f70:	97 e0       	ldi	r25, 0x07	; 7
    3f72:	91 83       	std	Z+1, r25	; 0x01
    3f74:	80 83       	st	Z, r24
    3f76:	cf 91       	pop	r28
    3f78:	df 91       	pop	r29
    3f7a:	08 95       	ret

00003f7c <Servo2_RotateCCW>:
void Servo2_RotateCCW(void)  { OCR1A = 1000; }
    3f7c:	df 93       	push	r29
    3f7e:	cf 93       	push	r28
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	ea e4       	ldi	r30, 0x4A	; 74
    3f86:	f0 e0       	ldi	r31, 0x00	; 0
    3f88:	88 ee       	ldi	r24, 0xE8	; 232
    3f8a:	93 e0       	ldi	r25, 0x03	; 3
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	80 83       	st	Z, r24
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <Servo2_Stop>:
void Servo2_Stop(void)       { OCR1A = 1500; }
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	ea e4       	ldi	r30, 0x4A	; 74
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	8c ed       	ldi	r24, 0xDC	; 220
    3fa4:	95 e0       	ldi	r25, 0x05	; 5
    3fa6:	91 83       	std	Z+1, r25	; 0x01
    3fa8:	80 83       	st	Z, r24
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <Timer0_init>:

#include "TIM_Register.h"
#include "TIM_Interface.h"


void Timer0_init(){
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    Global_Interrupt_Enable();
    3fb8:	0e 94 c0 09 	call	0x1380	; 0x1380 <Global_Interrupt_Enable>

    CLR_BIT(TCCR0, WGM00);
    3fbc:	a3 e5       	ldi	r26, 0x53	; 83
    3fbe:	b0 e0       	ldi	r27, 0x00	; 0
    3fc0:	e3 e5       	ldi	r30, 0x53	; 83
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	8f 7b       	andi	r24, 0xBF	; 191
    3fc8:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, WGM01);
    3fca:	a3 e5       	ldi	r26, 0x53	; 83
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	e3 e5       	ldi	r30, 0x53	; 83
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	80 81       	ld	r24, Z
    3fd4:	87 7f       	andi	r24, 0xF7	; 247
    3fd6:	8c 93       	st	X, r24

    CLR_BIT(TCCR0, CS02);
    3fd8:	a3 e5       	ldi	r26, 0x53	; 83
    3fda:	b0 e0       	ldi	r27, 0x00	; 0
    3fdc:	e3 e5       	ldi	r30, 0x53	; 83
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	8b 7f       	andi	r24, 0xFB	; 251
    3fe4:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS01);
    3fe6:	a3 e5       	ldi	r26, 0x53	; 83
    3fe8:	b0 e0       	ldi	r27, 0x00	; 0
    3fea:	e3 e5       	ldi	r30, 0x53	; 83
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	80 81       	ld	r24, Z
    3ff0:	82 60       	ori	r24, 0x02	; 2
    3ff2:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, CS00);
    3ff4:	a3 e5       	ldi	r26, 0x53	; 83
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	e3 e5       	ldi	r30, 0x53	; 83
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	80 81       	ld	r24, Z
    3ffe:	8e 7f       	andi	r24, 0xFE	; 254
    4000:	8c 93       	st	X, r24
    
    SET_BIT(TIMSK, TOIE0);
    4002:	a9 e5       	ldi	r26, 0x59	; 89
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	e9 e5       	ldi	r30, 0x59	; 89
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	80 81       	ld	r24, Z
    400c:	81 60       	ori	r24, 0x01	; 1
    400e:	8c 93       	st	X, r24
}
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	08 95       	ret

00004016 <Timer0_init_CTC>:


void Timer0_init_CTC(){
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
	Global_Interrupt_Enable();
    401e:	0e 94 c0 09 	call	0x1380	; 0x1380 <Global_Interrupt_Enable>
    CLR_BIT(TCCR0, WGM00);
    4022:	a3 e5       	ldi	r26, 0x53	; 83
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	e3 e5       	ldi	r30, 0x53	; 83
    4028:	f0 e0       	ldi	r31, 0x00	; 0
    402a:	80 81       	ld	r24, Z
    402c:	8f 7b       	andi	r24, 0xBF	; 191
    402e:	8c 93       	st	X, r24
    SET_BIT(TCCR0, WGM01);
    4030:	a3 e5       	ldi	r26, 0x53	; 83
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	e3 e5       	ldi	r30, 0x53	; 83
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	80 81       	ld	r24, Z
    403a:	88 60       	ori	r24, 0x08	; 8
    403c:	8c 93       	st	X, r24

    CLR_BIT(TCCR0, CS02);
    403e:	a3 e5       	ldi	r26, 0x53	; 83
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	e3 e5       	ldi	r30, 0x53	; 83
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	80 81       	ld	r24, Z
    4048:	8b 7f       	andi	r24, 0xFB	; 251
    404a:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS01);
    404c:	a3 e5       	ldi	r26, 0x53	; 83
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	e3 e5       	ldi	r30, 0x53	; 83
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	82 60       	ori	r24, 0x02	; 2
    4058:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, CS00);
    405a:	a3 e5       	ldi	r26, 0x53	; 83
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	e3 e5       	ldi	r30, 0x53	; 83
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	80 81       	ld	r24, Z
    4064:	8e 7f       	andi	r24, 0xFE	; 254
    4066:	8c 93       	st	X, r24

    Timer0_voidSet_CompareMatch_Value(250);
    4068:	8a ef       	ldi	r24, 0xFA	; 250
    406a:	0e 94 41 20 	call	0x4082	; 0x4082 <Timer0_voidSet_CompareMatch_Value>
    SET_BIT(TIMSK, OCIE0);
    406e:	a9 e5       	ldi	r26, 0x59	; 89
    4070:	b0 e0       	ldi	r27, 0x00	; 0
    4072:	e9 e5       	ldi	r30, 0x59	; 89
    4074:	f0 e0       	ldi	r31, 0x00	; 0
    4076:	80 81       	ld	r24, Z
    4078:	82 60       	ori	r24, 0x02	; 2
    407a:	8c 93       	st	X, r24
}
    407c:	cf 91       	pop	r28
    407e:	df 91       	pop	r29
    4080:	08 95       	ret

00004082 <Timer0_voidSet_CompareMatch_Value>:


void Timer0_voidSet_CompareMatch_Value(u8 u8_local_OCR_Value){
    4082:	df 93       	push	r29
    4084:	cf 93       	push	r28
    4086:	0f 92       	push	r0
    4088:	cd b7       	in	r28, 0x3d	; 61
    408a:	de b7       	in	r29, 0x3e	; 62
    408c:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = u8_local_OCR_Value;
    408e:	ec e5       	ldi	r30, 0x5C	; 92
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	80 83       	st	Z, r24
}
    4096:	0f 90       	pop	r0
    4098:	cf 91       	pop	r28
    409a:	df 91       	pop	r29
    409c:	08 95       	ret

0000409e <Timer0_init_PWM>:


void Timer0_init_PWM(void) {
    409e:	df 93       	push	r29
    40a0:	cf 93       	push	r28
    40a2:	cd b7       	in	r28, 0x3d	; 61
    40a4:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR0, WGM00);
    40a6:	a3 e5       	ldi	r26, 0x53	; 83
    40a8:	b0 e0       	ldi	r27, 0x00	; 0
    40aa:	e3 e5       	ldi	r30, 0x53	; 83
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	80 64       	ori	r24, 0x40	; 64
    40b2:	8c 93       	st	X, r24
    SET_BIT(TCCR0, WGM01);
    40b4:	a3 e5       	ldi	r26, 0x53	; 83
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	e3 e5       	ldi	r30, 0x53	; 83
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	88 60       	ori	r24, 0x08	; 8
    40c0:	8c 93       	st	X, r24

    CLR_BIT(TCCR0, CS02);
    40c2:	a3 e5       	ldi	r26, 0x53	; 83
    40c4:	b0 e0       	ldi	r27, 0x00	; 0
    40c6:	e3 e5       	ldi	r30, 0x53	; 83
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	80 81       	ld	r24, Z
    40cc:	8b 7f       	andi	r24, 0xFB	; 251
    40ce:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS01);
    40d0:	a3 e5       	ldi	r26, 0x53	; 83
    40d2:	b0 e0       	ldi	r27, 0x00	; 0
    40d4:	e3 e5       	ldi	r30, 0x53	; 83
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	82 60       	ori	r24, 0x02	; 2
    40dc:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, CS00);
    40de:	a3 e5       	ldi	r26, 0x53	; 83
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	e3 e5       	ldi	r30, 0x53	; 83
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	80 81       	ld	r24, Z
    40e8:	8e 7f       	andi	r24, 0xFE	; 254
    40ea:	8c 93       	st	X, r24

    SET_BIT(TCCR0, COM01);
    40ec:	a3 e5       	ldi	r26, 0x53	; 83
    40ee:	b0 e0       	ldi	r27, 0x00	; 0
    40f0:	e3 e5       	ldi	r30, 0x53	; 83
    40f2:	f0 e0       	ldi	r31, 0x00	; 0
    40f4:	80 81       	ld	r24, Z
    40f6:	80 62       	ori	r24, 0x20	; 32
    40f8:	8c 93       	st	X, r24
    SET_BIT(TCCR0, COM00);
    40fa:	a3 e5       	ldi	r26, 0x53	; 83
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e3 e5       	ldi	r30, 0x53	; 83
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	80 61       	ori	r24, 0x10	; 16
    4106:	8c 93       	st	X, r24

    DIO_voidSetPinDirection(DIO_u8_PORTB, DIO_u8_PIN3,1);
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	63 e0       	ldi	r22, 0x03	; 3
    410c:	41 e0       	ldi	r20, 0x01	; 1
    410e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
}
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <Timer0_init_FPWM>:


void Timer0_init_FPWM(void){
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TCCR0, WGM00);
    4120:	a3 e5       	ldi	r26, 0x53	; 83
    4122:	b0 e0       	ldi	r27, 0x00	; 0
    4124:	e3 e5       	ldi	r30, 0x53	; 83
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	80 81       	ld	r24, Z
    412a:	80 64       	ori	r24, 0x40	; 64
    412c:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, WGM01);
    412e:	a3 e5       	ldi	r26, 0x53	; 83
    4130:	b0 e0       	ldi	r27, 0x00	; 0
    4132:	e3 e5       	ldi	r30, 0x53	; 83
    4134:	f0 e0       	ldi	r31, 0x00	; 0
    4136:	80 81       	ld	r24, Z
    4138:	87 7f       	andi	r24, 0xF7	; 247
    413a:	8c 93       	st	X, r24

    CLR_BIT(TCCR0, CS02);
    413c:	a3 e5       	ldi	r26, 0x53	; 83
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	e3 e5       	ldi	r30, 0x53	; 83
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	8b 7f       	andi	r24, 0xFB	; 251
    4148:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS01);
    414a:	a3 e5       	ldi	r26, 0x53	; 83
    414c:	b0 e0       	ldi	r27, 0x00	; 0
    414e:	e3 e5       	ldi	r30, 0x53	; 83
    4150:	f0 e0       	ldi	r31, 0x00	; 0
    4152:	80 81       	ld	r24, Z
    4154:	82 60       	ori	r24, 0x02	; 2
    4156:	8c 93       	st	X, r24
    CLR_BIT(TCCR0, CS00);
    4158:	a3 e5       	ldi	r26, 0x53	; 83
    415a:	b0 e0       	ldi	r27, 0x00	; 0
    415c:	e3 e5       	ldi	r30, 0x53	; 83
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	80 81       	ld	r24, Z
    4162:	8e 7f       	andi	r24, 0xFE	; 254
    4164:	8c 93       	st	X, r24

    SET_BIT(TCCR0, COM01);
    4166:	a3 e5       	ldi	r26, 0x53	; 83
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e3 e5       	ldi	r30, 0x53	; 83
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	80 62       	ori	r24, 0x20	; 32
    4172:	8c 93       	st	X, r24
    SET_BIT(TCCR0, COM00);
    4174:	a3 e5       	ldi	r26, 0x53	; 83
    4176:	b0 e0       	ldi	r27, 0x00	; 0
    4178:	e3 e5       	ldi	r30, 0x53	; 83
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	80 81       	ld	r24, Z
    417e:	80 61       	ori	r24, 0x10	; 16
    4180:	8c 93       	st	X, r24
}
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	08 95       	ret

00004188 <Timer1_Init_ICR>:


void Timer1_Init_ICR(void){
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    Global_Interrupt_Enable();
    4190:	0e 94 c0 09 	call	0x1380	; 0x1380 <Global_Interrupt_Enable>

    // Clear Timer1 control registers
    TCCR1A = 0;
    4194:	ef e4       	ldi	r30, 0x4F	; 79
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	10 82       	st	Z, r1
    TCCR1B = 0;
    419a:	ee e4       	ldi	r30, 0x4E	; 78
    419c:	f0 e0       	ldi	r31, 0x00	; 0
    419e:	10 82       	st	Z, r1

    // Set Waveform Generation Mode to 14 (Fast PWM with ICR1 as TOP)
    SET_BIT(TCCR1A, WGM11);
    41a0:	af e4       	ldi	r26, 0x4F	; 79
    41a2:	b0 e0       	ldi	r27, 0x00	; 0
    41a4:	ef e4       	ldi	r30, 0x4F	; 79
    41a6:	f0 e0       	ldi	r31, 0x00	; 0
    41a8:	80 81       	ld	r24, Z
    41aa:	82 60       	ori	r24, 0x02	; 2
    41ac:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, WGM12);
    41ae:	ae e4       	ldi	r26, 0x4E	; 78
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	ee e4       	ldi	r30, 0x4E	; 78
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	88 60       	ori	r24, 0x08	; 8
    41ba:	8c 93       	st	X, r24
    SET_BIT(TCCR1B, WGM13);
    41bc:	ae e4       	ldi	r26, 0x4E	; 78
    41be:	b0 e0       	ldi	r27, 0x00	; 0
    41c0:	ee e4       	ldi	r30, 0x4E	; 78
    41c2:	f0 e0       	ldi	r31, 0x00	; 0
    41c4:	80 81       	ld	r24, Z
    41c6:	80 61       	ori	r24, 0x10	; 16
    41c8:	8c 93       	st	X, r24

    // Set prescaler to 8
    SET_BIT(TCCR1B, CS11);
    41ca:	ae e4       	ldi	r26, 0x4E	; 78
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	ee e4       	ldi	r30, 0x4E	; 78
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	80 81       	ld	r24, Z
    41d4:	82 60       	ori	r24, 0x02	; 2
    41d6:	8c 93       	st	X, r24

    // Set default ICR1 value (will be overridden by Servo_Init)
    ICR1 = 2000;
    41d8:	e6 e4       	ldi	r30, 0x46	; 70
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 ed       	ldi	r24, 0xD0	; 208
    41de:	97 e0       	ldi	r25, 0x07	; 7
    41e0:	91 83       	std	Z+1, r25	; 0x01
    41e2:	80 83       	st	Z, r24

    // Set default OCR values
    OCR1A = 1000;
    41e4:	ea e4       	ldi	r30, 0x4A	; 74
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	88 ee       	ldi	r24, 0xE8	; 232
    41ea:	93 e0       	ldi	r25, 0x03	; 3
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	80 83       	st	Z, r24
    OCR1B = 1000;
    41f0:	e8 e4       	ldi	r30, 0x48	; 72
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	88 ee       	ldi	r24, 0xE8	; 232
    41f6:	93 e0       	ldi	r25, 0x03	; 3
    41f8:	91 83       	std	Z+1, r25	; 0x01
    41fa:	80 83       	st	Z, r24
}
    41fc:	cf 91       	pop	r28
    41fe:	df 91       	pop	r29
    4200:	08 95       	ret

00004202 <main>:
#include "Servo_Interface.h"
#include <util/delay.h>
#include "DIO_interface.h"

int main(void)
{
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	df 93       	push	r29
    4208:	cf 93       	push	r28
    420a:	cd b7       	in	r28, 0x3d	; 61
    420c:	de b7       	in	r29, 0x3e	; 62
    420e:	cf 58       	subi	r28, 0x8F	; 143
    4210:	d0 40       	sbci	r29, 0x00	; 0
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    // ===== Init hardware =====
    LCD_Init();
    421c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <LCD_Init>
    Keypad_Init();
    4220:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Keypad_Init>
    Servo_Init();
    4224:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <Servo_Init>
    STEPPER_voidInit(STEPPER1);
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <STEPPER_voidInit>
    STEPPER_voidInit(STEPPER2);
    422e:	82 e0       	ldi	r24, 0x02	; 2
    4230:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <STEPPER_voidInit>

    Servo1_Stop();
    4234:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <Servo1_Stop>
    Servo2_Stop();
    4238:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <Servo2_Stop>
    STEPPER_voidStop(STEPPER1);
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	0e 94 34 28 	call	0x5068	; 0x5068 <STEPPER_voidStop>
    STEPPER_voidStop(STEPPER2);
    4242:	82 e0       	ldi	r24, 0x02	; 2
    4244:	0e 94 34 28 	call	0x5068	; 0x5068 <STEPPER_voidStop>

    LCD_svoidSendString("Press 1-8");
    4248:	80 e6       	ldi	r24, 0x60	; 96
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4250:	fe 01       	movw	r30, r28
    4252:	e7 57       	subi	r30, 0x77	; 119
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	80 e0       	ldi	r24, 0x00	; 0
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	aa ef       	ldi	r26, 0xFA	; 250
    425c:	b4 e4       	ldi	r27, 0x44	; 68
    425e:	80 83       	st	Z, r24
    4260:	91 83       	std	Z+1, r25	; 0x01
    4262:	a2 83       	std	Z+2, r26	; 0x02
    4264:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4266:	8e 01       	movw	r16, r28
    4268:	0b 57       	subi	r16, 0x7B	; 123
    426a:	1f 4f       	sbci	r17, 0xFF	; 255
    426c:	fe 01       	movw	r30, r28
    426e:	e7 57       	subi	r30, 0x77	; 119
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	60 81       	ld	r22, Z
    4274:	71 81       	ldd	r23, Z+1	; 0x01
    4276:	82 81       	ldd	r24, Z+2	; 0x02
    4278:	93 81       	ldd	r25, Z+3	; 0x03
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	4a ef       	ldi	r20, 0xFA	; 250
    4280:	54 e4       	ldi	r21, 0x44	; 68
    4282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4286:	dc 01       	movw	r26, r24
    4288:	cb 01       	movw	r24, r22
    428a:	f8 01       	movw	r30, r16
    428c:	80 83       	st	Z, r24
    428e:	91 83       	std	Z+1, r25	; 0x01
    4290:	a2 83       	std	Z+2, r26	; 0x02
    4292:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4294:	fe 01       	movw	r30, r28
    4296:	eb 57       	subi	r30, 0x7B	; 123
    4298:	ff 4f       	sbci	r31, 0xFF	; 255
    429a:	60 81       	ld	r22, Z
    429c:	71 81       	ldd	r23, Z+1	; 0x01
    429e:	82 81       	ldd	r24, Z+2	; 0x02
    42a0:	93 81       	ldd	r25, Z+3	; 0x03
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e8       	ldi	r20, 0x80	; 128
    42a8:	5f e3       	ldi	r21, 0x3F	; 63
    42aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ae:	88 23       	and	r24, r24
    42b0:	44 f4       	brge	.+16     	; 0x42c2 <main+0xc0>
		__ticks = 1;
    42b2:	fe 01       	movw	r30, r28
    42b4:	ed 57       	subi	r30, 0x7D	; 125
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	91 83       	std	Z+1, r25	; 0x01
    42be:	80 83       	st	Z, r24
    42c0:	64 c0       	rjmp	.+200    	; 0x438a <main+0x188>
	else if (__tmp > 65535)
    42c2:	fe 01       	movw	r30, r28
    42c4:	eb 57       	subi	r30, 0x7B	; 123
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	60 81       	ld	r22, Z
    42ca:	71 81       	ldd	r23, Z+1	; 0x01
    42cc:	82 81       	ldd	r24, Z+2	; 0x02
    42ce:	93 81       	ldd	r25, Z+3	; 0x03
    42d0:	20 e0       	ldi	r18, 0x00	; 0
    42d2:	3f ef       	ldi	r19, 0xFF	; 255
    42d4:	4f e7       	ldi	r20, 0x7F	; 127
    42d6:	57 e4       	ldi	r21, 0x47	; 71
    42d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42dc:	18 16       	cp	r1, r24
    42de:	0c f0       	brlt	.+2      	; 0x42e2 <main+0xe0>
    42e0:	43 c0       	rjmp	.+134    	; 0x4368 <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e2:	fe 01       	movw	r30, r28
    42e4:	e7 57       	subi	r30, 0x77	; 119
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	60 81       	ld	r22, Z
    42ea:	71 81       	ldd	r23, Z+1	; 0x01
    42ec:	82 81       	ldd	r24, Z+2	; 0x02
    42ee:	93 81       	ldd	r25, Z+3	; 0x03
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	40 e2       	ldi	r20, 0x20	; 32
    42f6:	51 e4       	ldi	r21, 0x41	; 65
    42f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fc:	dc 01       	movw	r26, r24
    42fe:	cb 01       	movw	r24, r22
    4300:	8e 01       	movw	r16, r28
    4302:	0d 57       	subi	r16, 0x7D	; 125
    4304:	1f 4f       	sbci	r17, 0xFF	; 255
    4306:	bc 01       	movw	r22, r24
    4308:	cd 01       	movw	r24, r26
    430a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430e:	dc 01       	movw	r26, r24
    4310:	cb 01       	movw	r24, r22
    4312:	f8 01       	movw	r30, r16
    4314:	91 83       	std	Z+1, r25	; 0x01
    4316:	80 83       	st	Z, r24
    4318:	1f c0       	rjmp	.+62     	; 0x4358 <main+0x156>
    431a:	fe 01       	movw	r30, r28
    431c:	ef 57       	subi	r30, 0x7F	; 127
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	88 ec       	ldi	r24, 0xC8	; 200
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	91 83       	std	Z+1, r25	; 0x01
    4326:	80 83       	st	Z, r24
    4328:	fe 01       	movw	r30, r28
    432a:	ef 57       	subi	r30, 0x7F	; 127
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	80 81       	ld	r24, Z
    4330:	91 81       	ldd	r25, Z+1	; 0x01
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	f1 f7       	brne	.-4      	; 0x4332 <main+0x130>
    4336:	fe 01       	movw	r30, r28
    4338:	ef 57       	subi	r30, 0x7F	; 127
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	91 83       	std	Z+1, r25	; 0x01
    433e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4340:	de 01       	movw	r26, r28
    4342:	ad 57       	subi	r26, 0x7D	; 125
    4344:	bf 4f       	sbci	r27, 0xFF	; 255
    4346:	fe 01       	movw	r30, r28
    4348:	ed 57       	subi	r30, 0x7D	; 125
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	80 81       	ld	r24, Z
    434e:	91 81       	ldd	r25, Z+1	; 0x01
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	11 96       	adiw	r26, 0x01	; 1
    4354:	9c 93       	st	X, r25
    4356:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4358:	fe 01       	movw	r30, r28
    435a:	ed 57       	subi	r30, 0x7D	; 125
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	d1 f6       	brne	.-76     	; 0x431a <main+0x118>
    4366:	27 c0       	rjmp	.+78     	; 0x43b6 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4368:	8e 01       	movw	r16, r28
    436a:	0d 57       	subi	r16, 0x7D	; 125
    436c:	1f 4f       	sbci	r17, 0xFF	; 255
    436e:	fe 01       	movw	r30, r28
    4370:	eb 57       	subi	r30, 0x7B	; 123
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	60 81       	ld	r22, Z
    4376:	71 81       	ldd	r23, Z+1	; 0x01
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	93 81       	ldd	r25, Z+3	; 0x03
    437c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	f8 01       	movw	r30, r16
    4386:	91 83       	std	Z+1, r25	; 0x01
    4388:	80 83       	st	Z, r24
    438a:	de 01       	movw	r26, r28
    438c:	a1 58       	subi	r26, 0x81	; 129
    438e:	bf 4f       	sbci	r27, 0xFF	; 255
    4390:	fe 01       	movw	r30, r28
    4392:	ed 57       	subi	r30, 0x7D	; 125
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	80 81       	ld	r24, Z
    4398:	91 81       	ldd	r25, Z+1	; 0x01
    439a:	8d 93       	st	X+, r24
    439c:	9c 93       	st	X, r25
    439e:	fe 01       	movw	r30, r28
    43a0:	e1 58       	subi	r30, 0x81	; 129
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	80 81       	ld	r24, Z
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	f1 f7       	brne	.-4      	; 0x43a8 <main+0x1a6>
    43ac:	fe 01       	movw	r30, r28
    43ae:	e1 58       	subi	r30, 0x81	; 129
    43b0:	ff 4f       	sbci	r31, 0xFF	; 255
    43b2:	91 83       	std	Z+1, r25	; 0x01
    43b4:	80 83       	st	Z, r24
    _delay_ms(2000);
    LCD_Command(0x01);
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>

    while(1)
    {
        u8 key = GET_Pressed_Key();
    43bc:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    43c0:	fe 01       	movw	r30, r28
    43c2:	e3 57       	subi	r30, 0x73	; 115
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	80 83       	st	Z, r24

        switch(key)
    43c8:	fe 01       	movw	r30, r28
    43ca:	e3 57       	subi	r30, 0x73	; 115
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	80 81       	ld	r24, Z
    43d0:	28 2f       	mov	r18, r24
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	c2 57       	subi	r28, 0x72	; 114
    43d6:	df 4f       	sbci	r29, 0xFF	; 255
    43d8:	39 83       	std	Y+1, r19	; 0x01
    43da:	28 83       	st	Y, r18
    43dc:	ce 58       	subi	r28, 0x8E	; 142
    43de:	d0 40       	sbci	r29, 0x00	; 0
    43e0:	c2 57       	subi	r28, 0x72	; 114
    43e2:	df 4f       	sbci	r29, 0xFF	; 255
    43e4:	88 81       	ld	r24, Y
    43e6:	99 81       	ldd	r25, Y+1	; 0x01
    43e8:	ce 58       	subi	r28, 0x8E	; 142
    43ea:	d0 40       	sbci	r29, 0x00	; 0
    43ec:	84 33       	cpi	r24, 0x34	; 52
    43ee:	91 05       	cpc	r25, r1
    43f0:	09 f4       	brne	.+2      	; 0x43f4 <main+0x1f2>
    43f2:	99 c2       	rjmp	.+1330   	; 0x4926 <main+0x724>
    43f4:	c2 57       	subi	r28, 0x72	; 114
    43f6:	df 4f       	sbci	r29, 0xFF	; 255
    43f8:	e8 81       	ld	r30, Y
    43fa:	f9 81       	ldd	r31, Y+1	; 0x01
    43fc:	ce 58       	subi	r28, 0x8E	; 142
    43fe:	d0 40       	sbci	r29, 0x00	; 0
    4400:	e5 33       	cpi	r30, 0x35	; 53
    4402:	f1 05       	cpc	r31, r1
    4404:	f4 f4       	brge	.+60     	; 0x4442 <main+0x240>
    4406:	c2 57       	subi	r28, 0x72	; 114
    4408:	df 4f       	sbci	r29, 0xFF	; 255
    440a:	28 81       	ld	r18, Y
    440c:	39 81       	ldd	r19, Y+1	; 0x01
    440e:	ce 58       	subi	r28, 0x8E	; 142
    4410:	d0 40       	sbci	r29, 0x00	; 0
    4412:	22 33       	cpi	r18, 0x32	; 50
    4414:	31 05       	cpc	r19, r1
    4416:	09 f4       	brne	.+2      	; 0x441a <main+0x218>
    4418:	00 c1       	rjmp	.+512    	; 0x461a <main+0x418>
    441a:	c2 57       	subi	r28, 0x72	; 114
    441c:	df 4f       	sbci	r29, 0xFF	; 255
    441e:	88 81       	ld	r24, Y
    4420:	99 81       	ldd	r25, Y+1	; 0x01
    4422:	ce 58       	subi	r28, 0x8E	; 142
    4424:	d0 40       	sbci	r29, 0x00	; 0
    4426:	83 33       	cpi	r24, 0x33	; 51
    4428:	91 05       	cpc	r25, r1
    442a:	0c f0       	brlt	.+2      	; 0x442e <main+0x22c>
    442c:	b9 c1       	rjmp	.+882    	; 0x47a0 <main+0x59e>
    442e:	c2 57       	subi	r28, 0x72	; 114
    4430:	df 4f       	sbci	r29, 0xFF	; 255
    4432:	e8 81       	ld	r30, Y
    4434:	f9 81       	ldd	r31, Y+1	; 0x01
    4436:	ce 58       	subi	r28, 0x8E	; 142
    4438:	d0 40       	sbci	r29, 0x00	; 0
    443a:	e1 33       	cpi	r30, 0x31	; 49
    443c:	f1 05       	cpc	r31, r1
    443e:	51 f1       	breq	.+84     	; 0x4494 <main+0x292>
    4440:	54 c5       	rjmp	.+2728   	; 0x4eea <main+0xce8>
    4442:	c2 57       	subi	r28, 0x72	; 114
    4444:	df 4f       	sbci	r29, 0xFF	; 255
    4446:	28 81       	ld	r18, Y
    4448:	39 81       	ldd	r19, Y+1	; 0x01
    444a:	ce 58       	subi	r28, 0x8E	; 142
    444c:	d0 40       	sbci	r29, 0x00	; 0
    444e:	26 33       	cpi	r18, 0x36	; 54
    4450:	31 05       	cpc	r19, r1
    4452:	09 f4       	brne	.+2      	; 0x4456 <main+0x254>
    4454:	c1 c3       	rjmp	.+1922   	; 0x4bd8 <main+0x9d6>
    4456:	c2 57       	subi	r28, 0x72	; 114
    4458:	df 4f       	sbci	r29, 0xFF	; 255
    445a:	88 81       	ld	r24, Y
    445c:	99 81       	ldd	r25, Y+1	; 0x01
    445e:	ce 58       	subi	r28, 0x8E	; 142
    4460:	d0 40       	sbci	r29, 0x00	; 0
    4462:	86 33       	cpi	r24, 0x36	; 54
    4464:	91 05       	cpc	r25, r1
    4466:	0c f4       	brge	.+2      	; 0x446a <main+0x268>
    4468:	21 c3       	rjmp	.+1602   	; 0x4aac <main+0x8aa>
    446a:	c2 57       	subi	r28, 0x72	; 114
    446c:	df 4f       	sbci	r29, 0xFF	; 255
    446e:	e8 81       	ld	r30, Y
    4470:	f9 81       	ldd	r31, Y+1	; 0x01
    4472:	ce 58       	subi	r28, 0x8E	; 142
    4474:	d0 40       	sbci	r29, 0x00	; 0
    4476:	e7 33       	cpi	r30, 0x37	; 55
    4478:	f1 05       	cpc	r31, r1
    447a:	09 f4       	brne	.+2      	; 0x447e <main+0x27c>
    447c:	30 c4       	rjmp	.+2144   	; 0x4cde <main+0xadc>
    447e:	c2 57       	subi	r28, 0x72	; 114
    4480:	df 4f       	sbci	r29, 0xFF	; 255
    4482:	28 81       	ld	r18, Y
    4484:	39 81       	ldd	r19, Y+1	; 0x01
    4486:	ce 58       	subi	r28, 0x8E	; 142
    4488:	d0 40       	sbci	r29, 0x00	; 0
    448a:	28 33       	cpi	r18, 0x38	; 56
    448c:	31 05       	cpc	r19, r1
    448e:	09 f4       	brne	.+2      	; 0x4492 <main+0x290>
    4490:	a9 c4       	rjmp	.+2386   	; 0x4de4 <main+0xbe2>
    4492:	2b c5       	rjmp	.+2646   	; 0x4eea <main+0xce8>
        {
        case '1':
            LCD_Command(0x01);
    4494:	81 e0       	ldi	r24, 0x01	; 1
    4496:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
            LCD_svoidSendString(" ACW (Right)");
    449a:	8a e6       	ldi	r24, 0x6A	; 106
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    44a2:	b5 c0       	rjmp	.+362    	; 0x460e <main+0x40c>
            while(GET_Pressed_Key()=='1') {
                Servo1_RotateCW();
    44a4:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <Servo1_RotateCW>
    44a8:	fe 01       	movw	r30, r28
    44aa:	e5 58       	subi	r30, 0x85	; 133
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	a0 ea       	ldi	r26, 0xA0	; 160
    44b4:	b0 e4       	ldi	r27, 0x40	; 64
    44b6:	80 83       	st	Z, r24
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	a2 83       	std	Z+2, r26	; 0x02
    44bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44be:	8e 01       	movw	r16, r28
    44c0:	09 58       	subi	r16, 0x89	; 137
    44c2:	1f 4f       	sbci	r17, 0xFF	; 255
    44c4:	fe 01       	movw	r30, r28
    44c6:	e5 58       	subi	r30, 0x85	; 133
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	60 81       	ld	r22, Z
    44cc:	71 81       	ldd	r23, Z+1	; 0x01
    44ce:	82 81       	ldd	r24, Z+2	; 0x02
    44d0:	93 81       	ldd	r25, Z+3	; 0x03
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	4a ef       	ldi	r20, 0xFA	; 250
    44d8:	54 e4       	ldi	r21, 0x44	; 68
    44da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	f8 01       	movw	r30, r16
    44e4:	80 83       	st	Z, r24
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	a2 83       	std	Z+2, r26	; 0x02
    44ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44ec:	fe 01       	movw	r30, r28
    44ee:	e9 58       	subi	r30, 0x89	; 137
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	60 81       	ld	r22, Z
    44f4:	71 81       	ldd	r23, Z+1	; 0x01
    44f6:	82 81       	ldd	r24, Z+2	; 0x02
    44f8:	93 81       	ldd	r25, Z+3	; 0x03
    44fa:	20 e0       	ldi	r18, 0x00	; 0
    44fc:	30 e0       	ldi	r19, 0x00	; 0
    44fe:	40 e8       	ldi	r20, 0x80	; 128
    4500:	5f e3       	ldi	r21, 0x3F	; 63
    4502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4506:	88 23       	and	r24, r24
    4508:	44 f4       	brge	.+16     	; 0x451a <main+0x318>
		__ticks = 1;
    450a:	fe 01       	movw	r30, r28
    450c:	eb 58       	subi	r30, 0x8B	; 139
    450e:	ff 4f       	sbci	r31, 0xFF	; 255
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	91 83       	std	Z+1, r25	; 0x01
    4516:	80 83       	st	Z, r24
    4518:	64 c0       	rjmp	.+200    	; 0x45e2 <main+0x3e0>
	else if (__tmp > 65535)
    451a:	fe 01       	movw	r30, r28
    451c:	e9 58       	subi	r30, 0x89	; 137
    451e:	ff 4f       	sbci	r31, 0xFF	; 255
    4520:	60 81       	ld	r22, Z
    4522:	71 81       	ldd	r23, Z+1	; 0x01
    4524:	82 81       	ldd	r24, Z+2	; 0x02
    4526:	93 81       	ldd	r25, Z+3	; 0x03
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	3f ef       	ldi	r19, 0xFF	; 255
    452c:	4f e7       	ldi	r20, 0x7F	; 127
    452e:	57 e4       	ldi	r21, 0x47	; 71
    4530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4534:	18 16       	cp	r1, r24
    4536:	0c f0       	brlt	.+2      	; 0x453a <main+0x338>
    4538:	43 c0       	rjmp	.+134    	; 0x45c0 <main+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    453a:	fe 01       	movw	r30, r28
    453c:	e5 58       	subi	r30, 0x85	; 133
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	60 81       	ld	r22, Z
    4542:	71 81       	ldd	r23, Z+1	; 0x01
    4544:	82 81       	ldd	r24, Z+2	; 0x02
    4546:	93 81       	ldd	r25, Z+3	; 0x03
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	40 e2       	ldi	r20, 0x20	; 32
    454e:	51 e4       	ldi	r21, 0x41	; 65
    4550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4554:	dc 01       	movw	r26, r24
    4556:	cb 01       	movw	r24, r22
    4558:	8e 01       	movw	r16, r28
    455a:	0b 58       	subi	r16, 0x8B	; 139
    455c:	1f 4f       	sbci	r17, 0xFF	; 255
    455e:	bc 01       	movw	r22, r24
    4560:	cd 01       	movw	r24, r26
    4562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	f8 01       	movw	r30, r16
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	80 83       	st	Z, r24
    4570:	1f c0       	rjmp	.+62     	; 0x45b0 <main+0x3ae>
    4572:	fe 01       	movw	r30, r28
    4574:	ed 58       	subi	r30, 0x8D	; 141
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	88 ec       	ldi	r24, 0xC8	; 200
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	91 83       	std	Z+1, r25	; 0x01
    457e:	80 83       	st	Z, r24
    4580:	fe 01       	movw	r30, r28
    4582:	ed 58       	subi	r30, 0x8D	; 141
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	80 81       	ld	r24, Z
    4588:	91 81       	ldd	r25, Z+1	; 0x01
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	f1 f7       	brne	.-4      	; 0x458a <main+0x388>
    458e:	fe 01       	movw	r30, r28
    4590:	ed 58       	subi	r30, 0x8D	; 141
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	91 83       	std	Z+1, r25	; 0x01
    4596:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4598:	de 01       	movw	r26, r28
    459a:	ab 58       	subi	r26, 0x8B	; 139
    459c:	bf 4f       	sbci	r27, 0xFF	; 255
    459e:	fe 01       	movw	r30, r28
    45a0:	eb 58       	subi	r30, 0x8B	; 139
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	80 81       	ld	r24, Z
    45a6:	91 81       	ldd	r25, Z+1	; 0x01
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	11 96       	adiw	r26, 0x01	; 1
    45ac:	9c 93       	st	X, r25
    45ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b0:	fe 01       	movw	r30, r28
    45b2:	eb 58       	subi	r30, 0x8B	; 139
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	80 81       	ld	r24, Z
    45b8:	91 81       	ldd	r25, Z+1	; 0x01
    45ba:	00 97       	sbiw	r24, 0x00	; 0
    45bc:	d1 f6       	brne	.-76     	; 0x4572 <main+0x370>
    45be:	27 c0       	rjmp	.+78     	; 0x460e <main+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c0:	8e 01       	movw	r16, r28
    45c2:	0b 58       	subi	r16, 0x8B	; 139
    45c4:	1f 4f       	sbci	r17, 0xFF	; 255
    45c6:	fe 01       	movw	r30, r28
    45c8:	e9 58       	subi	r30, 0x89	; 137
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	60 81       	ld	r22, Z
    45ce:	71 81       	ldd	r23, Z+1	; 0x01
    45d0:	82 81       	ldd	r24, Z+2	; 0x02
    45d2:	93 81       	ldd	r25, Z+3	; 0x03
    45d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	f8 01       	movw	r30, r16
    45de:	91 83       	std	Z+1, r25	; 0x01
    45e0:	80 83       	st	Z, r24
    45e2:	de 01       	movw	r26, r28
    45e4:	af 58       	subi	r26, 0x8F	; 143
    45e6:	bf 4f       	sbci	r27, 0xFF	; 255
    45e8:	fe 01       	movw	r30, r28
    45ea:	eb 58       	subi	r30, 0x8B	; 139
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	80 81       	ld	r24, Z
    45f0:	91 81       	ldd	r25, Z+1	; 0x01
    45f2:	8d 93       	st	X+, r24
    45f4:	9c 93       	st	X, r25
    45f6:	fe 01       	movw	r30, r28
    45f8:	ef 58       	subi	r30, 0x8F	; 143
    45fa:	ff 4f       	sbci	r31, 0xFF	; 255
    45fc:	80 81       	ld	r24, Z
    45fe:	91 81       	ldd	r25, Z+1	; 0x01
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	f1 f7       	brne	.-4      	; 0x4600 <main+0x3fe>
    4604:	fe 01       	movw	r30, r28
    4606:	ef 58       	subi	r30, 0x8F	; 143
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	80 83       	st	Z, r24
        switch(key)
        {
        case '1':
            LCD_Command(0x01);
            LCD_svoidSendString(" ACW (Right)");
            while(GET_Pressed_Key()=='1') {
    460e:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4612:	81 33       	cpi	r24, 0x31	; 49
    4614:	09 f4       	brne	.+2      	; 0x4618 <main+0x416>
    4616:	46 cf       	rjmp	.-372    	; 0x44a4 <main+0x2a2>
    4618:	79 c4       	rjmp	.+2290   	; 0x4f0c <main+0xd0a>
                _delay_ms(5); // small delay for stability
            }
            break;

        case '2':
            LCD_Command(0x01);
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
            LCD_svoidSendString("CW(LEFT)");
    4620:	87 e7       	ldi	r24, 0x77	; 119
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4628:	b5 c0       	rjmp	.+362    	; 0x4794 <main+0x592>
            while(GET_Pressed_Key()=='2') {
                Servo1_RotateCCW();
    462a:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <Servo1_RotateCCW>
    462e:	fe 01       	movw	r30, r28
    4630:	e3 59       	subi	r30, 0x93	; 147
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	a0 ea       	ldi	r26, 0xA0	; 160
    463a:	b0 e4       	ldi	r27, 0x40	; 64
    463c:	80 83       	st	Z, r24
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	a2 83       	std	Z+2, r26	; 0x02
    4642:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4644:	8e 01       	movw	r16, r28
    4646:	07 59       	subi	r16, 0x97	; 151
    4648:	1f 4f       	sbci	r17, 0xFF	; 255
    464a:	fe 01       	movw	r30, r28
    464c:	e3 59       	subi	r30, 0x93	; 147
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	4a ef       	ldi	r20, 0xFA	; 250
    465e:	54 e4       	ldi	r21, 0x44	; 68
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	f8 01       	movw	r30, r16
    466a:	80 83       	st	Z, r24
    466c:	91 83       	std	Z+1, r25	; 0x01
    466e:	a2 83       	std	Z+2, r26	; 0x02
    4670:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4672:	fe 01       	movw	r30, r28
    4674:	e7 59       	subi	r30, 0x97	; 151
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	60 81       	ld	r22, Z
    467a:	71 81       	ldd	r23, Z+1	; 0x01
    467c:	82 81       	ldd	r24, Z+2	; 0x02
    467e:	93 81       	ldd	r25, Z+3	; 0x03
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e8       	ldi	r20, 0x80	; 128
    4686:	5f e3       	ldi	r21, 0x3F	; 63
    4688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    468c:	88 23       	and	r24, r24
    468e:	44 f4       	brge	.+16     	; 0x46a0 <main+0x49e>
		__ticks = 1;
    4690:	fe 01       	movw	r30, r28
    4692:	e9 59       	subi	r30, 0x99	; 153
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	80 83       	st	Z, r24
    469e:	64 c0       	rjmp	.+200    	; 0x4768 <main+0x566>
	else if (__tmp > 65535)
    46a0:	fe 01       	movw	r30, r28
    46a2:	e7 59       	subi	r30, 0x97	; 151
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	60 81       	ld	r22, Z
    46a8:	71 81       	ldd	r23, Z+1	; 0x01
    46aa:	82 81       	ldd	r24, Z+2	; 0x02
    46ac:	93 81       	ldd	r25, Z+3	; 0x03
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	3f ef       	ldi	r19, 0xFF	; 255
    46b2:	4f e7       	ldi	r20, 0x7F	; 127
    46b4:	57 e4       	ldi	r21, 0x47	; 71
    46b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ba:	18 16       	cp	r1, r24
    46bc:	0c f0       	brlt	.+2      	; 0x46c0 <main+0x4be>
    46be:	43 c0       	rjmp	.+134    	; 0x4746 <main+0x544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c0:	fe 01       	movw	r30, r28
    46c2:	e3 59       	subi	r30, 0x93	; 147
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	60 81       	ld	r22, Z
    46c8:	71 81       	ldd	r23, Z+1	; 0x01
    46ca:	82 81       	ldd	r24, Z+2	; 0x02
    46cc:	93 81       	ldd	r25, Z+3	; 0x03
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	40 e2       	ldi	r20, 0x20	; 32
    46d4:	51 e4       	ldi	r21, 0x41	; 65
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	8e 01       	movw	r16, r28
    46e0:	09 59       	subi	r16, 0x99	; 153
    46e2:	1f 4f       	sbci	r17, 0xFF	; 255
    46e4:	bc 01       	movw	r22, r24
    46e6:	cd 01       	movw	r24, r26
    46e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	f8 01       	movw	r30, r16
    46f2:	91 83       	std	Z+1, r25	; 0x01
    46f4:	80 83       	st	Z, r24
    46f6:	1f c0       	rjmp	.+62     	; 0x4736 <main+0x534>
    46f8:	fe 01       	movw	r30, r28
    46fa:	eb 59       	subi	r30, 0x9B	; 155
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	88 ec       	ldi	r24, 0xC8	; 200
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	91 83       	std	Z+1, r25	; 0x01
    4704:	80 83       	st	Z, r24
    4706:	fe 01       	movw	r30, r28
    4708:	eb 59       	subi	r30, 0x9B	; 155
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	01 97       	sbiw	r24, 0x01	; 1
    4712:	f1 f7       	brne	.-4      	; 0x4710 <main+0x50e>
    4714:	fe 01       	movw	r30, r28
    4716:	eb 59       	subi	r30, 0x9B	; 155
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    471e:	de 01       	movw	r26, r28
    4720:	a9 59       	subi	r26, 0x99	; 153
    4722:	bf 4f       	sbci	r27, 0xFF	; 255
    4724:	fe 01       	movw	r30, r28
    4726:	e9 59       	subi	r30, 0x99	; 153
    4728:	ff 4f       	sbci	r31, 0xFF	; 255
    472a:	80 81       	ld	r24, Z
    472c:	91 81       	ldd	r25, Z+1	; 0x01
    472e:	01 97       	sbiw	r24, 0x01	; 1
    4730:	11 96       	adiw	r26, 0x01	; 1
    4732:	9c 93       	st	X, r25
    4734:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4736:	fe 01       	movw	r30, r28
    4738:	e9 59       	subi	r30, 0x99	; 153
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	80 81       	ld	r24, Z
    473e:	91 81       	ldd	r25, Z+1	; 0x01
    4740:	00 97       	sbiw	r24, 0x00	; 0
    4742:	d1 f6       	brne	.-76     	; 0x46f8 <main+0x4f6>
    4744:	27 c0       	rjmp	.+78     	; 0x4794 <main+0x592>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4746:	8e 01       	movw	r16, r28
    4748:	09 59       	subi	r16, 0x99	; 153
    474a:	1f 4f       	sbci	r17, 0xFF	; 255
    474c:	fe 01       	movw	r30, r28
    474e:	e7 59       	subi	r30, 0x97	; 151
    4750:	ff 4f       	sbci	r31, 0xFF	; 255
    4752:	60 81       	ld	r22, Z
    4754:	71 81       	ldd	r23, Z+1	; 0x01
    4756:	82 81       	ldd	r24, Z+2	; 0x02
    4758:	93 81       	ldd	r25, Z+3	; 0x03
    475a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475e:	dc 01       	movw	r26, r24
    4760:	cb 01       	movw	r24, r22
    4762:	f8 01       	movw	r30, r16
    4764:	91 83       	std	Z+1, r25	; 0x01
    4766:	80 83       	st	Z, r24
    4768:	de 01       	movw	r26, r28
    476a:	ad 59       	subi	r26, 0x9D	; 157
    476c:	bf 4f       	sbci	r27, 0xFF	; 255
    476e:	fe 01       	movw	r30, r28
    4770:	e9 59       	subi	r30, 0x99	; 153
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 81       	ld	r24, Z
    4776:	91 81       	ldd	r25, Z+1	; 0x01
    4778:	8d 93       	st	X+, r24
    477a:	9c 93       	st	X, r25
    477c:	fe 01       	movw	r30, r28
    477e:	ed 59       	subi	r30, 0x9D	; 157
    4780:	ff 4f       	sbci	r31, 0xFF	; 255
    4782:	80 81       	ld	r24, Z
    4784:	91 81       	ldd	r25, Z+1	; 0x01
    4786:	01 97       	sbiw	r24, 0x01	; 1
    4788:	f1 f7       	brne	.-4      	; 0x4786 <main+0x584>
    478a:	fe 01       	movw	r30, r28
    478c:	ed 59       	subi	r30, 0x9D	; 157
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	91 83       	std	Z+1, r25	; 0x01
    4792:	80 83       	st	Z, r24
            break;

        case '2':
            LCD_Command(0x01);
            LCD_svoidSendString("CW(LEFT)");
            while(GET_Pressed_Key()=='2') {
    4794:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4798:	82 33       	cpi	r24, 0x32	; 50
    479a:	09 f4       	brne	.+2      	; 0x479e <main+0x59c>
    479c:	46 cf       	rjmp	.-372    	; 0x462a <main+0x428>
    479e:	b6 c3       	rjmp	.+1900   	; 0x4f0c <main+0xd0a>
                _delay_ms(5);
            }
            break;

        case '3':
            LCD_Command(0x01);
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
            LCD_svoidSendString("Open Gripper");
    47a6:	80 e8       	ldi	r24, 0x80	; 128
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    47ae:	b5 c0       	rjmp	.+362    	; 0x491a <main+0x718>
            while(GET_Pressed_Key()=='3') {
                Servo2_RotateCW();
    47b0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <Servo2_RotateCW>
    47b4:	fe 01       	movw	r30, r28
    47b6:	e1 5a       	subi	r30, 0xA1	; 161
    47b8:	ff 4f       	sbci	r31, 0xFF	; 255
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	a0 ea       	ldi	r26, 0xA0	; 160
    47c0:	b0 e4       	ldi	r27, 0x40	; 64
    47c2:	80 83       	st	Z, r24
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	a2 83       	std	Z+2, r26	; 0x02
    47c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ca:	8e 01       	movw	r16, r28
    47cc:	05 5a       	subi	r16, 0xA5	; 165
    47ce:	1f 4f       	sbci	r17, 0xFF	; 255
    47d0:	fe 01       	movw	r30, r28
    47d2:	e1 5a       	subi	r30, 0xA1	; 161
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	60 81       	ld	r22, Z
    47d8:	71 81       	ldd	r23, Z+1	; 0x01
    47da:	82 81       	ldd	r24, Z+2	; 0x02
    47dc:	93 81       	ldd	r25, Z+3	; 0x03
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	4a ef       	ldi	r20, 0xFA	; 250
    47e4:	54 e4       	ldi	r21, 0x44	; 68
    47e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ea:	dc 01       	movw	r26, r24
    47ec:	cb 01       	movw	r24, r22
    47ee:	f8 01       	movw	r30, r16
    47f0:	80 83       	st	Z, r24
    47f2:	91 83       	std	Z+1, r25	; 0x01
    47f4:	a2 83       	std	Z+2, r26	; 0x02
    47f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47f8:	fe 01       	movw	r30, r28
    47fa:	e5 5a       	subi	r30, 0xA5	; 165
    47fc:	ff 4f       	sbci	r31, 0xFF	; 255
    47fe:	60 81       	ld	r22, Z
    4800:	71 81       	ldd	r23, Z+1	; 0x01
    4802:	82 81       	ldd	r24, Z+2	; 0x02
    4804:	93 81       	ldd	r25, Z+3	; 0x03
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	40 e8       	ldi	r20, 0x80	; 128
    480c:	5f e3       	ldi	r21, 0x3F	; 63
    480e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4812:	88 23       	and	r24, r24
    4814:	44 f4       	brge	.+16     	; 0x4826 <main+0x624>
		__ticks = 1;
    4816:	fe 01       	movw	r30, r28
    4818:	e7 5a       	subi	r30, 0xA7	; 167
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	91 83       	std	Z+1, r25	; 0x01
    4822:	80 83       	st	Z, r24
    4824:	64 c0       	rjmp	.+200    	; 0x48ee <main+0x6ec>
	else if (__tmp > 65535)
    4826:	fe 01       	movw	r30, r28
    4828:	e5 5a       	subi	r30, 0xA5	; 165
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	3f ef       	ldi	r19, 0xFF	; 255
    4838:	4f e7       	ldi	r20, 0x7F	; 127
    483a:	57 e4       	ldi	r21, 0x47	; 71
    483c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4840:	18 16       	cp	r1, r24
    4842:	0c f0       	brlt	.+2      	; 0x4846 <main+0x644>
    4844:	43 c0       	rjmp	.+134    	; 0x48cc <main+0x6ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4846:	fe 01       	movw	r30, r28
    4848:	e1 5a       	subi	r30, 0xA1	; 161
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	60 81       	ld	r22, Z
    484e:	71 81       	ldd	r23, Z+1	; 0x01
    4850:	82 81       	ldd	r24, Z+2	; 0x02
    4852:	93 81       	ldd	r25, Z+3	; 0x03
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e2       	ldi	r20, 0x20	; 32
    485a:	51 e4       	ldi	r21, 0x41	; 65
    485c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4860:	dc 01       	movw	r26, r24
    4862:	cb 01       	movw	r24, r22
    4864:	8e 01       	movw	r16, r28
    4866:	07 5a       	subi	r16, 0xA7	; 167
    4868:	1f 4f       	sbci	r17, 0xFF	; 255
    486a:	bc 01       	movw	r22, r24
    486c:	cd 01       	movw	r24, r26
    486e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	f8 01       	movw	r30, r16
    4878:	91 83       	std	Z+1, r25	; 0x01
    487a:	80 83       	st	Z, r24
    487c:	1f c0       	rjmp	.+62     	; 0x48bc <main+0x6ba>
    487e:	fe 01       	movw	r30, r28
    4880:	e9 5a       	subi	r30, 0xA9	; 169
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	88 ec       	ldi	r24, 0xC8	; 200
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	91 83       	std	Z+1, r25	; 0x01
    488a:	80 83       	st	Z, r24
    488c:	fe 01       	movw	r30, r28
    488e:	e9 5a       	subi	r30, 0xA9	; 169
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	01 97       	sbiw	r24, 0x01	; 1
    4898:	f1 f7       	brne	.-4      	; 0x4896 <main+0x694>
    489a:	fe 01       	movw	r30, r28
    489c:	e9 5a       	subi	r30, 0xA9	; 169
    489e:	ff 4f       	sbci	r31, 0xFF	; 255
    48a0:	91 83       	std	Z+1, r25	; 0x01
    48a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a4:	de 01       	movw	r26, r28
    48a6:	a7 5a       	subi	r26, 0xA7	; 167
    48a8:	bf 4f       	sbci	r27, 0xFF	; 255
    48aa:	fe 01       	movw	r30, r28
    48ac:	e7 5a       	subi	r30, 0xA7	; 167
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 81       	ld	r24, Z
    48b2:	91 81       	ldd	r25, Z+1	; 0x01
    48b4:	01 97       	sbiw	r24, 0x01	; 1
    48b6:	11 96       	adiw	r26, 0x01	; 1
    48b8:	9c 93       	st	X, r25
    48ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48bc:	fe 01       	movw	r30, r28
    48be:	e7 5a       	subi	r30, 0xA7	; 167
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	00 97       	sbiw	r24, 0x00	; 0
    48c8:	d1 f6       	brne	.-76     	; 0x487e <main+0x67c>
    48ca:	27 c0       	rjmp	.+78     	; 0x491a <main+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48cc:	8e 01       	movw	r16, r28
    48ce:	07 5a       	subi	r16, 0xA7	; 167
    48d0:	1f 4f       	sbci	r17, 0xFF	; 255
    48d2:	fe 01       	movw	r30, r28
    48d4:	e5 5a       	subi	r30, 0xA5	; 165
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	60 81       	ld	r22, Z
    48da:	71 81       	ldd	r23, Z+1	; 0x01
    48dc:	82 81       	ldd	r24, Z+2	; 0x02
    48de:	93 81       	ldd	r25, Z+3	; 0x03
    48e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	f8 01       	movw	r30, r16
    48ea:	91 83       	std	Z+1, r25	; 0x01
    48ec:	80 83       	st	Z, r24
    48ee:	de 01       	movw	r26, r28
    48f0:	ab 5a       	subi	r26, 0xAB	; 171
    48f2:	bf 4f       	sbci	r27, 0xFF	; 255
    48f4:	fe 01       	movw	r30, r28
    48f6:	e7 5a       	subi	r30, 0xA7	; 167
    48f8:	ff 4f       	sbci	r31, 0xFF	; 255
    48fa:	80 81       	ld	r24, Z
    48fc:	91 81       	ldd	r25, Z+1	; 0x01
    48fe:	8d 93       	st	X+, r24
    4900:	9c 93       	st	X, r25
    4902:	fe 01       	movw	r30, r28
    4904:	eb 5a       	subi	r30, 0xAB	; 171
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
    4908:	80 81       	ld	r24, Z
    490a:	91 81       	ldd	r25, Z+1	; 0x01
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <main+0x70a>
    4910:	fe 01       	movw	r30, r28
    4912:	eb 5a       	subi	r30, 0xAB	; 171
    4914:	ff 4f       	sbci	r31, 0xFF	; 255
    4916:	91 83       	std	Z+1, r25	; 0x01
    4918:	80 83       	st	Z, r24
            break;

        case '3':
            LCD_Command(0x01);
            LCD_svoidSendString("Open Gripper");
            while(GET_Pressed_Key()=='3') {
    491a:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    491e:	83 33       	cpi	r24, 0x33	; 51
    4920:	09 f4       	brne	.+2      	; 0x4924 <main+0x722>
    4922:	46 cf       	rjmp	.-372    	; 0x47b0 <main+0x5ae>
    4924:	f3 c2       	rjmp	.+1510   	; 0x4f0c <main+0xd0a>
                _delay_ms(5);
            }
            break;

        case '4':
            LCD_Command(0x01);
    4926:	81 e0       	ldi	r24, 0x01	; 1
    4928:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
            LCD_svoidSendString("close Gripper");
    492c:	8d e8       	ldi	r24, 0x8D	; 141
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4934:	b5 c0       	rjmp	.+362    	; 0x4aa0 <main+0x89e>
            while(GET_Pressed_Key()=='4') {
                Servo2_RotateCCW();
    4936:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <Servo2_RotateCCW>
    493a:	fe 01       	movw	r30, r28
    493c:	ef 5a       	subi	r30, 0xAF	; 175
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	a0 ea       	ldi	r26, 0xA0	; 160
    4946:	b0 e4       	ldi	r27, 0x40	; 64
    4948:	80 83       	st	Z, r24
    494a:	91 83       	std	Z+1, r25	; 0x01
    494c:	a2 83       	std	Z+2, r26	; 0x02
    494e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4950:	8e 01       	movw	r16, r28
    4952:	03 5b       	subi	r16, 0xB3	; 179
    4954:	1f 4f       	sbci	r17, 0xFF	; 255
    4956:	fe 01       	movw	r30, r28
    4958:	ef 5a       	subi	r30, 0xAF	; 175
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	60 81       	ld	r22, Z
    495e:	71 81       	ldd	r23, Z+1	; 0x01
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	93 81       	ldd	r25, Z+3	; 0x03
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	4a ef       	ldi	r20, 0xFA	; 250
    496a:	54 e4       	ldi	r21, 0x44	; 68
    496c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4970:	dc 01       	movw	r26, r24
    4972:	cb 01       	movw	r24, r22
    4974:	f8 01       	movw	r30, r16
    4976:	80 83       	st	Z, r24
    4978:	91 83       	std	Z+1, r25	; 0x01
    497a:	a2 83       	std	Z+2, r26	; 0x02
    497c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    497e:	fe 01       	movw	r30, r28
    4980:	e3 5b       	subi	r30, 0xB3	; 179
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	60 81       	ld	r22, Z
    4986:	71 81       	ldd	r23, Z+1	; 0x01
    4988:	82 81       	ldd	r24, Z+2	; 0x02
    498a:	93 81       	ldd	r25, Z+3	; 0x03
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	40 e8       	ldi	r20, 0x80	; 128
    4992:	5f e3       	ldi	r21, 0x3F	; 63
    4994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4998:	88 23       	and	r24, r24
    499a:	44 f4       	brge	.+16     	; 0x49ac <main+0x7aa>
		__ticks = 1;
    499c:	fe 01       	movw	r30, r28
    499e:	e5 5b       	subi	r30, 0xB5	; 181
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	91 83       	std	Z+1, r25	; 0x01
    49a8:	80 83       	st	Z, r24
    49aa:	64 c0       	rjmp	.+200    	; 0x4a74 <main+0x872>
	else if (__tmp > 65535)
    49ac:	fe 01       	movw	r30, r28
    49ae:	e3 5b       	subi	r30, 0xB3	; 179
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	60 81       	ld	r22, Z
    49b4:	71 81       	ldd	r23, Z+1	; 0x01
    49b6:	82 81       	ldd	r24, Z+2	; 0x02
    49b8:	93 81       	ldd	r25, Z+3	; 0x03
    49ba:	20 e0       	ldi	r18, 0x00	; 0
    49bc:	3f ef       	ldi	r19, 0xFF	; 255
    49be:	4f e7       	ldi	r20, 0x7F	; 127
    49c0:	57 e4       	ldi	r21, 0x47	; 71
    49c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49c6:	18 16       	cp	r1, r24
    49c8:	0c f0       	brlt	.+2      	; 0x49cc <main+0x7ca>
    49ca:	43 c0       	rjmp	.+134    	; 0x4a52 <main+0x850>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49cc:	fe 01       	movw	r30, r28
    49ce:	ef 5a       	subi	r30, 0xAF	; 175
    49d0:	ff 4f       	sbci	r31, 0xFF	; 255
    49d2:	60 81       	ld	r22, Z
    49d4:	71 81       	ldd	r23, Z+1	; 0x01
    49d6:	82 81       	ldd	r24, Z+2	; 0x02
    49d8:	93 81       	ldd	r25, Z+3	; 0x03
    49da:	20 e0       	ldi	r18, 0x00	; 0
    49dc:	30 e0       	ldi	r19, 0x00	; 0
    49de:	40 e2       	ldi	r20, 0x20	; 32
    49e0:	51 e4       	ldi	r21, 0x41	; 65
    49e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e6:	dc 01       	movw	r26, r24
    49e8:	cb 01       	movw	r24, r22
    49ea:	8e 01       	movw	r16, r28
    49ec:	05 5b       	subi	r16, 0xB5	; 181
    49ee:	1f 4f       	sbci	r17, 0xFF	; 255
    49f0:	bc 01       	movw	r22, r24
    49f2:	cd 01       	movw	r24, r26
    49f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	f8 01       	movw	r30, r16
    49fe:	91 83       	std	Z+1, r25	; 0x01
    4a00:	80 83       	st	Z, r24
    4a02:	1f c0       	rjmp	.+62     	; 0x4a42 <main+0x840>
    4a04:	fe 01       	movw	r30, r28
    4a06:	e7 5b       	subi	r30, 0xB7	; 183
    4a08:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0a:	88 ec       	ldi	r24, 0xC8	; 200
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	91 83       	std	Z+1, r25	; 0x01
    4a10:	80 83       	st	Z, r24
    4a12:	fe 01       	movw	r30, r28
    4a14:	e7 5b       	subi	r30, 0xB7	; 183
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	80 81       	ld	r24, Z
    4a1a:	91 81       	ldd	r25, Z+1	; 0x01
    4a1c:	01 97       	sbiw	r24, 0x01	; 1
    4a1e:	f1 f7       	brne	.-4      	; 0x4a1c <main+0x81a>
    4a20:	fe 01       	movw	r30, r28
    4a22:	e7 5b       	subi	r30, 0xB7	; 183
    4a24:	ff 4f       	sbci	r31, 0xFF	; 255
    4a26:	91 83       	std	Z+1, r25	; 0x01
    4a28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a2a:	de 01       	movw	r26, r28
    4a2c:	a5 5b       	subi	r26, 0xB5	; 181
    4a2e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a30:	fe 01       	movw	r30, r28
    4a32:	e5 5b       	subi	r30, 0xB5	; 181
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	80 81       	ld	r24, Z
    4a38:	91 81       	ldd	r25, Z+1	; 0x01
    4a3a:	01 97       	sbiw	r24, 0x01	; 1
    4a3c:	11 96       	adiw	r26, 0x01	; 1
    4a3e:	9c 93       	st	X, r25
    4a40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a42:	fe 01       	movw	r30, r28
    4a44:	e5 5b       	subi	r30, 0xB5	; 181
    4a46:	ff 4f       	sbci	r31, 0xFF	; 255
    4a48:	80 81       	ld	r24, Z
    4a4a:	91 81       	ldd	r25, Z+1	; 0x01
    4a4c:	00 97       	sbiw	r24, 0x00	; 0
    4a4e:	d1 f6       	brne	.-76     	; 0x4a04 <main+0x802>
    4a50:	27 c0       	rjmp	.+78     	; 0x4aa0 <main+0x89e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a52:	8e 01       	movw	r16, r28
    4a54:	05 5b       	subi	r16, 0xB5	; 181
    4a56:	1f 4f       	sbci	r17, 0xFF	; 255
    4a58:	fe 01       	movw	r30, r28
    4a5a:	e3 5b       	subi	r30, 0xB3	; 179
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	60 81       	ld	r22, Z
    4a60:	71 81       	ldd	r23, Z+1	; 0x01
    4a62:	82 81       	ldd	r24, Z+2	; 0x02
    4a64:	93 81       	ldd	r25, Z+3	; 0x03
    4a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6a:	dc 01       	movw	r26, r24
    4a6c:	cb 01       	movw	r24, r22
    4a6e:	f8 01       	movw	r30, r16
    4a70:	91 83       	std	Z+1, r25	; 0x01
    4a72:	80 83       	st	Z, r24
    4a74:	de 01       	movw	r26, r28
    4a76:	a9 5b       	subi	r26, 0xB9	; 185
    4a78:	bf 4f       	sbci	r27, 0xFF	; 255
    4a7a:	fe 01       	movw	r30, r28
    4a7c:	e5 5b       	subi	r30, 0xB5	; 181
    4a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a80:	80 81       	ld	r24, Z
    4a82:	91 81       	ldd	r25, Z+1	; 0x01
    4a84:	8d 93       	st	X+, r24
    4a86:	9c 93       	st	X, r25
    4a88:	fe 01       	movw	r30, r28
    4a8a:	e9 5b       	subi	r30, 0xB9	; 185
    4a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8e:	80 81       	ld	r24, Z
    4a90:	91 81       	ldd	r25, Z+1	; 0x01
    4a92:	01 97       	sbiw	r24, 0x01	; 1
    4a94:	f1 f7       	brne	.-4      	; 0x4a92 <main+0x890>
    4a96:	fe 01       	movw	r30, r28
    4a98:	e9 5b       	subi	r30, 0xB9	; 185
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	91 83       	std	Z+1, r25	; 0x01
    4a9e:	80 83       	st	Z, r24
            break;

        case '4':
            LCD_Command(0x01);
            LCD_svoidSendString("close Gripper");
            while(GET_Pressed_Key()=='4') {
    4aa0:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4aa4:	84 33       	cpi	r24, 0x34	; 52
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <main+0x8a8>
    4aa8:	46 cf       	rjmp	.-372    	; 0x4936 <main+0x734>
    4aaa:	30 c2       	rjmp	.+1120   	; 0x4f0c <main+0xd0a>
                _delay_ms(5);
            }
            break;

            case '5':
                LCD_Command(0x01);
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
                LCD_svoidSendString("BACKWARD");
    4ab2:	8b e9       	ldi	r24, 0x9B	; 155
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4aba:	88 c0       	rjmp	.+272    	; 0x4bcc <main+0x9ca>
                while(GET_Pressed_Key()=='5') {
                    STEPPER_voidStepCW(STEPPER1);
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <STEPPER_voidStepCW>
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	ed 5b       	subi	r30, 0xBD	; 189
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	a0 e0       	ldi	r26, 0x00	; 0
    4ace:	b0 e4       	ldi	r27, 0x40	; 64
    4ad0:	80 83       	st	Z, r24
    4ad2:	91 83       	std	Z+1, r25	; 0x01
    4ad4:	a2 83       	std	Z+2, r26	; 0x02
    4ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad8:	8e 01       	movw	r16, r28
    4ada:	01 5c       	subi	r16, 0xC1	; 193
    4adc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ade:	fe 01       	movw	r30, r28
    4ae0:	ed 5b       	subi	r30, 0xBD	; 189
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	60 81       	ld	r22, Z
    4ae6:	71 81       	ldd	r23, Z+1	; 0x01
    4ae8:	82 81       	ldd	r24, Z+2	; 0x02
    4aea:	93 81       	ldd	r25, Z+3	; 0x03
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	4a ef       	ldi	r20, 0xFA	; 250
    4af2:	54 e4       	ldi	r21, 0x44	; 68
    4af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	f8 01       	movw	r30, r16
    4afe:	80 83       	st	Z, r24
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	a2 83       	std	Z+2, r26	; 0x02
    4b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b06:	fe 01       	movw	r30, r28
    4b08:	ff 96       	adiw	r30, 0x3f	; 63
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e8       	ldi	r20, 0x80	; 128
    4b18:	5f e3       	ldi	r21, 0x3F	; 63
    4b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b1e:	88 23       	and	r24, r24
    4b20:	2c f4       	brge	.+10     	; 0x4b2c <main+0x92a>
		__ticks = 1;
    4b22:	81 e0       	ldi	r24, 0x01	; 1
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	9e af       	std	Y+62, r25	; 0x3e
    4b28:	8d af       	std	Y+61, r24	; 0x3d
    4b2a:	46 c0       	rjmp	.+140    	; 0x4bb8 <main+0x9b6>
	else if (__tmp > 65535)
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	ff 96       	adiw	r30, 0x3f	; 63
    4b30:	60 81       	ld	r22, Z
    4b32:	71 81       	ldd	r23, Z+1	; 0x01
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	3f ef       	ldi	r19, 0xFF	; 255
    4b3c:	4f e7       	ldi	r20, 0x7F	; 127
    4b3e:	57 e4       	ldi	r21, 0x47	; 71
    4b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b44:	18 16       	cp	r1, r24
    4b46:	64 f5       	brge	.+88     	; 0x4ba0 <main+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b48:	fe 01       	movw	r30, r28
    4b4a:	ed 5b       	subi	r30, 0xBD	; 189
    4b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	93 81       	ldd	r25, Z+3	; 0x03
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	40 e2       	ldi	r20, 0x20	; 32
    4b5c:	51 e4       	ldi	r21, 0x41	; 65
    4b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b62:	dc 01       	movw	r26, r24
    4b64:	cb 01       	movw	r24, r22
    4b66:	bc 01       	movw	r22, r24
    4b68:	cd 01       	movw	r24, r26
    4b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	9e af       	std	Y+62, r25	; 0x3e
    4b74:	8d af       	std	Y+61, r24	; 0x3d
    4b76:	0f c0       	rjmp	.+30     	; 0x4b96 <main+0x994>
    4b78:	88 ec       	ldi	r24, 0xC8	; 200
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	9c af       	std	Y+60, r25	; 0x3c
    4b7e:	8b af       	std	Y+59, r24	; 0x3b
    4b80:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b82:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b84:	01 97       	sbiw	r24, 0x01	; 1
    4b86:	f1 f7       	brne	.-4      	; 0x4b84 <main+0x982>
    4b88:	9c af       	std	Y+60, r25	; 0x3c
    4b8a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b90:	01 97       	sbiw	r24, 0x01	; 1
    4b92:	9e af       	std	Y+62, r25	; 0x3e
    4b94:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b96:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b98:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	69 f7       	brne	.-38     	; 0x4b78 <main+0x976>
    4b9e:	16 c0       	rjmp	.+44     	; 0x4bcc <main+0x9ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	ff 96       	adiw	r30, 0x3f	; 63
    4ba4:	60 81       	ld	r22, Z
    4ba6:	71 81       	ldd	r23, Z+1	; 0x01
    4ba8:	82 81       	ldd	r24, Z+2	; 0x02
    4baa:	93 81       	ldd	r25, Z+3	; 0x03
    4bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb0:	dc 01       	movw	r26, r24
    4bb2:	cb 01       	movw	r24, r22
    4bb4:	9e af       	std	Y+62, r25	; 0x3e
    4bb6:	8d af       	std	Y+61, r24	; 0x3d
    4bb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    4bba:	9e ad       	ldd	r25, Y+62	; 0x3e
    4bbc:	9a af       	std	Y+58, r25	; 0x3a
    4bbe:	89 af       	std	Y+57, r24	; 0x39
    4bc0:	89 ad       	ldd	r24, Y+57	; 0x39
    4bc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    4bc4:	01 97       	sbiw	r24, 0x01	; 1
    4bc6:	f1 f7       	brne	.-4      	; 0x4bc4 <main+0x9c2>
    4bc8:	9a af       	std	Y+58, r25	; 0x3a
    4bca:	89 af       	std	Y+57, r24	; 0x39
            break;

            case '5':
                LCD_Command(0x01);
                LCD_svoidSendString("BACKWARD");
                while(GET_Pressed_Key()=='5') {
    4bcc:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4bd0:	85 33       	cpi	r24, 0x35	; 53
    4bd2:	09 f4       	brne	.+2      	; 0x4bd6 <main+0x9d4>
    4bd4:	73 cf       	rjmp	.-282    	; 0x4abc <main+0x8ba>
    4bd6:	9a c1       	rjmp	.+820    	; 0x4f0c <main+0xd0a>
                    _delay_ms(2); // small delay to avoid bouncing
                }
                break;

            case '6':
                LCD_Command(0x01);
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
                LCD_svoidSendString("FORWARD");
    4bde:	84 ea       	ldi	r24, 0xA4	; 164
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4be6:	75 c0       	rjmp	.+234    	; 0x4cd2 <main+0xad0>
                while(GET_Pressed_Key()=='6') {
                    STEPPER_voidStepACW(STEPPER1);
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	0e 94 c9 29 	call	0x5392	; 0x5392 <STEPPER_voidStepACW>
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	a0 e0       	ldi	r26, 0x00	; 0
    4bf4:	b0 e4       	ldi	r27, 0x40	; 64
    4bf6:	8d ab       	std	Y+53, r24	; 0x35
    4bf8:	9e ab       	std	Y+54, r25	; 0x36
    4bfa:	af ab       	std	Y+55, r26	; 0x37
    4bfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bfe:	6d a9       	ldd	r22, Y+53	; 0x35
    4c00:	7e a9       	ldd	r23, Y+54	; 0x36
    4c02:	8f a9       	ldd	r24, Y+55	; 0x37
    4c04:	98 ad       	ldd	r25, Y+56	; 0x38
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	4a ef       	ldi	r20, 0xFA	; 250
    4c0c:	54 e4       	ldi	r21, 0x44	; 68
    4c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	89 ab       	std	Y+49, r24	; 0x31
    4c18:	9a ab       	std	Y+50, r25	; 0x32
    4c1a:	ab ab       	std	Y+51, r26	; 0x33
    4c1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    4c20:	7a a9       	ldd	r23, Y+50	; 0x32
    4c22:	8b a9       	ldd	r24, Y+51	; 0x33
    4c24:	9c a9       	ldd	r25, Y+52	; 0x34
    4c26:	20 e0       	ldi	r18, 0x00	; 0
    4c28:	30 e0       	ldi	r19, 0x00	; 0
    4c2a:	40 e8       	ldi	r20, 0x80	; 128
    4c2c:	5f e3       	ldi	r21, 0x3F	; 63
    4c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c32:	88 23       	and	r24, r24
    4c34:	2c f4       	brge	.+10     	; 0x4c40 <main+0xa3e>
		__ticks = 1;
    4c36:	81 e0       	ldi	r24, 0x01	; 1
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	98 ab       	std	Y+48, r25	; 0x30
    4c3c:	8f a7       	std	Y+47, r24	; 0x2f
    4c3e:	3f c0       	rjmp	.+126    	; 0x4cbe <main+0xabc>
	else if (__tmp > 65535)
    4c40:	69 a9       	ldd	r22, Y+49	; 0x31
    4c42:	7a a9       	ldd	r23, Y+50	; 0x32
    4c44:	8b a9       	ldd	r24, Y+51	; 0x33
    4c46:	9c a9       	ldd	r25, Y+52	; 0x34
    4c48:	20 e0       	ldi	r18, 0x00	; 0
    4c4a:	3f ef       	ldi	r19, 0xFF	; 255
    4c4c:	4f e7       	ldi	r20, 0x7F	; 127
    4c4e:	57 e4       	ldi	r21, 0x47	; 71
    4c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c54:	18 16       	cp	r1, r24
    4c56:	4c f5       	brge	.+82     	; 0x4caa <main+0xaa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c58:	6d a9       	ldd	r22, Y+53	; 0x35
    4c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    4c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    4c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    4c60:	20 e0       	ldi	r18, 0x00	; 0
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	40 e2       	ldi	r20, 0x20	; 32
    4c66:	51 e4       	ldi	r21, 0x41	; 65
    4c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6c:	dc 01       	movw	r26, r24
    4c6e:	cb 01       	movw	r24, r22
    4c70:	bc 01       	movw	r22, r24
    4c72:	cd 01       	movw	r24, r26
    4c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c78:	dc 01       	movw	r26, r24
    4c7a:	cb 01       	movw	r24, r22
    4c7c:	98 ab       	std	Y+48, r25	; 0x30
    4c7e:	8f a7       	std	Y+47, r24	; 0x2f
    4c80:	0f c0       	rjmp	.+30     	; 0x4ca0 <main+0xa9e>
    4c82:	88 ec       	ldi	r24, 0xC8	; 200
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	9e a7       	std	Y+46, r25	; 0x2e
    4c88:	8d a7       	std	Y+45, r24	; 0x2d
    4c8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c8e:	01 97       	sbiw	r24, 0x01	; 1
    4c90:	f1 f7       	brne	.-4      	; 0x4c8e <main+0xa8c>
    4c92:	9e a7       	std	Y+46, r25	; 0x2e
    4c94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c98:	98 a9       	ldd	r25, Y+48	; 0x30
    4c9a:	01 97       	sbiw	r24, 0x01	; 1
    4c9c:	98 ab       	std	Y+48, r25	; 0x30
    4c9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	69 f7       	brne	.-38     	; 0x4c82 <main+0xa80>
    4ca8:	14 c0       	rjmp	.+40     	; 0x4cd2 <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4caa:	69 a9       	ldd	r22, Y+49	; 0x31
    4cac:	7a a9       	ldd	r23, Y+50	; 0x32
    4cae:	8b a9       	ldd	r24, Y+51	; 0x33
    4cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    4cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	98 ab       	std	Y+48, r25	; 0x30
    4cbc:	8f a7       	std	Y+47, r24	; 0x2f
    4cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    4cc2:	9c a7       	std	Y+44, r25	; 0x2c
    4cc4:	8b a7       	std	Y+43, r24	; 0x2b
    4cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4cca:	01 97       	sbiw	r24, 0x01	; 1
    4ccc:	f1 f7       	brne	.-4      	; 0x4cca <main+0xac8>
    4cce:	9c a7       	std	Y+44, r25	; 0x2c
    4cd0:	8b a7       	std	Y+43, r24	; 0x2b
                break;

            case '6':
                LCD_Command(0x01);
                LCD_svoidSendString("FORWARD");
                while(GET_Pressed_Key()=='6') {
    4cd2:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4cd6:	86 33       	cpi	r24, 0x36	; 54
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <main+0xada>
    4cda:	86 cf       	rjmp	.-244    	; 0x4be8 <main+0x9e6>
    4cdc:	17 c1       	rjmp	.+558    	; 0x4f0c <main+0xd0a>
                    _delay_ms(2);
                }
                break;

            case '7':
                LCD_Command(0x01);
    4cde:	81 e0       	ldi	r24, 0x01	; 1
    4ce0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
                LCD_svoidSendString("DOWN");
    4ce4:	8c ea       	ldi	r24, 0xAC	; 172
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4cec:	75 c0       	rjmp	.+234    	; 0x4dd8 <main+0xbd6>
                while(GET_Pressed_Key()=='7') {
                    STEPPER_voidStepCW(STEPPER2);
    4cee:	82 e0       	ldi	r24, 0x02	; 2
    4cf0:	0e 94 6a 28 	call	0x50d4	; 0x50d4 <STEPPER_voidStepCW>
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	a0 e0       	ldi	r26, 0x00	; 0
    4cfa:	b0 e4       	ldi	r27, 0x40	; 64
    4cfc:	8f a3       	std	Y+39, r24	; 0x27
    4cfe:	98 a7       	std	Y+40, r25	; 0x28
    4d00:	a9 a7       	std	Y+41, r26	; 0x29
    4d02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d04:	6f a1       	ldd	r22, Y+39	; 0x27
    4d06:	78 a5       	ldd	r23, Y+40	; 0x28
    4d08:	89 a5       	ldd	r24, Y+41	; 0x29
    4d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	4a ef       	ldi	r20, 0xFA	; 250
    4d12:	54 e4       	ldi	r21, 0x44	; 68
    4d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d18:	dc 01       	movw	r26, r24
    4d1a:	cb 01       	movw	r24, r22
    4d1c:	8b a3       	std	Y+35, r24	; 0x23
    4d1e:	9c a3       	std	Y+36, r25	; 0x24
    4d20:	ad a3       	std	Y+37, r26	; 0x25
    4d22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d24:	6b a1       	ldd	r22, Y+35	; 0x23
    4d26:	7c a1       	ldd	r23, Y+36	; 0x24
    4d28:	8d a1       	ldd	r24, Y+37	; 0x25
    4d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	40 e8       	ldi	r20, 0x80	; 128
    4d32:	5f e3       	ldi	r21, 0x3F	; 63
    4d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d38:	88 23       	and	r24, r24
    4d3a:	2c f4       	brge	.+10     	; 0x4d46 <main+0xb44>
		__ticks = 1;
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	9a a3       	std	Y+34, r25	; 0x22
    4d42:	89 a3       	std	Y+33, r24	; 0x21
    4d44:	3f c0       	rjmp	.+126    	; 0x4dc4 <main+0xbc2>
	else if (__tmp > 65535)
    4d46:	6b a1       	ldd	r22, Y+35	; 0x23
    4d48:	7c a1       	ldd	r23, Y+36	; 0x24
    4d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    4d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	3f ef       	ldi	r19, 0xFF	; 255
    4d52:	4f e7       	ldi	r20, 0x7F	; 127
    4d54:	57 e4       	ldi	r21, 0x47	; 71
    4d56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d5a:	18 16       	cp	r1, r24
    4d5c:	4c f5       	brge	.+82     	; 0x4db0 <main+0xbae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    4d60:	78 a5       	ldd	r23, Y+40	; 0x28
    4d62:	89 a5       	ldd	r24, Y+41	; 0x29
    4d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e2       	ldi	r20, 0x20	; 32
    4d6c:	51 e4       	ldi	r21, 0x41	; 65
    4d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d72:	dc 01       	movw	r26, r24
    4d74:	cb 01       	movw	r24, r22
    4d76:	bc 01       	movw	r22, r24
    4d78:	cd 01       	movw	r24, r26
    4d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7e:	dc 01       	movw	r26, r24
    4d80:	cb 01       	movw	r24, r22
    4d82:	9a a3       	std	Y+34, r25	; 0x22
    4d84:	89 a3       	std	Y+33, r24	; 0x21
    4d86:	0f c0       	rjmp	.+30     	; 0x4da6 <main+0xba4>
    4d88:	88 ec       	ldi	r24, 0xC8	; 200
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	98 a3       	std	Y+32, r25	; 0x20
    4d8e:	8f 8f       	std	Y+31, r24	; 0x1f
    4d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d92:	98 a1       	ldd	r25, Y+32	; 0x20
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <main+0xb92>
    4d98:	98 a3       	std	Y+32, r25	; 0x20
    4d9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d9c:	89 a1       	ldd	r24, Y+33	; 0x21
    4d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    4da0:	01 97       	sbiw	r24, 0x01	; 1
    4da2:	9a a3       	std	Y+34, r25	; 0x22
    4da4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da6:	89 a1       	ldd	r24, Y+33	; 0x21
    4da8:	9a a1       	ldd	r25, Y+34	; 0x22
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	69 f7       	brne	.-38     	; 0x4d88 <main+0xb86>
    4dae:	14 c0       	rjmp	.+40     	; 0x4dd8 <main+0xbd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db0:	6b a1       	ldd	r22, Y+35	; 0x23
    4db2:	7c a1       	ldd	r23, Y+36	; 0x24
    4db4:	8d a1       	ldd	r24, Y+37	; 0x25
    4db6:	9e a1       	ldd	r25, Y+38	; 0x26
    4db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	cb 01       	movw	r24, r22
    4dc0:	9a a3       	std	Y+34, r25	; 0x22
    4dc2:	89 a3       	std	Y+33, r24	; 0x21
    4dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    4dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    4dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    4dca:	8d 8f       	std	Y+29, r24	; 0x1d
    4dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4dd0:	01 97       	sbiw	r24, 0x01	; 1
    4dd2:	f1 f7       	brne	.-4      	; 0x4dd0 <main+0xbce>
    4dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    4dd6:	8d 8f       	std	Y+29, r24	; 0x1d
                break;

            case '7':
                LCD_Command(0x01);
                LCD_svoidSendString("DOWN");
                while(GET_Pressed_Key()=='7') {
    4dd8:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4ddc:	87 33       	cpi	r24, 0x37	; 55
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <main+0xbe0>
    4de0:	86 cf       	rjmp	.-244    	; 0x4cee <main+0xaec>
    4de2:	94 c0       	rjmp	.+296    	; 0x4f0c <main+0xd0a>
                    _delay_ms(2);
                }
                break;

            case '8':
                LCD_Command(0x01);
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
                LCD_svoidSendString("UP");
    4dea:	81 eb       	ldi	r24, 0xB1	; 177
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4df2:	75 c0       	rjmp	.+234    	; 0x4ede <main+0xcdc>
                while(GET_Pressed_Key()=='8') {
                    STEPPER_voidStepACW(STEPPER2);
    4df4:	82 e0       	ldi	r24, 0x02	; 2
    4df6:	0e 94 c9 29 	call	0x5392	; 0x5392 <STEPPER_voidStepACW>
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	a0 e0       	ldi	r26, 0x00	; 0
    4e00:	b0 e4       	ldi	r27, 0x40	; 64
    4e02:	89 8f       	std	Y+25, r24	; 0x19
    4e04:	9a 8f       	std	Y+26, r25	; 0x1a
    4e06:	ab 8f       	std	Y+27, r26	; 0x1b
    4e08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    4e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	4a ef       	ldi	r20, 0xFA	; 250
    4e18:	54 e4       	ldi	r21, 0x44	; 68
    4e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e1e:	dc 01       	movw	r26, r24
    4e20:	cb 01       	movw	r24, r22
    4e22:	8d 8b       	std	Y+21, r24	; 0x15
    4e24:	9e 8b       	std	Y+22, r25	; 0x16
    4e26:	af 8b       	std	Y+23, r26	; 0x17
    4e28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e30:	98 8d       	ldd	r25, Y+24	; 0x18
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	40 e8       	ldi	r20, 0x80	; 128
    4e38:	5f e3       	ldi	r21, 0x3F	; 63
    4e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e3e:	88 23       	and	r24, r24
    4e40:	2c f4       	brge	.+10     	; 0x4e4c <main+0xc4a>
		__ticks = 1;
    4e42:	81 e0       	ldi	r24, 0x01	; 1
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	9c 8b       	std	Y+20, r25	; 0x14
    4e48:	8b 8b       	std	Y+19, r24	; 0x13
    4e4a:	3f c0       	rjmp	.+126    	; 0x4eca <main+0xcc8>
	else if (__tmp > 65535)
    4e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e50:	8f 89       	ldd	r24, Y+23	; 0x17
    4e52:	98 8d       	ldd	r25, Y+24	; 0x18
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	3f ef       	ldi	r19, 0xFF	; 255
    4e58:	4f e7       	ldi	r20, 0x7F	; 127
    4e5a:	57 e4       	ldi	r21, 0x47	; 71
    4e5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e60:	18 16       	cp	r1, r24
    4e62:	4c f5       	brge	.+82     	; 0x4eb6 <main+0xcb4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e64:	69 8d       	ldd	r22, Y+25	; 0x19
    4e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e6c:	20 e0       	ldi	r18, 0x00	; 0
    4e6e:	30 e0       	ldi	r19, 0x00	; 0
    4e70:	40 e2       	ldi	r20, 0x20	; 32
    4e72:	51 e4       	ldi	r21, 0x41	; 65
    4e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e78:	dc 01       	movw	r26, r24
    4e7a:	cb 01       	movw	r24, r22
    4e7c:	bc 01       	movw	r22, r24
    4e7e:	cd 01       	movw	r24, r26
    4e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e84:	dc 01       	movw	r26, r24
    4e86:	cb 01       	movw	r24, r22
    4e88:	9c 8b       	std	Y+20, r25	; 0x14
    4e8a:	8b 8b       	std	Y+19, r24	; 0x13
    4e8c:	0f c0       	rjmp	.+30     	; 0x4eac <main+0xcaa>
    4e8e:	88 ec       	ldi	r24, 0xC8	; 200
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	9a 8b       	std	Y+18, r25	; 0x12
    4e94:	89 8b       	std	Y+17, r24	; 0x11
    4e96:	89 89       	ldd	r24, Y+17	; 0x11
    4e98:	9a 89       	ldd	r25, Y+18	; 0x12
    4e9a:	01 97       	sbiw	r24, 0x01	; 1
    4e9c:	f1 f7       	brne	.-4      	; 0x4e9a <main+0xc98>
    4e9e:	9a 8b       	std	Y+18, r25	; 0x12
    4ea0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ea6:	01 97       	sbiw	r24, 0x01	; 1
    4ea8:	9c 8b       	std	Y+20, r25	; 0x14
    4eaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eac:	8b 89       	ldd	r24, Y+19	; 0x13
    4eae:	9c 89       	ldd	r25, Y+20	; 0x14
    4eb0:	00 97       	sbiw	r24, 0x00	; 0
    4eb2:	69 f7       	brne	.-38     	; 0x4e8e <main+0xc8c>
    4eb4:	14 c0       	rjmp	.+40     	; 0x4ede <main+0xcdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    4eba:	8f 89       	ldd	r24, Y+23	; 0x17
    4ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	9c 8b       	std	Y+20, r25	; 0x14
    4ec8:	8b 8b       	std	Y+19, r24	; 0x13
    4eca:	8b 89       	ldd	r24, Y+19	; 0x13
    4ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    4ece:	98 8b       	std	Y+16, r25	; 0x10
    4ed0:	8f 87       	std	Y+15, r24	; 0x0f
    4ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ed4:	98 89       	ldd	r25, Y+16	; 0x10
    4ed6:	01 97       	sbiw	r24, 0x01	; 1
    4ed8:	f1 f7       	brne	.-4      	; 0x4ed6 <main+0xcd4>
    4eda:	98 8b       	std	Y+16, r25	; 0x10
    4edc:	8f 87       	std	Y+15, r24	; 0x0f
                break;

            case '8':
                LCD_Command(0x01);
                LCD_svoidSendString("UP");
                while(GET_Pressed_Key()=='8') {
    4ede:	0e 94 1d 0a 	call	0x143a	; 0x143a <GET_Pressed_Key>
    4ee2:	88 33       	cpi	r24, 0x38	; 56
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <main+0xce6>
    4ee6:	86 cf       	rjmp	.-244    	; 0x4df4 <main+0xbf2>
    4ee8:	11 c0       	rjmp	.+34     	; 0x4f0c <main+0xd0a>
                    _delay_ms(2);
                }
                break;

            default:
                Servo1_Stop(); Servo2_Stop();
    4eea:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <Servo1_Stop>
    4eee:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <Servo2_Stop>
                STEPPER_voidStop(STEPPER1); STEPPER_voidStop(STEPPER2);
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	0e 94 34 28 	call	0x5068	; 0x5068 <STEPPER_voidStop>
    4ef8:	82 e0       	ldi	r24, 0x02	; 2
    4efa:	0e 94 34 28 	call	0x5068	; 0x5068 <STEPPER_voidStop>
                LCD_Command(0x01);
    4efe:	81 e0       	ldi	r24, 0x01	; 1
    4f00:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <LCD_Command>
                LCD_svoidSendString("All STOP");
    4f04:	84 eb       	ldi	r24, 0xB4	; 180
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_svoidSendString>
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	a8 e4       	ldi	r26, 0x48	; 72
    4f12:	b2 e4       	ldi	r27, 0x42	; 66
    4f14:	8b 87       	std	Y+11, r24	; 0x0b
    4f16:	9c 87       	std	Y+12, r25	; 0x0c
    4f18:	ad 87       	std	Y+13, r26	; 0x0d
    4f1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	4a ef       	ldi	r20, 0xFA	; 250
    4f2a:	54 e4       	ldi	r21, 0x44	; 68
    4f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	8f 83       	std	Y+7, r24	; 0x07
    4f36:	98 87       	std	Y+8, r25	; 0x08
    4f38:	a9 87       	std	Y+9, r26	; 0x09
    4f3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f3e:	78 85       	ldd	r23, Y+8	; 0x08
    4f40:	89 85       	ldd	r24, Y+9	; 0x09
    4f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f44:	20 e0       	ldi	r18, 0x00	; 0
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	40 e8       	ldi	r20, 0x80	; 128
    4f4a:	5f e3       	ldi	r21, 0x3F	; 63
    4f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f50:	88 23       	and	r24, r24
    4f52:	2c f4       	brge	.+10     	; 0x4f5e <main+0xd5c>
		__ticks = 1;
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	9e 83       	std	Y+6, r25	; 0x06
    4f5a:	8d 83       	std	Y+5, r24	; 0x05
    4f5c:	3f c0       	rjmp	.+126    	; 0x4fdc <main+0xdda>
	else if (__tmp > 65535)
    4f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f60:	78 85       	ldd	r23, Y+8	; 0x08
    4f62:	89 85       	ldd	r24, Y+9	; 0x09
    4f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	3f ef       	ldi	r19, 0xFF	; 255
    4f6a:	4f e7       	ldi	r20, 0x7F	; 127
    4f6c:	57 e4       	ldi	r21, 0x47	; 71
    4f6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f72:	18 16       	cp	r1, r24
    4f74:	4c f5       	brge	.+82     	; 0x4fc8 <main+0xdc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f76:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f78:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	40 e2       	ldi	r20, 0x20	; 32
    4f84:	51 e4       	ldi	r21, 0x41	; 65
    4f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f8a:	dc 01       	movw	r26, r24
    4f8c:	cb 01       	movw	r24, r22
    4f8e:	bc 01       	movw	r22, r24
    4f90:	cd 01       	movw	r24, r26
    4f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	9e 83       	std	Y+6, r25	; 0x06
    4f9c:	8d 83       	std	Y+5, r24	; 0x05
    4f9e:	0f c0       	rjmp	.+30     	; 0x4fbe <main+0xdbc>
    4fa0:	88 ec       	ldi	r24, 0xC8	; 200
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9c 83       	std	Y+4, r25	; 0x04
    4fa6:	8b 83       	std	Y+3, r24	; 0x03
    4fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    4faa:	9c 81       	ldd	r25, Y+4	; 0x04
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <main+0xdaa>
    4fb0:	9c 83       	std	Y+4, r25	; 0x04
    4fb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb8:	01 97       	sbiw	r24, 0x01	; 1
    4fba:	9e 83       	std	Y+6, r25	; 0x06
    4fbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc2:	00 97       	sbiw	r24, 0x00	; 0
    4fc4:	69 f7       	brne	.-38     	; 0x4fa0 <main+0xd9e>
    4fc6:	fa c9       	rjmp	.-3084   	; 0x43bc <main+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fc8:	6f 81       	ldd	r22, Y+7	; 0x07
    4fca:	78 85       	ldd	r23, Y+8	; 0x08
    4fcc:	89 85       	ldd	r24, Y+9	; 0x09
    4fce:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	9e 83       	std	Y+6, r25	; 0x06
    4fda:	8d 83       	std	Y+5, r24	; 0x05
    4fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4fde:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe0:	9a 83       	std	Y+2, r25	; 0x02
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	89 81       	ldd	r24, Y+1	; 0x01
    4fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <main+0xde6>
    4fec:	9a 83       	std	Y+2, r25	; 0x02
    4fee:	89 83       	std	Y+1, r24	; 0x01
    4ff0:	e5 c9       	rjmp	.-3126   	; 0x43bc <main+0x1ba>

00004ff2 <STEPPER_voidInit>:
};

// =============================
// Initialize Stepper
// =============================
void STEPPER_voidInit(u8 motor){
    4ff2:	df 93       	push	r29
    4ff4:	cf 93       	push	r28
    4ff6:	0f 92       	push	r0
    4ff8:	cd b7       	in	r28, 0x3d	; 61
    4ffa:	de b7       	in	r29, 0x3e	; 62
    4ffc:	89 83       	std	Y+1, r24	; 0x01
    if(motor == STEPPER1){
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	81 30       	cpi	r24, 0x01	; 1
    5002:	a9 f4       	brne	.+42     	; 0x502e <STEPPER_voidInit+0x3c>
        DIO_voidSetPinDirection(STEPPER1_PORT, STEPPER1_COIL_Blue,   DIO_u8_OUTPUT);
    5004:	80 e0       	ldi	r24, 0x00	; 0
    5006:	60 e0       	ldi	r22, 0x00	; 0
    5008:	41 e0       	ldi	r20, 0x01	; 1
    500a:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(STEPPER1_PORT, STEPPER1_COIL_Pink,   DIO_u8_OUTPUT);
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	61 e0       	ldi	r22, 0x01	; 1
    5012:	41 e0       	ldi	r20, 0x01	; 1
    5014:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(STEPPER1_PORT, STEPPER1_COIL_Yellow, DIO_u8_OUTPUT);
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	62 e0       	ldi	r22, 0x02	; 2
    501c:	41 e0       	ldi	r20, 0x01	; 1
    501e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(STEPPER1_PORT, STEPPER1_COIL_Orange, DIO_u8_OUTPUT);
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	63 e0       	ldi	r22, 0x03	; 3
    5026:	41 e0       	ldi	r20, 0x01	; 1
    5028:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    502c:	14 c0       	rjmp	.+40     	; 0x5056 <STEPPER_voidInit+0x64>
    }
    else{
        DIO_voidSetPinDirection(STEPPER2_PORT, STEPPER2_COIL_Blue,   DIO_u8_OUTPUT);
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	64 e0       	ldi	r22, 0x04	; 4
    5032:	41 e0       	ldi	r20, 0x01	; 1
    5034:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(STEPPER2_PORT, STEPPER2_COIL_Pink,   DIO_u8_OUTPUT);
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	65 e0       	ldi	r22, 0x05	; 5
    503c:	41 e0       	ldi	r20, 0x01	; 1
    503e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(STEPPER2_PORT, STEPPER2_COIL_Yellow, DIO_u8_OUTPUT);
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	66 e0       	ldi	r22, 0x06	; 6
    5046:	41 e0       	ldi	r20, 0x01	; 1
    5048:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(STEPPER2_PORT, STEPPER2_COIL_Orange, DIO_u8_OUTPUT);
    504c:	80 e0       	ldi	r24, 0x00	; 0
    504e:	67 e0       	ldi	r22, 0x07	; 7
    5050:	41 e0       	ldi	r20, 0x01	; 1
    5052:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    }
    STEPPER_voidStop(motor);
    5056:	89 81       	ldd	r24, Y+1	; 0x01
    5058:	88 2f       	mov	r24, r24
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	0e 94 34 28 	call	0x5068	; 0x5068 <STEPPER_voidStop>
}
    5060:	0f 90       	pop	r0
    5062:	cf 91       	pop	r28
    5064:	df 91       	pop	r29
    5066:	08 95       	ret

00005068 <STEPPER_voidStop>:

// =============================
// Stop Stepper
// =============================
void STEPPER_voidStop(u8 motor){
    5068:	df 93       	push	r29
    506a:	cf 93       	push	r28
    506c:	0f 92       	push	r0
    506e:	cd b7       	in	r28, 0x3d	; 61
    5070:	de b7       	in	r29, 0x3e	; 62
    5072:	89 83       	std	Y+1, r24	; 0x01
    if(motor == STEPPER1){
    5074:	89 81       	ldd	r24, Y+1	; 0x01
    5076:	81 30       	cpi	r24, 0x01	; 1
    5078:	a9 f4       	brne	.+42     	; 0x50a4 <STEPPER_voidStop+0x3c>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Blue,   DIO_u8_LOW);
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	60 e0       	ldi	r22, 0x00	; 0
    507e:	40 e0       	ldi	r20, 0x00	; 0
    5080:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Pink,   DIO_u8_LOW);
    5084:	80 e0       	ldi	r24, 0x00	; 0
    5086:	61 e0       	ldi	r22, 0x01	; 1
    5088:	40 e0       	ldi	r20, 0x00	; 0
    508a:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Yellow, DIO_u8_LOW);
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	62 e0       	ldi	r22, 0x02	; 2
    5092:	40 e0       	ldi	r20, 0x00	; 0
    5094:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Orange, DIO_u8_LOW);
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	63 e0       	ldi	r22, 0x03	; 3
    509c:	40 e0       	ldi	r20, 0x00	; 0
    509e:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
    50a2:	14 c0       	rjmp	.+40     	; 0x50cc <STEPPER_voidStop+0x64>
    } else {
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Blue,   DIO_u8_LOW);
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	64 e0       	ldi	r22, 0x04	; 4
    50a8:	40 e0       	ldi	r20, 0x00	; 0
    50aa:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Pink,   DIO_u8_LOW);
    50ae:	80 e0       	ldi	r24, 0x00	; 0
    50b0:	65 e0       	ldi	r22, 0x05	; 5
    50b2:	40 e0       	ldi	r20, 0x00	; 0
    50b4:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Yellow, DIO_u8_LOW);
    50b8:	80 e0       	ldi	r24, 0x00	; 0
    50ba:	66 e0       	ldi	r22, 0x06	; 6
    50bc:	40 e0       	ldi	r20, 0x00	; 0
    50be:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Orange, DIO_u8_LOW);
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	67 e0       	ldi	r22, 0x07	; 7
    50c6:	40 e0       	ldi	r20, 0x00	; 0
    50c8:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
    }
}
    50cc:	0f 90       	pop	r0
    50ce:	cf 91       	pop	r28
    50d0:	df 91       	pop	r29
    50d2:	08 95       	ret

000050d4 <STEPPER_voidStepCW>:

// =============================
// Rotate one step CW
// =============================
void STEPPER_voidStepCW(u8 motor){
    50d4:	df 93       	push	r29
    50d6:	cf 93       	push	r28
    50d8:	cd b7       	in	r28, 0x3d	; 61
    50da:	de b7       	in	r29, 0x3e	; 62
    50dc:	6f 97       	sbiw	r28, 0x1f	; 31
    50de:	0f b6       	in	r0, 0x3f	; 63
    50e0:	f8 94       	cli
    50e2:	de bf       	out	0x3e, r29	; 62
    50e4:	0f be       	out	0x3f, r0	; 63
    50e6:	cd bf       	out	0x3d, r28	; 61
    50e8:	8f 8f       	std	Y+31, r24	; 0x1f
    u8 *seq;
    u8 Blue, Pink, Yellow, Orange;

    if(motor == STEPPER1){
    50ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50ec:	81 30       	cpi	r24, 0x01	; 1
    50ee:	09 f0       	breq	.+2      	; 0x50f2 <STEPPER_voidStepCW+0x1e>
    50f0:	45 c0       	rjmp	.+138    	; 0x517c <STEPPER_voidStepCW+0xa8>
        seq = StepperFullStepSeq[step1];
    50f2:	2d ed       	ldi	r18, 0xDD	; 221
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	80 91 fe 00 	lds	r24, 0x00FE
    50fa:	88 2f       	mov	r24, r24
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	88 0f       	add	r24, r24
    5100:	99 1f       	adc	r25, r25
    5102:	88 0f       	add	r24, r24
    5104:	99 1f       	adc	r25, r25
    5106:	82 0f       	add	r24, r18
    5108:	93 1f       	adc	r25, r19
    510a:	9e 8f       	std	Y+30, r25	; 0x1e
    510c:	8d 8f       	std	Y+29, r24	; 0x1d
        Blue=seq[0]; Pink=seq[1]; Yellow=seq[2]; Orange=seq[3];
    510e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5110:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5112:	80 81       	ld	r24, Z
    5114:	8c 8f       	std	Y+28, r24	; 0x1c
    5116:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5118:	9e 8d       	ldd	r25, Y+30	; 0x1e
    511a:	fc 01       	movw	r30, r24
    511c:	31 96       	adiw	r30, 0x01	; 1
    511e:	80 81       	ld	r24, Z
    5120:	8b 8f       	std	Y+27, r24	; 0x1b
    5122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5126:	fc 01       	movw	r30, r24
    5128:	32 96       	adiw	r30, 0x02	; 2
    512a:	80 81       	ld	r24, Z
    512c:	8a 8f       	std	Y+26, r24	; 0x1a
    512e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5130:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5132:	fc 01       	movw	r30, r24
    5134:	33 96       	adiw	r30, 0x03	; 3
    5136:	80 81       	ld	r24, Z
    5138:	89 8f       	std	Y+25, r24	; 0x19
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Blue, Blue);
    513a:	80 e0       	ldi	r24, 0x00	; 0
    513c:	60 e0       	ldi	r22, 0x00	; 0
    513e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5140:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Pink, Pink);
    5144:	80 e0       	ldi	r24, 0x00	; 0
    5146:	61 e0       	ldi	r22, 0x01	; 1
    5148:	4b 8d       	ldd	r20, Y+27	; 0x1b
    514a:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Yellow, Yellow);
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	62 e0       	ldi	r22, 0x02	; 2
    5152:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5154:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Orange, Orange);
    5158:	80 e0       	ldi	r24, 0x00	; 0
    515a:	63 e0       	ldi	r22, 0x03	; 3
    515c:	49 8d       	ldd	r20, Y+25	; 0x19
    515e:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        step1 = (step1 + 1) % 4;
    5162:	80 91 fe 00 	lds	r24, 0x00FE
    5166:	88 2f       	mov	r24, r24
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	01 96       	adiw	r24, 0x01	; 1
    516c:	24 e0       	ldi	r18, 0x04	; 4
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	b9 01       	movw	r22, r18
    5172:	0e 94 3e 2b 	call	0x567c	; 0x567c <__divmodhi4>
    5176:	80 93 fe 00 	sts	0x00FE, r24
    517a:	44 c0       	rjmp	.+136    	; 0x5204 <STEPPER_voidStepCW+0x130>
    } else {
        seq = StepperFullStepSeq[step2];
    517c:	2d ed       	ldi	r18, 0xDD	; 221
    517e:	30 e0       	ldi	r19, 0x00	; 0
    5180:	80 91 ff 00 	lds	r24, 0x00FF
    5184:	88 2f       	mov	r24, r24
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	88 0f       	add	r24, r24
    518a:	99 1f       	adc	r25, r25
    518c:	88 0f       	add	r24, r24
    518e:	99 1f       	adc	r25, r25
    5190:	82 0f       	add	r24, r18
    5192:	93 1f       	adc	r25, r19
    5194:	9e 8f       	std	Y+30, r25	; 0x1e
    5196:	8d 8f       	std	Y+29, r24	; 0x1d
        Blue=seq[0]; Pink=seq[1]; Yellow=seq[2]; Orange=seq[3];
    5198:	ed 8d       	ldd	r30, Y+29	; 0x1d
    519a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    519c:	80 81       	ld	r24, Z
    519e:	8c 8f       	std	Y+28, r24	; 0x1c
    51a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51a4:	fc 01       	movw	r30, r24
    51a6:	31 96       	adiw	r30, 0x01	; 1
    51a8:	80 81       	ld	r24, Z
    51aa:	8b 8f       	std	Y+27, r24	; 0x1b
    51ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51b0:	fc 01       	movw	r30, r24
    51b2:	32 96       	adiw	r30, 0x02	; 2
    51b4:	80 81       	ld	r24, Z
    51b6:	8a 8f       	std	Y+26, r24	; 0x1a
    51b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51bc:	fc 01       	movw	r30, r24
    51be:	33 96       	adiw	r30, 0x03	; 3
    51c0:	80 81       	ld	r24, Z
    51c2:	89 8f       	std	Y+25, r24	; 0x19
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Blue, Blue);
    51c4:	80 e0       	ldi	r24, 0x00	; 0
    51c6:	64 e0       	ldi	r22, 0x04	; 4
    51c8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    51ca:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Pink, Pink);
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	65 e0       	ldi	r22, 0x05	; 5
    51d2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    51d4:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Yellow, Yellow);
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	66 e0       	ldi	r22, 0x06	; 6
    51dc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    51de:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Orange, Orange);
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	67 e0       	ldi	r22, 0x07	; 7
    51e6:	49 8d       	ldd	r20, Y+25	; 0x19
    51e8:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        step2 = (step2 + 1) % 4;
    51ec:	80 91 ff 00 	lds	r24, 0x00FF
    51f0:	88 2f       	mov	r24, r24
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	01 96       	adiw	r24, 0x01	; 1
    51f6:	24 e0       	ldi	r18, 0x04	; 4
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	b9 01       	movw	r22, r18
    51fc:	0e 94 3e 2b 	call	0x567c	; 0x567c <__divmodhi4>
    5200:	80 93 ff 00 	sts	0x00FF, r24
    5204:	80 e0       	ldi	r24, 0x00	; 0
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	aa ef       	ldi	r26, 0xFA	; 250
    520a:	b4 e4       	ldi	r27, 0x44	; 68
    520c:	8d 8b       	std	Y+21, r24	; 0x15
    520e:	9e 8b       	std	Y+22, r25	; 0x16
    5210:	af 8b       	std	Y+23, r26	; 0x17
    5212:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5214:	6d 89       	ldd	r22, Y+21	; 0x15
    5216:	7e 89       	ldd	r23, Y+22	; 0x16
    5218:	8f 89       	ldd	r24, Y+23	; 0x17
    521a:	98 8d       	ldd	r25, Y+24	; 0x18
    521c:	2b ea       	ldi	r18, 0xAB	; 171
    521e:	3a ea       	ldi	r19, 0xAA	; 170
    5220:	4a e2       	ldi	r20, 0x2A	; 42
    5222:	50 e4       	ldi	r21, 0x40	; 64
    5224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5228:	dc 01       	movw	r26, r24
    522a:	cb 01       	movw	r24, r22
    522c:	89 8b       	std	Y+17, r24	; 0x11
    522e:	9a 8b       	std	Y+18, r25	; 0x12
    5230:	ab 8b       	std	Y+19, r26	; 0x13
    5232:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5234:	69 89       	ldd	r22, Y+17	; 0x11
    5236:	7a 89       	ldd	r23, Y+18	; 0x12
    5238:	8b 89       	ldd	r24, Y+19	; 0x13
    523a:	9c 89       	ldd	r25, Y+20	; 0x14
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	40 e8       	ldi	r20, 0x80	; 128
    5242:	5f e3       	ldi	r21, 0x3F	; 63
    5244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5248:	88 23       	and	r24, r24
    524a:	1c f4       	brge	.+6      	; 0x5252 <STEPPER_voidStepCW+0x17e>
		__ticks = 1;
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	88 8b       	std	Y+16, r24	; 0x10
    5250:	91 c0       	rjmp	.+290    	; 0x5374 <STEPPER_voidStepCW+0x2a0>
	else if (__tmp > 255)
    5252:	69 89       	ldd	r22, Y+17	; 0x11
    5254:	7a 89       	ldd	r23, Y+18	; 0x12
    5256:	8b 89       	ldd	r24, Y+19	; 0x13
    5258:	9c 89       	ldd	r25, Y+20	; 0x14
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	4f e7       	ldi	r20, 0x7F	; 127
    5260:	53 e4       	ldi	r21, 0x43	; 67
    5262:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5266:	18 16       	cp	r1, r24
    5268:	0c f0       	brlt	.+2      	; 0x526c <STEPPER_voidStepCW+0x198>
    526a:	7b c0       	rjmp	.+246    	; 0x5362 <STEPPER_voidStepCW+0x28e>
	{
		_delay_ms(__us / 1000.0);
    526c:	6d 89       	ldd	r22, Y+21	; 0x15
    526e:	7e 89       	ldd	r23, Y+22	; 0x16
    5270:	8f 89       	ldd	r24, Y+23	; 0x17
    5272:	98 8d       	ldd	r25, Y+24	; 0x18
    5274:	20 e0       	ldi	r18, 0x00	; 0
    5276:	30 e0       	ldi	r19, 0x00	; 0
    5278:	4a e7       	ldi	r20, 0x7A	; 122
    527a:	54 e4       	ldi	r21, 0x44	; 68
    527c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5280:	dc 01       	movw	r26, r24
    5282:	cb 01       	movw	r24, r22
    5284:	8c 87       	std	Y+12, r24	; 0x0c
    5286:	9d 87       	std	Y+13, r25	; 0x0d
    5288:	ae 87       	std	Y+14, r26	; 0x0e
    528a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    528c:	6c 85       	ldd	r22, Y+12	; 0x0c
    528e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5290:	8e 85       	ldd	r24, Y+14	; 0x0e
    5292:	9f 85       	ldd	r25, Y+15	; 0x0f
    5294:	20 e0       	ldi	r18, 0x00	; 0
    5296:	30 e0       	ldi	r19, 0x00	; 0
    5298:	4a ef       	ldi	r20, 0xFA	; 250
    529a:	54 e4       	ldi	r21, 0x44	; 68
    529c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a0:	dc 01       	movw	r26, r24
    52a2:	cb 01       	movw	r24, r22
    52a4:	88 87       	std	Y+8, r24	; 0x08
    52a6:	99 87       	std	Y+9, r25	; 0x09
    52a8:	aa 87       	std	Y+10, r26	; 0x0a
    52aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    52ac:	68 85       	ldd	r22, Y+8	; 0x08
    52ae:	79 85       	ldd	r23, Y+9	; 0x09
    52b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    52b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	40 e8       	ldi	r20, 0x80	; 128
    52ba:	5f e3       	ldi	r21, 0x3F	; 63
    52bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52c0:	88 23       	and	r24, r24
    52c2:	2c f4       	brge	.+10     	; 0x52ce <STEPPER_voidStepCW+0x1fa>
		__ticks = 1;
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	90 e0       	ldi	r25, 0x00	; 0
    52c8:	9f 83       	std	Y+7, r25	; 0x07
    52ca:	8e 83       	std	Y+6, r24	; 0x06
    52cc:	3f c0       	rjmp	.+126    	; 0x534c <STEPPER_voidStepCW+0x278>
	else if (__tmp > 65535)
    52ce:	68 85       	ldd	r22, Y+8	; 0x08
    52d0:	79 85       	ldd	r23, Y+9	; 0x09
    52d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    52d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    52d6:	20 e0       	ldi	r18, 0x00	; 0
    52d8:	3f ef       	ldi	r19, 0xFF	; 255
    52da:	4f e7       	ldi	r20, 0x7F	; 127
    52dc:	57 e4       	ldi	r21, 0x47	; 71
    52de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52e2:	18 16       	cp	r1, r24
    52e4:	4c f5       	brge	.+82     	; 0x5338 <STEPPER_voidStepCW+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    52e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    52ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    52ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    52ee:	20 e0       	ldi	r18, 0x00	; 0
    52f0:	30 e0       	ldi	r19, 0x00	; 0
    52f2:	40 e2       	ldi	r20, 0x20	; 32
    52f4:	51 e4       	ldi	r21, 0x41	; 65
    52f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	bc 01       	movw	r22, r24
    5300:	cd 01       	movw	r24, r26
    5302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5306:	dc 01       	movw	r26, r24
    5308:	cb 01       	movw	r24, r22
    530a:	9f 83       	std	Y+7, r25	; 0x07
    530c:	8e 83       	std	Y+6, r24	; 0x06
    530e:	0f c0       	rjmp	.+30     	; 0x532e <STEPPER_voidStepCW+0x25a>
    5310:	88 ec       	ldi	r24, 0xC8	; 200
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	9d 83       	std	Y+5, r25	; 0x05
    5316:	8c 83       	std	Y+4, r24	; 0x04
    5318:	8c 81       	ldd	r24, Y+4	; 0x04
    531a:	9d 81       	ldd	r25, Y+5	; 0x05
    531c:	01 97       	sbiw	r24, 0x01	; 1
    531e:	f1 f7       	brne	.-4      	; 0x531c <STEPPER_voidStepCW+0x248>
    5320:	9d 83       	std	Y+5, r25	; 0x05
    5322:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5324:	8e 81       	ldd	r24, Y+6	; 0x06
    5326:	9f 81       	ldd	r25, Y+7	; 0x07
    5328:	01 97       	sbiw	r24, 0x01	; 1
    532a:	9f 83       	std	Y+7, r25	; 0x07
    532c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    532e:	8e 81       	ldd	r24, Y+6	; 0x06
    5330:	9f 81       	ldd	r25, Y+7	; 0x07
    5332:	00 97       	sbiw	r24, 0x00	; 0
    5334:	69 f7       	brne	.-38     	; 0x5310 <STEPPER_voidStepCW+0x23c>
    5336:	24 c0       	rjmp	.+72     	; 0x5380 <STEPPER_voidStepCW+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5338:	68 85       	ldd	r22, Y+8	; 0x08
    533a:	79 85       	ldd	r23, Y+9	; 0x09
    533c:	8a 85       	ldd	r24, Y+10	; 0x0a
    533e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5344:	dc 01       	movw	r26, r24
    5346:	cb 01       	movw	r24, r22
    5348:	9f 83       	std	Y+7, r25	; 0x07
    534a:	8e 83       	std	Y+6, r24	; 0x06
    534c:	8e 81       	ldd	r24, Y+6	; 0x06
    534e:	9f 81       	ldd	r25, Y+7	; 0x07
    5350:	9b 83       	std	Y+3, r25	; 0x03
    5352:	8a 83       	std	Y+2, r24	; 0x02
    5354:	8a 81       	ldd	r24, Y+2	; 0x02
    5356:	9b 81       	ldd	r25, Y+3	; 0x03
    5358:	01 97       	sbiw	r24, 0x01	; 1
    535a:	f1 f7       	brne	.-4      	; 0x5358 <STEPPER_voidStepCW+0x284>
    535c:	9b 83       	std	Y+3, r25	; 0x03
    535e:	8a 83       	std	Y+2, r24	; 0x02
    5360:	0f c0       	rjmp	.+30     	; 0x5380 <STEPPER_voidStepCW+0x2ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5362:	69 89       	ldd	r22, Y+17	; 0x11
    5364:	7a 89       	ldd	r23, Y+18	; 0x12
    5366:	8b 89       	ldd	r24, Y+19	; 0x13
    5368:	9c 89       	ldd	r25, Y+20	; 0x14
    536a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    536e:	dc 01       	movw	r26, r24
    5370:	cb 01       	movw	r24, r22
    5372:	88 8b       	std	Y+16, r24	; 0x10
    5374:	88 89       	ldd	r24, Y+16	; 0x10
    5376:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	8a 95       	dec	r24
    537c:	f1 f7       	brne	.-4      	; 0x537a <STEPPER_voidStepCW+0x2a6>
    537e:	89 83       	std	Y+1, r24	; 0x01
    }

    _delay_us(STEP_DELAY_US);
}
    5380:	6f 96       	adiw	r28, 0x1f	; 31
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	de bf       	out	0x3e, r29	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	cf 91       	pop	r28
    538e:	df 91       	pop	r29
    5390:	08 95       	ret

00005392 <STEPPER_voidStepACW>:

// =============================
// Rotate one step ACW
// =============================
void STEPPER_voidStepACW(u8 motor){
    5392:	df 93       	push	r29
    5394:	cf 93       	push	r28
    5396:	cd b7       	in	r28, 0x3d	; 61
    5398:	de b7       	in	r29, 0x3e	; 62
    539a:	6f 97       	sbiw	r28, 0x1f	; 31
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	f8 94       	cli
    53a0:	de bf       	out	0x3e, r29	; 62
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	cd bf       	out	0x3d, r28	; 61
    53a6:	8f 8f       	std	Y+31, r24	; 0x1f
    u8 *seq;
    u8 Blue, Pink, Yellow, Orange;

    if(motor == STEPPER1){
    53a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53aa:	81 30       	cpi	r24, 0x01	; 1
    53ac:	09 f0       	breq	.+2      	; 0x53b0 <STEPPER_voidStepACW+0x1e>
    53ae:	46 c0       	rjmp	.+140    	; 0x543c <STEPPER_voidStepACW+0xaa>
        seq = StepperFullStepSeq[step1];
    53b0:	2d ed       	ldi	r18, 0xDD	; 221
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	80 91 fe 00 	lds	r24, 0x00FE
    53b8:	88 2f       	mov	r24, r24
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	88 0f       	add	r24, r24
    53c2:	99 1f       	adc	r25, r25
    53c4:	82 0f       	add	r24, r18
    53c6:	93 1f       	adc	r25, r19
    53c8:	9e 8f       	std	Y+30, r25	; 0x1e
    53ca:	8d 8f       	std	Y+29, r24	; 0x1d
        Blue=seq[0]; Pink=seq[1]; Yellow=seq[2]; Orange=seq[3];
    53cc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    53ce:	fe 8d       	ldd	r31, Y+30	; 0x1e
    53d0:	80 81       	ld	r24, Z
    53d2:	8c 8f       	std	Y+28, r24	; 0x1c
    53d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53d8:	fc 01       	movw	r30, r24
    53da:	31 96       	adiw	r30, 0x01	; 1
    53dc:	80 81       	ld	r24, Z
    53de:	8b 8f       	std	Y+27, r24	; 0x1b
    53e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53e4:	fc 01       	movw	r30, r24
    53e6:	32 96       	adiw	r30, 0x02	; 2
    53e8:	80 81       	ld	r24, Z
    53ea:	8a 8f       	std	Y+26, r24	; 0x1a
    53ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53f0:	fc 01       	movw	r30, r24
    53f2:	33 96       	adiw	r30, 0x03	; 3
    53f4:	80 81       	ld	r24, Z
    53f6:	89 8f       	std	Y+25, r24	; 0x19
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Blue, Blue);
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	60 e0       	ldi	r22, 0x00	; 0
    53fc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    53fe:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Pink, Pink);
    5402:	80 e0       	ldi	r24, 0x00	; 0
    5404:	61 e0       	ldi	r22, 0x01	; 1
    5406:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5408:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Yellow, Yellow);
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	62 e0       	ldi	r22, 0x02	; 2
    5410:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5412:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER1_PORT, STEPPER1_COIL_Orange, Orange);
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	63 e0       	ldi	r22, 0x03	; 3
    541a:	49 8d       	ldd	r20, Y+25	; 0x19
    541c:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        if(step1==0) step1=3; else step1--;
    5420:	80 91 fe 00 	lds	r24, 0x00FE
    5424:	88 23       	and	r24, r24
    5426:	21 f4       	brne	.+8      	; 0x5430 <STEPPER_voidStepACW+0x9e>
    5428:	83 e0       	ldi	r24, 0x03	; 3
    542a:	80 93 fe 00 	sts	0x00FE, r24
    542e:	4b c0       	rjmp	.+150    	; 0x54c6 <STEPPER_voidStepACW+0x134>
    5430:	80 91 fe 00 	lds	r24, 0x00FE
    5434:	81 50       	subi	r24, 0x01	; 1
    5436:	80 93 fe 00 	sts	0x00FE, r24
    543a:	45 c0       	rjmp	.+138    	; 0x54c6 <STEPPER_voidStepACW+0x134>
    } else {
        seq = StepperFullStepSeq[step2];
    543c:	2d ed       	ldi	r18, 0xDD	; 221
    543e:	30 e0       	ldi	r19, 0x00	; 0
    5440:	80 91 ff 00 	lds	r24, 0x00FF
    5444:	88 2f       	mov	r24, r24
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	88 0f       	add	r24, r24
    544a:	99 1f       	adc	r25, r25
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	82 0f       	add	r24, r18
    5452:	93 1f       	adc	r25, r19
    5454:	9e 8f       	std	Y+30, r25	; 0x1e
    5456:	8d 8f       	std	Y+29, r24	; 0x1d
        Blue=seq[0]; Pink=seq[1]; Yellow=seq[2]; Orange=seq[3];
    5458:	ed 8d       	ldd	r30, Y+29	; 0x1d
    545a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    545c:	80 81       	ld	r24, Z
    545e:	8c 8f       	std	Y+28, r24	; 0x1c
    5460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5462:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5464:	fc 01       	movw	r30, r24
    5466:	31 96       	adiw	r30, 0x01	; 1
    5468:	80 81       	ld	r24, Z
    546a:	8b 8f       	std	Y+27, r24	; 0x1b
    546c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    546e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5470:	fc 01       	movw	r30, r24
    5472:	32 96       	adiw	r30, 0x02	; 2
    5474:	80 81       	ld	r24, Z
    5476:	8a 8f       	std	Y+26, r24	; 0x1a
    5478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    547a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    547c:	fc 01       	movw	r30, r24
    547e:	33 96       	adiw	r30, 0x03	; 3
    5480:	80 81       	ld	r24, Z
    5482:	89 8f       	std	Y+25, r24	; 0x19
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Blue, Blue);
    5484:	80 e0       	ldi	r24, 0x00	; 0
    5486:	64 e0       	ldi	r22, 0x04	; 4
    5488:	4c 8d       	ldd	r20, Y+28	; 0x1c
    548a:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Pink, Pink);
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	65 e0       	ldi	r22, 0x05	; 5
    5492:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5494:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Yellow, Yellow);
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	66 e0       	ldi	r22, 0x06	; 6
    549c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    549e:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(STEPPER2_PORT, STEPPER2_COIL_Orange, Orange);
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	67 e0       	ldi	r22, 0x07	; 7
    54a6:	49 8d       	ldd	r20, Y+25	; 0x19
    54a8:	0e 94 47 08 	call	0x108e	; 0x108e <DIO_voidSetPinValue>
        if(step2==0) step2=3; else step2--;
    54ac:	80 91 ff 00 	lds	r24, 0x00FF
    54b0:	88 23       	and	r24, r24
    54b2:	21 f4       	brne	.+8      	; 0x54bc <STEPPER_voidStepACW+0x12a>
    54b4:	83 e0       	ldi	r24, 0x03	; 3
    54b6:	80 93 ff 00 	sts	0x00FF, r24
    54ba:	05 c0       	rjmp	.+10     	; 0x54c6 <STEPPER_voidStepACW+0x134>
    54bc:	80 91 ff 00 	lds	r24, 0x00FF
    54c0:	81 50       	subi	r24, 0x01	; 1
    54c2:	80 93 ff 00 	sts	0x00FF, r24
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	aa ef       	ldi	r26, 0xFA	; 250
    54cc:	b4 e4       	ldi	r27, 0x44	; 68
    54ce:	8d 8b       	std	Y+21, r24	; 0x15
    54d0:	9e 8b       	std	Y+22, r25	; 0x16
    54d2:	af 8b       	std	Y+23, r26	; 0x17
    54d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    54d6:	6d 89       	ldd	r22, Y+21	; 0x15
    54d8:	7e 89       	ldd	r23, Y+22	; 0x16
    54da:	8f 89       	ldd	r24, Y+23	; 0x17
    54dc:	98 8d       	ldd	r25, Y+24	; 0x18
    54de:	2b ea       	ldi	r18, 0xAB	; 171
    54e0:	3a ea       	ldi	r19, 0xAA	; 170
    54e2:	4a e2       	ldi	r20, 0x2A	; 42
    54e4:	50 e4       	ldi	r21, 0x40	; 64
    54e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	89 8b       	std	Y+17, r24	; 0x11
    54f0:	9a 8b       	std	Y+18, r25	; 0x12
    54f2:	ab 8b       	std	Y+19, r26	; 0x13
    54f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    54f6:	69 89       	ldd	r22, Y+17	; 0x11
    54f8:	7a 89       	ldd	r23, Y+18	; 0x12
    54fa:	8b 89       	ldd	r24, Y+19	; 0x13
    54fc:	9c 89       	ldd	r25, Y+20	; 0x14
    54fe:	20 e0       	ldi	r18, 0x00	; 0
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	40 e8       	ldi	r20, 0x80	; 128
    5504:	5f e3       	ldi	r21, 0x3F	; 63
    5506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    550a:	88 23       	and	r24, r24
    550c:	1c f4       	brge	.+6      	; 0x5514 <STEPPER_voidStepACW+0x182>
		__ticks = 1;
    550e:	81 e0       	ldi	r24, 0x01	; 1
    5510:	88 8b       	std	Y+16, r24	; 0x10
    5512:	91 c0       	rjmp	.+290    	; 0x5636 <STEPPER_voidStepACW+0x2a4>
	else if (__tmp > 255)
    5514:	69 89       	ldd	r22, Y+17	; 0x11
    5516:	7a 89       	ldd	r23, Y+18	; 0x12
    5518:	8b 89       	ldd	r24, Y+19	; 0x13
    551a:	9c 89       	ldd	r25, Y+20	; 0x14
    551c:	20 e0       	ldi	r18, 0x00	; 0
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	4f e7       	ldi	r20, 0x7F	; 127
    5522:	53 e4       	ldi	r21, 0x43	; 67
    5524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5528:	18 16       	cp	r1, r24
    552a:	0c f0       	brlt	.+2      	; 0x552e <STEPPER_voidStepACW+0x19c>
    552c:	7b c0       	rjmp	.+246    	; 0x5624 <STEPPER_voidStepACW+0x292>
	{
		_delay_ms(__us / 1000.0);
    552e:	6d 89       	ldd	r22, Y+21	; 0x15
    5530:	7e 89       	ldd	r23, Y+22	; 0x16
    5532:	8f 89       	ldd	r24, Y+23	; 0x17
    5534:	98 8d       	ldd	r25, Y+24	; 0x18
    5536:	20 e0       	ldi	r18, 0x00	; 0
    5538:	30 e0       	ldi	r19, 0x00	; 0
    553a:	4a e7       	ldi	r20, 0x7A	; 122
    553c:	54 e4       	ldi	r21, 0x44	; 68
    553e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	8c 87       	std	Y+12, r24	; 0x0c
    5548:	9d 87       	std	Y+13, r25	; 0x0d
    554a:	ae 87       	std	Y+14, r26	; 0x0e
    554c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    554e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5550:	7d 85       	ldd	r23, Y+13	; 0x0d
    5552:	8e 85       	ldd	r24, Y+14	; 0x0e
    5554:	9f 85       	ldd	r25, Y+15	; 0x0f
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	4a ef       	ldi	r20, 0xFA	; 250
    555c:	54 e4       	ldi	r21, 0x44	; 68
    555e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5562:	dc 01       	movw	r26, r24
    5564:	cb 01       	movw	r24, r22
    5566:	88 87       	std	Y+8, r24	; 0x08
    5568:	99 87       	std	Y+9, r25	; 0x09
    556a:	aa 87       	std	Y+10, r26	; 0x0a
    556c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    556e:	68 85       	ldd	r22, Y+8	; 0x08
    5570:	79 85       	ldd	r23, Y+9	; 0x09
    5572:	8a 85       	ldd	r24, Y+10	; 0x0a
    5574:	9b 85       	ldd	r25, Y+11	; 0x0b
    5576:	20 e0       	ldi	r18, 0x00	; 0
    5578:	30 e0       	ldi	r19, 0x00	; 0
    557a:	40 e8       	ldi	r20, 0x80	; 128
    557c:	5f e3       	ldi	r21, 0x3F	; 63
    557e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5582:	88 23       	and	r24, r24
    5584:	2c f4       	brge	.+10     	; 0x5590 <STEPPER_voidStepACW+0x1fe>
		__ticks = 1;
    5586:	81 e0       	ldi	r24, 0x01	; 1
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	9f 83       	std	Y+7, r25	; 0x07
    558c:	8e 83       	std	Y+6, r24	; 0x06
    558e:	3f c0       	rjmp	.+126    	; 0x560e <STEPPER_voidStepACW+0x27c>
	else if (__tmp > 65535)
    5590:	68 85       	ldd	r22, Y+8	; 0x08
    5592:	79 85       	ldd	r23, Y+9	; 0x09
    5594:	8a 85       	ldd	r24, Y+10	; 0x0a
    5596:	9b 85       	ldd	r25, Y+11	; 0x0b
    5598:	20 e0       	ldi	r18, 0x00	; 0
    559a:	3f ef       	ldi	r19, 0xFF	; 255
    559c:	4f e7       	ldi	r20, 0x7F	; 127
    559e:	57 e4       	ldi	r21, 0x47	; 71
    55a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55a4:	18 16       	cp	r1, r24
    55a6:	4c f5       	brge	.+82     	; 0x55fa <STEPPER_voidStepACW+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    55aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    55ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    55ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	40 e2       	ldi	r20, 0x20	; 32
    55b6:	51 e4       	ldi	r21, 0x41	; 65
    55b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55bc:	dc 01       	movw	r26, r24
    55be:	cb 01       	movw	r24, r22
    55c0:	bc 01       	movw	r22, r24
    55c2:	cd 01       	movw	r24, r26
    55c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	9f 83       	std	Y+7, r25	; 0x07
    55ce:	8e 83       	std	Y+6, r24	; 0x06
    55d0:	0f c0       	rjmp	.+30     	; 0x55f0 <STEPPER_voidStepACW+0x25e>
    55d2:	88 ec       	ldi	r24, 0xC8	; 200
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	9d 83       	std	Y+5, r25	; 0x05
    55d8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    55da:	8c 81       	ldd	r24, Y+4	; 0x04
    55dc:	9d 81       	ldd	r25, Y+5	; 0x05
    55de:	01 97       	sbiw	r24, 0x01	; 1
    55e0:	f1 f7       	brne	.-4      	; 0x55de <STEPPER_voidStepACW+0x24c>
    55e2:	9d 83       	std	Y+5, r25	; 0x05
    55e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55e6:	8e 81       	ldd	r24, Y+6	; 0x06
    55e8:	9f 81       	ldd	r25, Y+7	; 0x07
    55ea:	01 97       	sbiw	r24, 0x01	; 1
    55ec:	9f 83       	std	Y+7, r25	; 0x07
    55ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f0:	8e 81       	ldd	r24, Y+6	; 0x06
    55f2:	9f 81       	ldd	r25, Y+7	; 0x07
    55f4:	00 97       	sbiw	r24, 0x00	; 0
    55f6:	69 f7       	brne	.-38     	; 0x55d2 <STEPPER_voidStepACW+0x240>
    55f8:	24 c0       	rjmp	.+72     	; 0x5642 <STEPPER_voidStepACW+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55fa:	68 85       	ldd	r22, Y+8	; 0x08
    55fc:	79 85       	ldd	r23, Y+9	; 0x09
    55fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5600:	9b 85       	ldd	r25, Y+11	; 0x0b
    5602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5606:	dc 01       	movw	r26, r24
    5608:	cb 01       	movw	r24, r22
    560a:	9f 83       	std	Y+7, r25	; 0x07
    560c:	8e 83       	std	Y+6, r24	; 0x06
    560e:	8e 81       	ldd	r24, Y+6	; 0x06
    5610:	9f 81       	ldd	r25, Y+7	; 0x07
    5612:	9b 83       	std	Y+3, r25	; 0x03
    5614:	8a 83       	std	Y+2, r24	; 0x02
    5616:	8a 81       	ldd	r24, Y+2	; 0x02
    5618:	9b 81       	ldd	r25, Y+3	; 0x03
    561a:	01 97       	sbiw	r24, 0x01	; 1
    561c:	f1 f7       	brne	.-4      	; 0x561a <STEPPER_voidStepACW+0x288>
    561e:	9b 83       	std	Y+3, r25	; 0x03
    5620:	8a 83       	std	Y+2, r24	; 0x02
    5622:	0f c0       	rjmp	.+30     	; 0x5642 <STEPPER_voidStepACW+0x2b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5624:	69 89       	ldd	r22, Y+17	; 0x11
    5626:	7a 89       	ldd	r23, Y+18	; 0x12
    5628:	8b 89       	ldd	r24, Y+19	; 0x13
    562a:	9c 89       	ldd	r25, Y+20	; 0x14
    562c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5630:	dc 01       	movw	r26, r24
    5632:	cb 01       	movw	r24, r22
    5634:	88 8b       	std	Y+16, r24	; 0x10
    5636:	88 89       	ldd	r24, Y+16	; 0x10
    5638:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    563a:	89 81       	ldd	r24, Y+1	; 0x01
    563c:	8a 95       	dec	r24
    563e:	f1 f7       	brne	.-4      	; 0x563c <STEPPER_voidStepACW+0x2aa>
    5640:	89 83       	std	Y+1, r24	; 0x01
    }

    _delay_us(STEP_DELAY_US);
}
    5642:	6f 96       	adiw	r28, 0x1f	; 31
    5644:	0f b6       	in	r0, 0x3f	; 63
    5646:	f8 94       	cli
    5648:	de bf       	out	0x3e, r29	; 62
    564a:	0f be       	out	0x3f, r0	; 63
    564c:	cd bf       	out	0x3d, r28	; 61
    564e:	cf 91       	pop	r28
    5650:	df 91       	pop	r29
    5652:	08 95       	ret

00005654 <__udivmodhi4>:
    5654:	aa 1b       	sub	r26, r26
    5656:	bb 1b       	sub	r27, r27
    5658:	51 e1       	ldi	r21, 0x11	; 17
    565a:	07 c0       	rjmp	.+14     	; 0x566a <__udivmodhi4_ep>

0000565c <__udivmodhi4_loop>:
    565c:	aa 1f       	adc	r26, r26
    565e:	bb 1f       	adc	r27, r27
    5660:	a6 17       	cp	r26, r22
    5662:	b7 07       	cpc	r27, r23
    5664:	10 f0       	brcs	.+4      	; 0x566a <__udivmodhi4_ep>
    5666:	a6 1b       	sub	r26, r22
    5668:	b7 0b       	sbc	r27, r23

0000566a <__udivmodhi4_ep>:
    566a:	88 1f       	adc	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	5a 95       	dec	r21
    5670:	a9 f7       	brne	.-22     	; 0x565c <__udivmodhi4_loop>
    5672:	80 95       	com	r24
    5674:	90 95       	com	r25
    5676:	bc 01       	movw	r22, r24
    5678:	cd 01       	movw	r24, r26
    567a:	08 95       	ret

0000567c <__divmodhi4>:
    567c:	97 fb       	bst	r25, 7
    567e:	09 2e       	mov	r0, r25
    5680:	07 26       	eor	r0, r23
    5682:	0a d0       	rcall	.+20     	; 0x5698 <__divmodhi4_neg1>
    5684:	77 fd       	sbrc	r23, 7
    5686:	04 d0       	rcall	.+8      	; 0x5690 <__divmodhi4_neg2>
    5688:	e5 df       	rcall	.-54     	; 0x5654 <__udivmodhi4>
    568a:	06 d0       	rcall	.+12     	; 0x5698 <__divmodhi4_neg1>
    568c:	00 20       	and	r0, r0
    568e:	1a f4       	brpl	.+6      	; 0x5696 <__divmodhi4_exit>

00005690 <__divmodhi4_neg2>:
    5690:	70 95       	com	r23
    5692:	61 95       	neg	r22
    5694:	7f 4f       	sbci	r23, 0xFF	; 255

00005696 <__divmodhi4_exit>:
    5696:	08 95       	ret

00005698 <__divmodhi4_neg1>:
    5698:	f6 f7       	brtc	.-4      	; 0x5696 <__divmodhi4_exit>
    569a:	90 95       	com	r25
    569c:	81 95       	neg	r24
    569e:	9f 4f       	sbci	r25, 0xFF	; 255
    56a0:	08 95       	ret

000056a2 <__prologue_saves__>:
    56a2:	2f 92       	push	r2
    56a4:	3f 92       	push	r3
    56a6:	4f 92       	push	r4
    56a8:	5f 92       	push	r5
    56aa:	6f 92       	push	r6
    56ac:	7f 92       	push	r7
    56ae:	8f 92       	push	r8
    56b0:	9f 92       	push	r9
    56b2:	af 92       	push	r10
    56b4:	bf 92       	push	r11
    56b6:	cf 92       	push	r12
    56b8:	df 92       	push	r13
    56ba:	ef 92       	push	r14
    56bc:	ff 92       	push	r15
    56be:	0f 93       	push	r16
    56c0:	1f 93       	push	r17
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	cd b7       	in	r28, 0x3d	; 61
    56c8:	de b7       	in	r29, 0x3e	; 62
    56ca:	ca 1b       	sub	r28, r26
    56cc:	db 0b       	sbc	r29, r27
    56ce:	0f b6       	in	r0, 0x3f	; 63
    56d0:	f8 94       	cli
    56d2:	de bf       	out	0x3e, r29	; 62
    56d4:	0f be       	out	0x3f, r0	; 63
    56d6:	cd bf       	out	0x3d, r28	; 61
    56d8:	09 94       	ijmp

000056da <__epilogue_restores__>:
    56da:	2a 88       	ldd	r2, Y+18	; 0x12
    56dc:	39 88       	ldd	r3, Y+17	; 0x11
    56de:	48 88       	ldd	r4, Y+16	; 0x10
    56e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    56e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    56e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    56e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    56e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    56ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    56ec:	b9 84       	ldd	r11, Y+9	; 0x09
    56ee:	c8 84       	ldd	r12, Y+8	; 0x08
    56f0:	df 80       	ldd	r13, Y+7	; 0x07
    56f2:	ee 80       	ldd	r14, Y+6	; 0x06
    56f4:	fd 80       	ldd	r15, Y+5	; 0x05
    56f6:	0c 81       	ldd	r16, Y+4	; 0x04
    56f8:	1b 81       	ldd	r17, Y+3	; 0x03
    56fa:	aa 81       	ldd	r26, Y+2	; 0x02
    56fc:	b9 81       	ldd	r27, Y+1	; 0x01
    56fe:	ce 0f       	add	r28, r30
    5700:	d1 1d       	adc	r29, r1
    5702:	0f b6       	in	r0, 0x3f	; 63
    5704:	f8 94       	cli
    5706:	de bf       	out	0x3e, r29	; 62
    5708:	0f be       	out	0x3f, r0	; 63
    570a:	cd bf       	out	0x3d, r28	; 61
    570c:	ed 01       	movw	r28, r26
    570e:	08 95       	ret

00005710 <_exit>:
    5710:	f8 94       	cli

00005712 <__stop_program>:
    5712:	ff cf       	rjmp	.-2      	; 0x5712 <__stop_program>
